/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/sweetalert2/dist/sweetalert2.all.js":
/*!**********************************************************!*\
  !*** ./node_modules/sweetalert2/dist/sweetalert2.all.js ***!
  \**********************************************************/
/***/ (function(module) {

eval("/*!\n* sweetalert2 v11.17.2\n* Released under the MIT License.\n*/\n(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n})(this, (function () { 'use strict';\n\n  function _assertClassBrand(e, t, n) {\n    if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n    throw new TypeError(\"Private element is not present on this object\");\n  }\n  function _checkPrivateRedeclaration(e, t) {\n    if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n  function _classPrivateFieldGet2(s, a) {\n    return s.get(_assertClassBrand(s, a));\n  }\n  function _classPrivateFieldInitSpec(e, t, a) {\n    _checkPrivateRedeclaration(e, t), t.set(e, a);\n  }\n  function _classPrivateFieldSet2(s, a, r) {\n    return s.set(_assertClassBrand(s, a), r), r;\n  }\n\n  const RESTORE_FOCUS_TIMEOUT = 100;\n\n  /** @type {GlobalState} */\n  const globalState = {};\n  const focusPreviousActiveElement = () => {\n    if (globalState.previousActiveElement instanceof HTMLElement) {\n      globalState.previousActiveElement.focus();\n      globalState.previousActiveElement = null;\n    } else if (document.body) {\n      document.body.focus();\n    }\n  };\n\n  /**\n   * Restore previous active (focused) element\n   *\n   * @param {boolean} returnFocus\n   * @returns {Promise<void>}\n   */\n  const restoreActiveElement = returnFocus => {\n    return new Promise(resolve => {\n      if (!returnFocus) {\n        return resolve();\n      }\n      const x = window.scrollX;\n      const y = window.scrollY;\n      globalState.restoreFocusTimeout = setTimeout(() => {\n        focusPreviousActiveElement();\n        resolve();\n      }, RESTORE_FOCUS_TIMEOUT); // issues/900\n\n      window.scrollTo(x, y);\n    });\n  };\n\n  const swalPrefix = 'swal2-';\n\n  /**\n   * @typedef {Record<SwalClass, string>} SwalClasses\n   */\n\n  /**\n   * @typedef {'success' | 'warning' | 'info' | 'question' | 'error'} SwalIcon\n   * @typedef {Record<SwalIcon, string>} SwalIcons\n   */\n\n  /** @type {SwalClass[]} */\n  const classNames = ['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'no-transition', 'toast', 'toast-shown', 'show', 'hide', 'close', 'title', 'html-container', 'actions', 'confirm', 'deny', 'cancel', 'default-outline', 'footer', 'icon', 'icon-content', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'input-label', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loader', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl', 'timer-progress-bar', 'timer-progress-bar-container', 'scrollbar-measure', 'icon-success', 'icon-warning', 'icon-info', 'icon-question', 'icon-error', 'draggable', 'dragging'];\n  const swalClasses = classNames.reduce((acc, className) => {\n    acc[className] = swalPrefix + className;\n    return acc;\n  }, /** @type {SwalClasses} */{});\n\n  /** @type {SwalIcon[]} */\n  const icons = ['success', 'warning', 'info', 'question', 'error'];\n  const iconTypes = icons.reduce((acc, icon) => {\n    acc[icon] = swalPrefix + icon;\n    return acc;\n  }, /** @type {SwalIcons} */{});\n\n  const consolePrefix = 'SweetAlert2:';\n\n  /**\n   * Capitalize the first letter of a string\n   *\n   * @param {string} str\n   * @returns {string}\n   */\n  const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);\n\n  /**\n   * Standardize console warnings\n   *\n   * @param {string | string[]} message\n   */\n  const warn = message => {\n    console.warn(`${consolePrefix} ${typeof message === 'object' ? message.join(' ') : message}`);\n  };\n\n  /**\n   * Standardize console errors\n   *\n   * @param {string} message\n   */\n  const error = message => {\n    console.error(`${consolePrefix} ${message}`);\n  };\n\n  /**\n   * Private global state for `warnOnce`\n   *\n   * @type {string[]}\n   * @private\n   */\n  const previousWarnOnceMessages = [];\n\n  /**\n   * Show a console warning, but only if it hasn't already been shown\n   *\n   * @param {string} message\n   */\n  const warnOnce = message => {\n    if (!previousWarnOnceMessages.includes(message)) {\n      previousWarnOnceMessages.push(message);\n      warn(message);\n    }\n  };\n\n  /**\n   * Show a one-time console warning about deprecated params/methods\n   *\n   * @param {string} deprecatedParam\n   * @param {string?} useInstead\n   */\n  const warnAboutDeprecation = function (deprecatedParam) {\n    let useInstead = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    warnOnce(`\"${deprecatedParam}\" is deprecated and will be removed in the next major release.${useInstead ? ` Use \"${useInstead}\" instead.` : ''}`);\n  };\n\n  /**\n   * If `arg` is a function, call it (with no arguments or context) and return the result.\n   * Otherwise, just pass the value through\n   *\n   * @param {Function | any} arg\n   * @returns {any}\n   */\n  const callIfFunction = arg => typeof arg === 'function' ? arg() : arg;\n\n  /**\n   * @param {any} arg\n   * @returns {boolean}\n   */\n  const hasToPromiseFn = arg => arg && typeof arg.toPromise === 'function';\n\n  /**\n   * @param {any} arg\n   * @returns {Promise<any>}\n   */\n  const asPromise = arg => hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);\n\n  /**\n   * @param {any} arg\n   * @returns {boolean}\n   */\n  const isPromise = arg => arg && Promise.resolve(arg) === arg;\n\n  /**\n   * Gets the popup container which contains the backdrop and the popup itself.\n   *\n   * @returns {HTMLElement | null}\n   */\n  const getContainer = () => document.body.querySelector(`.${swalClasses.container}`);\n\n  /**\n   * @param {string} selectorString\n   * @returns {HTMLElement | null}\n   */\n  const elementBySelector = selectorString => {\n    const container = getContainer();\n    return container ? container.querySelector(selectorString) : null;\n  };\n\n  /**\n   * @param {string} className\n   * @returns {HTMLElement | null}\n   */\n  const elementByClass = className => {\n    return elementBySelector(`.${className}`);\n  };\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getPopup = () => elementByClass(swalClasses.popup);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getIcon = () => elementByClass(swalClasses.icon);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getIconContent = () => elementByClass(swalClasses['icon-content']);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getTitle = () => elementByClass(swalClasses.title);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getHtmlContainer = () => elementByClass(swalClasses['html-container']);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getImage = () => elementByClass(swalClasses.image);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getProgressSteps = () => elementByClass(swalClasses['progress-steps']);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getValidationMessage = () => elementByClass(swalClasses['validation-message']);\n\n  /**\n   * @returns {HTMLButtonElement | null}\n   */\n  const getConfirmButton = () => (/** @type {HTMLButtonElement} */elementBySelector(`.${swalClasses.actions} .${swalClasses.confirm}`));\n\n  /**\n   * @returns {HTMLButtonElement | null}\n   */\n  const getCancelButton = () => (/** @type {HTMLButtonElement} */elementBySelector(`.${swalClasses.actions} .${swalClasses.cancel}`));\n\n  /**\n   * @returns {HTMLButtonElement | null}\n   */\n  const getDenyButton = () => (/** @type {HTMLButtonElement} */elementBySelector(`.${swalClasses.actions} .${swalClasses.deny}`));\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getInputLabel = () => elementByClass(swalClasses['input-label']);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getLoader = () => elementBySelector(`.${swalClasses.loader}`);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getActions = () => elementByClass(swalClasses.actions);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getFooter = () => elementByClass(swalClasses.footer);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getTimerProgressBar = () => elementByClass(swalClasses['timer-progress-bar']);\n\n  /**\n   * @returns {HTMLElement | null}\n   */\n  const getCloseButton = () => elementByClass(swalClasses.close);\n\n  // https://github.com/jkup/focusable/blob/master/index.js\n  const focusable = `\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex=\"0\"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n`;\n  /**\n   * @returns {HTMLElement[]}\n   */\n  const getFocusableElements = () => {\n    const popup = getPopup();\n    if (!popup) {\n      return [];\n    }\n    /** @type {NodeListOf<HTMLElement>} */\n    const focusableElementsWithTabindex = popup.querySelectorAll('[tabindex]:not([tabindex=\"-1\"]):not([tabindex=\"0\"])');\n    const focusableElementsWithTabindexSorted = Array.from(focusableElementsWithTabindex)\n    // sort according to tabindex\n    .sort((a, b) => {\n      const tabindexA = parseInt(a.getAttribute('tabindex') || '0');\n      const tabindexB = parseInt(b.getAttribute('tabindex') || '0');\n      if (tabindexA > tabindexB) {\n        return 1;\n      } else if (tabindexA < tabindexB) {\n        return -1;\n      }\n      return 0;\n    });\n\n    /** @type {NodeListOf<HTMLElement>} */\n    const otherFocusableElements = popup.querySelectorAll(focusable);\n    const otherFocusableElementsFiltered = Array.from(otherFocusableElements).filter(el => el.getAttribute('tabindex') !== '-1');\n    return [...new Set(focusableElementsWithTabindexSorted.concat(otherFocusableElementsFiltered))].filter(el => isVisible$1(el));\n  };\n\n  /**\n   * @returns {boolean}\n   */\n  const isModal = () => {\n    return hasClass(document.body, swalClasses.shown) && !hasClass(document.body, swalClasses['toast-shown']) && !hasClass(document.body, swalClasses['no-backdrop']);\n  };\n\n  /**\n   * @returns {boolean}\n   */\n  const isToast = () => {\n    const popup = getPopup();\n    if (!popup) {\n      return false;\n    }\n    return hasClass(popup, swalClasses.toast);\n  };\n\n  /**\n   * @returns {boolean}\n   */\n  const isLoading = () => {\n    const popup = getPopup();\n    if (!popup) {\n      return false;\n    }\n    return popup.hasAttribute('data-loading');\n  };\n\n  /**\n   * Securely set innerHTML of an element\n   * https://github.com/sweetalert2/sweetalert2/issues/1926\n   *\n   * @param {HTMLElement} elem\n   * @param {string} html\n   */\n  const setInnerHtml = (elem, html) => {\n    elem.textContent = '';\n    if (html) {\n      const parser = new DOMParser();\n      const parsed = parser.parseFromString(html, `text/html`);\n      const head = parsed.querySelector('head');\n      if (head) {\n        Array.from(head.childNodes).forEach(child => {\n          elem.appendChild(child);\n        });\n      }\n      const body = parsed.querySelector('body');\n      if (body) {\n        Array.from(body.childNodes).forEach(child => {\n          if (child instanceof HTMLVideoElement || child instanceof HTMLAudioElement) {\n            elem.appendChild(child.cloneNode(true)); // https://github.com/sweetalert2/sweetalert2/issues/2507\n          } else {\n            elem.appendChild(child);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * @param {HTMLElement} elem\n   * @param {string} className\n   * @returns {boolean}\n   */\n  const hasClass = (elem, className) => {\n    if (!className) {\n      return false;\n    }\n    const classList = className.split(/\\s+/);\n    for (let i = 0; i < classList.length; i++) {\n      if (!elem.classList.contains(classList[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * @param {HTMLElement} elem\n   * @param {SweetAlertOptions} params\n   */\n  const removeCustomClasses = (elem, params) => {\n    Array.from(elem.classList).forEach(className => {\n      if (!Object.values(swalClasses).includes(className) && !Object.values(iconTypes).includes(className) && !Object.values(params.showClass || {}).includes(className)) {\n        elem.classList.remove(className);\n      }\n    });\n  };\n\n  /**\n   * @param {HTMLElement} elem\n   * @param {SweetAlertOptions} params\n   * @param {string} className\n   */\n  const applyCustomClass = (elem, params, className) => {\n    removeCustomClasses(elem, params);\n    if (!params.customClass) {\n      return;\n    }\n    const customClass = params.customClass[(/** @type {keyof SweetAlertCustomClass} */className)];\n    if (!customClass) {\n      return;\n    }\n    if (typeof customClass !== 'string' && !customClass.forEach) {\n      warn(`Invalid type of customClass.${className}! Expected string or iterable object, got \"${typeof customClass}\"`);\n      return;\n    }\n    addClass(elem, customClass);\n  };\n\n  /**\n   * @param {HTMLElement} popup\n   * @param {import('./renderers/renderInput').InputClass | SweetAlertInput} inputClass\n   * @returns {HTMLInputElement | null}\n   */\n  const getInput$1 = (popup, inputClass) => {\n    if (!inputClass) {\n      return null;\n    }\n    switch (inputClass) {\n      case 'select':\n      case 'textarea':\n      case 'file':\n        return popup.querySelector(`.${swalClasses.popup} > .${swalClasses[inputClass]}`);\n      case 'checkbox':\n        return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.checkbox} input`);\n      case 'radio':\n        return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.radio} input:checked`) || popup.querySelector(`.${swalClasses.popup} > .${swalClasses.radio} input:first-child`);\n      case 'range':\n        return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.range} input`);\n      default:\n        return popup.querySelector(`.${swalClasses.popup} > .${swalClasses.input}`);\n    }\n  };\n\n  /**\n   * @param {HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement} input\n   */\n  const focusInput = input => {\n    input.focus();\n\n    // place cursor at end of text in text input\n    if (input.type !== 'file') {\n      // http://stackoverflow.com/a/2345915\n      const val = input.value;\n      input.value = '';\n      input.value = val;\n    }\n  };\n\n  /**\n   * @param {HTMLElement | HTMLElement[] | null} target\n   * @param {string | string[] | readonly string[] | undefined} classList\n   * @param {boolean} condition\n   */\n  const toggleClass = (target, classList, condition) => {\n    if (!target || !classList) {\n      return;\n    }\n    if (typeof classList === 'string') {\n      classList = classList.split(/\\s+/).filter(Boolean);\n    }\n    classList.forEach(className => {\n      if (Array.isArray(target)) {\n        target.forEach(elem => {\n          if (condition) {\n            elem.classList.add(className);\n          } else {\n            elem.classList.remove(className);\n          }\n        });\n      } else {\n        if (condition) {\n          target.classList.add(className);\n        } else {\n          target.classList.remove(className);\n        }\n      }\n    });\n  };\n\n  /**\n   * @param {HTMLElement | HTMLElement[] | null} target\n   * @param {string | string[] | readonly string[] | undefined} classList\n   */\n  const addClass = (target, classList) => {\n    toggleClass(target, classList, true);\n  };\n\n  /**\n   * @param {HTMLElement | HTMLElement[] | null} target\n   * @param {string | string[] | readonly string[] | undefined} classList\n   */\n  const removeClass = (target, classList) => {\n    toggleClass(target, classList, false);\n  };\n\n  /**\n   * Get direct child of an element by class name\n   *\n   * @param {HTMLElement} elem\n   * @param {string} className\n   * @returns {HTMLElement | undefined}\n   */\n  const getDirectChildByClass = (elem, className) => {\n    const children = Array.from(elem.children);\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child instanceof HTMLElement && hasClass(child, className)) {\n        return child;\n      }\n    }\n  };\n\n  /**\n   * @param {HTMLElement} elem\n   * @param {string} property\n   * @param {*} value\n   */\n  const applyNumericalStyle = (elem, property, value) => {\n    if (value === `${parseInt(value)}`) {\n      value = parseInt(value);\n    }\n    if (value || parseInt(value) === 0) {\n      elem.style.setProperty(property, typeof value === 'number' ? `${value}px` : value);\n    } else {\n      elem.style.removeProperty(property);\n    }\n  };\n\n  /**\n   * @param {HTMLElement | null} elem\n   * @param {string} display\n   */\n  const show = function (elem) {\n    let display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';\n    if (!elem) {\n      return;\n    }\n    elem.style.display = display;\n  };\n\n  /**\n   * @param {HTMLElement | null} elem\n   */\n  const hide = elem => {\n    if (!elem) {\n      return;\n    }\n    elem.style.display = 'none';\n  };\n\n  /**\n   * @param {HTMLElement | null} elem\n   * @param {string} display\n   */\n  const showWhenInnerHtmlPresent = function (elem) {\n    let display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'block';\n    if (!elem) {\n      return;\n    }\n    new MutationObserver(() => {\n      toggle(elem, elem.innerHTML, display);\n    }).observe(elem, {\n      childList: true,\n      subtree: true\n    });\n  };\n\n  /**\n   * @param {HTMLElement} parent\n   * @param {string} selector\n   * @param {string} property\n   * @param {string} value\n   */\n  const setStyle = (parent, selector, property, value) => {\n    /** @type {HTMLElement | null} */\n    const el = parent.querySelector(selector);\n    if (el) {\n      el.style.setProperty(property, value);\n    }\n  };\n\n  /**\n   * @param {HTMLElement} elem\n   * @param {any} condition\n   * @param {string} display\n   */\n  const toggle = function (elem, condition) {\n    let display = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'flex';\n    if (condition) {\n      show(elem, display);\n    } else {\n      hide(elem);\n    }\n  };\n\n  /**\n   * borrowed from jquery $(elem).is(':visible') implementation\n   *\n   * @param {HTMLElement | null} elem\n   * @returns {boolean}\n   */\n  const isVisible$1 = elem => !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));\n\n  /**\n   * @returns {boolean}\n   */\n  const allButtonsAreHidden = () => !isVisible$1(getConfirmButton()) && !isVisible$1(getDenyButton()) && !isVisible$1(getCancelButton());\n\n  /**\n   * @param {HTMLElement} elem\n   * @returns {boolean}\n   */\n  const isScrollable = elem => !!(elem.scrollHeight > elem.clientHeight);\n\n  /**\n   * borrowed from https://stackoverflow.com/a/46352119\n   *\n   * @param {HTMLElement} elem\n   * @returns {boolean}\n   */\n  const hasCssAnimation = elem => {\n    const style = window.getComputedStyle(elem);\n    const animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');\n    const transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');\n    return animDuration > 0 || transDuration > 0;\n  };\n\n  /**\n   * @param {number} timer\n   * @param {boolean} reset\n   */\n  const animateTimerProgressBar = function (timer) {\n    let reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const timerProgressBar = getTimerProgressBar();\n    if (!timerProgressBar) {\n      return;\n    }\n    if (isVisible$1(timerProgressBar)) {\n      if (reset) {\n        timerProgressBar.style.transition = 'none';\n        timerProgressBar.style.width = '100%';\n      }\n      setTimeout(() => {\n        timerProgressBar.style.transition = `width ${timer / 1000}s linear`;\n        timerProgressBar.style.width = '0%';\n      }, 10);\n    }\n  };\n  const stopTimerProgressBar = () => {\n    const timerProgressBar = getTimerProgressBar();\n    if (!timerProgressBar) {\n      return;\n    }\n    const timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\n    timerProgressBar.style.removeProperty('transition');\n    timerProgressBar.style.width = '100%';\n    const timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\n    const timerProgressBarPercent = timerProgressBarWidth / timerProgressBarFullWidth * 100;\n    timerProgressBar.style.width = `${timerProgressBarPercent}%`;\n  };\n\n  /**\n   * Detect Node env\n   *\n   * @returns {boolean}\n   */\n  const isNodeEnv = () => typeof window === 'undefined' || typeof document === 'undefined';\n\n  const sweetHTML = `\n <div aria-labelledby=\"${swalClasses.title}\" aria-describedby=\"${swalClasses['html-container']}\" class=\"${swalClasses.popup}\" tabindex=\"-1\">\n   <button type=\"button\" class=\"${swalClasses.close}\"></button>\n   <ul class=\"${swalClasses['progress-steps']}\"></ul>\n   <div class=\"${swalClasses.icon}\"></div>\n   <img class=\"${swalClasses.image}\" />\n   <h2 class=\"${swalClasses.title}\" id=\"${swalClasses.title}\"></h2>\n   <div class=\"${swalClasses['html-container']}\" id=\"${swalClasses['html-container']}\"></div>\n   <input class=\"${swalClasses.input}\" id=\"${swalClasses.input}\" />\n   <input type=\"file\" class=\"${swalClasses.file}\" />\n   <div class=\"${swalClasses.range}\">\n     <input type=\"range\" />\n     <output></output>\n   </div>\n   <select class=\"${swalClasses.select}\" id=\"${swalClasses.select}\"></select>\n   <div class=\"${swalClasses.radio}\"></div>\n   <label class=\"${swalClasses.checkbox}\">\n     <input type=\"checkbox\" id=\"${swalClasses.checkbox}\" />\n     <span class=\"${swalClasses.label}\"></span>\n   </label>\n   <textarea class=\"${swalClasses.textarea}\" id=\"${swalClasses.textarea}\"></textarea>\n   <div class=\"${swalClasses['validation-message']}\" id=\"${swalClasses['validation-message']}\"></div>\n   <div class=\"${swalClasses.actions}\">\n     <div class=\"${swalClasses.loader}\"></div>\n     <button type=\"button\" class=\"${swalClasses.confirm}\"></button>\n     <button type=\"button\" class=\"${swalClasses.deny}\"></button>\n     <button type=\"button\" class=\"${swalClasses.cancel}\"></button>\n   </div>\n   <div class=\"${swalClasses.footer}\"></div>\n   <div class=\"${swalClasses['timer-progress-bar-container']}\">\n     <div class=\"${swalClasses['timer-progress-bar']}\"></div>\n   </div>\n </div>\n`.replace(/(^|\\n)\\s*/g, '');\n\n  /**\n   * @returns {boolean}\n   */\n  const resetOldContainer = () => {\n    const oldContainer = getContainer();\n    if (!oldContainer) {\n      return false;\n    }\n    oldContainer.remove();\n    removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);\n    return true;\n  };\n  const resetValidationMessage$1 = () => {\n    globalState.currentInstance.resetValidationMessage();\n  };\n  const addInputChangeListeners = () => {\n    const popup = getPopup();\n    const input = getDirectChildByClass(popup, swalClasses.input);\n    const file = getDirectChildByClass(popup, swalClasses.file);\n    /** @type {HTMLInputElement} */\n    const range = popup.querySelector(`.${swalClasses.range} input`);\n    /** @type {HTMLOutputElement} */\n    const rangeOutput = popup.querySelector(`.${swalClasses.range} output`);\n    const select = getDirectChildByClass(popup, swalClasses.select);\n    /** @type {HTMLInputElement} */\n    const checkbox = popup.querySelector(`.${swalClasses.checkbox} input`);\n    const textarea = getDirectChildByClass(popup, swalClasses.textarea);\n    input.oninput = resetValidationMessage$1;\n    file.onchange = resetValidationMessage$1;\n    select.onchange = resetValidationMessage$1;\n    checkbox.onchange = resetValidationMessage$1;\n    textarea.oninput = resetValidationMessage$1;\n    range.oninput = () => {\n      resetValidationMessage$1();\n      rangeOutput.value = range.value;\n    };\n    range.onchange = () => {\n      resetValidationMessage$1();\n      rangeOutput.value = range.value;\n    };\n  };\n\n  /**\n   * @param {string | HTMLElement} target\n   * @returns {HTMLElement}\n   */\n  const getTarget = target => typeof target === 'string' ? document.querySelector(target) : target;\n\n  /**\n   * @param {SweetAlertOptions} params\n   */\n  const setupAccessibility = params => {\n    const popup = getPopup();\n    popup.setAttribute('role', params.toast ? 'alert' : 'dialog');\n    popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');\n    if (!params.toast) {\n      popup.setAttribute('aria-modal', 'true');\n    }\n  };\n\n  /**\n   * @param {HTMLElement} targetElement\n   */\n  const setupRTL = targetElement => {\n    if (window.getComputedStyle(targetElement).direction === 'rtl') {\n      addClass(getContainer(), swalClasses.rtl);\n    }\n  };\n\n  /**\n   * Add modal + backdrop + no-war message for Russians to DOM\n   *\n   * @param {SweetAlertOptions} params\n   */\n  const init = params => {\n    // Clean up the old popup container if it exists\n    const oldContainerExisted = resetOldContainer();\n    if (isNodeEnv()) {\n      error('SweetAlert2 requires document to initialize');\n      return;\n    }\n    const container = document.createElement('div');\n    container.className = swalClasses.container;\n    if (oldContainerExisted) {\n      addClass(container, swalClasses['no-transition']);\n    }\n    setInnerHtml(container, sweetHTML);\n    container.dataset['swal2Theme'] = params.theme;\n    const targetElement = getTarget(params.target);\n    targetElement.appendChild(container);\n    setupAccessibility(params);\n    setupRTL(targetElement);\n    addInputChangeListeners();\n  };\n\n  /**\n   * @param {HTMLElement | object | string} param\n   * @param {HTMLElement} target\n   */\n  const parseHtmlToContainer = (param, target) => {\n    // DOM element\n    if (param instanceof HTMLElement) {\n      target.appendChild(param);\n    }\n\n    // Object\n    else if (typeof param === 'object') {\n      handleObject(param, target);\n    }\n\n    // Plain string\n    else if (param) {\n      setInnerHtml(target, param);\n    }\n  };\n\n  /**\n   * @param {any} param\n   * @param {HTMLElement} target\n   */\n  const handleObject = (param, target) => {\n    // JQuery element(s)\n    if (param.jquery) {\n      handleJqueryElem(target, param);\n    }\n\n    // For other objects use their string representation\n    else {\n      setInnerHtml(target, param.toString());\n    }\n  };\n\n  /**\n   * @param {HTMLElement} target\n   * @param {any} elem\n   */\n  const handleJqueryElem = (target, elem) => {\n    target.textContent = '';\n    if (0 in elem) {\n      for (let i = 0; i in elem; i++) {\n        target.appendChild(elem[i].cloneNode(true));\n      }\n    } else {\n      target.appendChild(elem.cloneNode(true));\n    }\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderActions = (instance, params) => {\n    const actions = getActions();\n    const loader = getLoader();\n    if (!actions || !loader) {\n      return;\n    }\n\n    // Actions (buttons) wrapper\n    if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {\n      hide(actions);\n    } else {\n      show(actions);\n    }\n\n    // Custom class\n    applyCustomClass(actions, params, 'actions');\n\n    // Render all the buttons\n    renderButtons(actions, loader, params);\n\n    // Loader\n    setInnerHtml(loader, params.loaderHtml || '');\n    applyCustomClass(loader, params, 'loader');\n  };\n\n  /**\n   * @param {HTMLElement} actions\n   * @param {HTMLElement} loader\n   * @param {SweetAlertOptions} params\n   */\n  function renderButtons(actions, loader, params) {\n    const confirmButton = getConfirmButton();\n    const denyButton = getDenyButton();\n    const cancelButton = getCancelButton();\n    if (!confirmButton || !denyButton || !cancelButton) {\n      return;\n    }\n\n    // Render buttons\n    renderButton(confirmButton, 'confirm', params);\n    renderButton(denyButton, 'deny', params);\n    renderButton(cancelButton, 'cancel', params);\n    handleButtonsStyling(confirmButton, denyButton, cancelButton, params);\n    if (params.reverseButtons) {\n      if (params.toast) {\n        actions.insertBefore(cancelButton, confirmButton);\n        actions.insertBefore(denyButton, confirmButton);\n      } else {\n        actions.insertBefore(cancelButton, loader);\n        actions.insertBefore(denyButton, loader);\n        actions.insertBefore(confirmButton, loader);\n      }\n    }\n  }\n\n  /**\n   * @param {HTMLElement} confirmButton\n   * @param {HTMLElement} denyButton\n   * @param {HTMLElement} cancelButton\n   * @param {SweetAlertOptions} params\n   */\n  function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {\n    if (!params.buttonsStyling) {\n      removeClass([confirmButton, denyButton, cancelButton], swalClasses.styled);\n      return;\n    }\n    addClass([confirmButton, denyButton, cancelButton], swalClasses.styled);\n\n    // Buttons background colors\n    if (params.confirmButtonColor) {\n      confirmButton.style.backgroundColor = params.confirmButtonColor;\n      addClass(confirmButton, swalClasses['default-outline']);\n    }\n    if (params.denyButtonColor) {\n      denyButton.style.backgroundColor = params.denyButtonColor;\n      addClass(denyButton, swalClasses['default-outline']);\n    }\n    if (params.cancelButtonColor) {\n      cancelButton.style.backgroundColor = params.cancelButtonColor;\n      addClass(cancelButton, swalClasses['default-outline']);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} button\n   * @param {'confirm' | 'deny' | 'cancel'} buttonType\n   * @param {SweetAlertOptions} params\n   */\n  function renderButton(button, buttonType, params) {\n    const buttonName = /** @type {'Confirm' | 'Deny' | 'Cancel'} */capitalizeFirstLetter(buttonType);\n    toggle(button, params[`show${buttonName}Button`], 'inline-block');\n    setInnerHtml(button, params[`${buttonType}ButtonText`] || ''); // Set caption text\n    button.setAttribute('aria-label', params[`${buttonType}ButtonAriaLabel`] || ''); // ARIA label\n\n    // Add buttons custom classes\n    button.className = swalClasses[buttonType];\n    applyCustomClass(button, params, `${buttonType}Button`);\n  }\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderCloseButton = (instance, params) => {\n    const closeButton = getCloseButton();\n    if (!closeButton) {\n      return;\n    }\n    setInnerHtml(closeButton, params.closeButtonHtml || '');\n\n    // Custom class\n    applyCustomClass(closeButton, params, 'closeButton');\n    toggle(closeButton, params.showCloseButton);\n    closeButton.setAttribute('aria-label', params.closeButtonAriaLabel || '');\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderContainer = (instance, params) => {\n    const container = getContainer();\n    if (!container) {\n      return;\n    }\n    handleBackdropParam(container, params.backdrop);\n    handlePositionParam(container, params.position);\n    handleGrowParam(container, params.grow);\n\n    // Custom class\n    applyCustomClass(container, params, 'container');\n  };\n\n  /**\n   * @param {HTMLElement} container\n   * @param {SweetAlertOptions['backdrop']} backdrop\n   */\n  function handleBackdropParam(container, backdrop) {\n    if (typeof backdrop === 'string') {\n      container.style.background = backdrop;\n    } else if (!backdrop) {\n      addClass([document.documentElement, document.body], swalClasses['no-backdrop']);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} container\n   * @param {SweetAlertOptions['position']} position\n   */\n  function handlePositionParam(container, position) {\n    if (!position) {\n      return;\n    }\n    if (position in swalClasses) {\n      addClass(container, swalClasses[position]);\n    } else {\n      warn('The \"position\" parameter is not valid, defaulting to \"center\"');\n      addClass(container, swalClasses.center);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} container\n   * @param {SweetAlertOptions['grow']} grow\n   */\n  function handleGrowParam(container, grow) {\n    if (!grow) {\n      return;\n    }\n    addClass(container, swalClasses[`grow-${grow}`]);\n  }\n\n  /**\n   * This module contains `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n   * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n   * This is the approach that Babel will probably take to implement private methods/fields\n   *   https://github.com/tc39/proposal-private-methods\n   *   https://github.com/babel/babel/pull/7555\n   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n   *   then we can use that language feature.\n   */\n\n  var privateProps = {\n    innerParams: new WeakMap(),\n    domCache: new WeakMap()\n  };\n\n  /// <reference path=\"../../../../sweetalert2.d.ts\"/>\n\n\n  /** @type {InputClass[]} */\n  const inputClasses = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderInput = (instance, params) => {\n    const popup = getPopup();\n    if (!popup) {\n      return;\n    }\n    const innerParams = privateProps.innerParams.get(instance);\n    const rerender = !innerParams || params.input !== innerParams.input;\n    inputClasses.forEach(inputClass => {\n      const inputContainer = getDirectChildByClass(popup, swalClasses[inputClass]);\n      if (!inputContainer) {\n        return;\n      }\n\n      // set attributes\n      setAttributes(inputClass, params.inputAttributes);\n\n      // set class\n      inputContainer.className = swalClasses[inputClass];\n      if (rerender) {\n        hide(inputContainer);\n      }\n    });\n    if (params.input) {\n      if (rerender) {\n        showInput(params);\n      }\n      // set custom class\n      setCustomClass(params);\n    }\n  };\n\n  /**\n   * @param {SweetAlertOptions} params\n   */\n  const showInput = params => {\n    if (!params.input) {\n      return;\n    }\n    if (!renderInputType[params.input]) {\n      error(`Unexpected type of input! Expected ${Object.keys(renderInputType).join(' | ')}, got \"${params.input}\"`);\n      return;\n    }\n    const inputContainer = getInputContainer(params.input);\n    if (!inputContainer) {\n      return;\n    }\n    const input = renderInputType[params.input](inputContainer, params);\n    show(inputContainer);\n\n    // input autofocus\n    if (params.inputAutoFocus) {\n      setTimeout(() => {\n        focusInput(input);\n      });\n    }\n  };\n\n  /**\n   * @param {HTMLInputElement} input\n   */\n  const removeAttributes = input => {\n    for (let i = 0; i < input.attributes.length; i++) {\n      const attrName = input.attributes[i].name;\n      if (!['id', 'type', 'value', 'style'].includes(attrName)) {\n        input.removeAttribute(attrName);\n      }\n    }\n  };\n\n  /**\n   * @param {InputClass} inputClass\n   * @param {SweetAlertOptions['inputAttributes']} inputAttributes\n   */\n  const setAttributes = (inputClass, inputAttributes) => {\n    const popup = getPopup();\n    if (!popup) {\n      return;\n    }\n    const input = getInput$1(popup, inputClass);\n    if (!input) {\n      return;\n    }\n    removeAttributes(input);\n    for (const attr in inputAttributes) {\n      input.setAttribute(attr, inputAttributes[attr]);\n    }\n  };\n\n  /**\n   * @param {SweetAlertOptions} params\n   */\n  const setCustomClass = params => {\n    if (!params.input) {\n      return;\n    }\n    const inputContainer = getInputContainer(params.input);\n    if (inputContainer) {\n      applyCustomClass(inputContainer, params, 'input');\n    }\n  };\n\n  /**\n   * @param {HTMLInputElement | HTMLTextAreaElement} input\n   * @param {SweetAlertOptions} params\n   */\n  const setInputPlaceholder = (input, params) => {\n    if (!input.placeholder && params.inputPlaceholder) {\n      input.placeholder = params.inputPlaceholder;\n    }\n  };\n\n  /**\n   * @param {Input} input\n   * @param {Input} prependTo\n   * @param {SweetAlertOptions} params\n   */\n  const setInputLabel = (input, prependTo, params) => {\n    if (params.inputLabel) {\n      const label = document.createElement('label');\n      const labelClass = swalClasses['input-label'];\n      label.setAttribute('for', input.id);\n      label.className = labelClass;\n      if (typeof params.customClass === 'object') {\n        addClass(label, params.customClass.inputLabel);\n      }\n      label.innerText = params.inputLabel;\n      prependTo.insertAdjacentElement('beforebegin', label);\n    }\n  };\n\n  /**\n   * @param {SweetAlertInput} inputType\n   * @returns {HTMLElement | undefined}\n   */\n  const getInputContainer = inputType => {\n    const popup = getPopup();\n    if (!popup) {\n      return;\n    }\n    return getDirectChildByClass(popup, swalClasses[(/** @type {SwalClass} */inputType)] || swalClasses.input);\n  };\n\n  /**\n   * @param {HTMLInputElement | HTMLOutputElement | HTMLTextAreaElement} input\n   * @param {SweetAlertOptions['inputValue']} inputValue\n   */\n  const checkAndSetInputValue = (input, inputValue) => {\n    if (['string', 'number'].includes(typeof inputValue)) {\n      input.value = `${inputValue}`;\n    } else if (!isPromise(inputValue)) {\n      warn(`Unexpected type of inputValue! Expected \"string\", \"number\" or \"Promise\", got \"${typeof inputValue}\"`);\n    }\n  };\n\n  /** @type {Record<SweetAlertInput, (input: Input | HTMLElement, params: SweetAlertOptions) => Input>} */\n  const renderInputType = {};\n\n  /**\n   * @param {HTMLInputElement} input\n   * @param {SweetAlertOptions} params\n   * @returns {HTMLInputElement}\n   */\n  renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = renderInputType.search = renderInputType.date = renderInputType['datetime-local'] = renderInputType.time = renderInputType.week = renderInputType.month = /** @type {(input: Input | HTMLElement, params: SweetAlertOptions) => Input} */\n  (input, params) => {\n    checkAndSetInputValue(input, params.inputValue);\n    setInputLabel(input, input, params);\n    setInputPlaceholder(input, params);\n    input.type = params.input;\n    return input;\n  };\n\n  /**\n   * @param {HTMLInputElement} input\n   * @param {SweetAlertOptions} params\n   * @returns {HTMLInputElement}\n   */\n  renderInputType.file = (input, params) => {\n    setInputLabel(input, input, params);\n    setInputPlaceholder(input, params);\n    return input;\n  };\n\n  /**\n   * @param {HTMLInputElement} range\n   * @param {SweetAlertOptions} params\n   * @returns {HTMLInputElement}\n   */\n  renderInputType.range = (range, params) => {\n    const rangeInput = range.querySelector('input');\n    const rangeOutput = range.querySelector('output');\n    checkAndSetInputValue(rangeInput, params.inputValue);\n    rangeInput.type = params.input;\n    checkAndSetInputValue(rangeOutput, params.inputValue);\n    setInputLabel(rangeInput, range, params);\n    return range;\n  };\n\n  /**\n   * @param {HTMLSelectElement} select\n   * @param {SweetAlertOptions} params\n   * @returns {HTMLSelectElement}\n   */\n  renderInputType.select = (select, params) => {\n    select.textContent = '';\n    if (params.inputPlaceholder) {\n      const placeholder = document.createElement('option');\n      setInnerHtml(placeholder, params.inputPlaceholder);\n      placeholder.value = '';\n      placeholder.disabled = true;\n      placeholder.selected = true;\n      select.appendChild(placeholder);\n    }\n    setInputLabel(select, select, params);\n    return select;\n  };\n\n  /**\n   * @param {HTMLInputElement} radio\n   * @returns {HTMLInputElement}\n   */\n  renderInputType.radio = radio => {\n    radio.textContent = '';\n    return radio;\n  };\n\n  /**\n   * @param {HTMLLabelElement} checkboxContainer\n   * @param {SweetAlertOptions} params\n   * @returns {HTMLInputElement}\n   */\n  renderInputType.checkbox = (checkboxContainer, params) => {\n    const checkbox = getInput$1(getPopup(), 'checkbox');\n    checkbox.value = '1';\n    checkbox.checked = Boolean(params.inputValue);\n    const label = checkboxContainer.querySelector('span');\n    setInnerHtml(label, params.inputPlaceholder || params.inputLabel);\n    return checkbox;\n  };\n\n  /**\n   * @param {HTMLTextAreaElement} textarea\n   * @param {SweetAlertOptions} params\n   * @returns {HTMLTextAreaElement}\n   */\n  renderInputType.textarea = (textarea, params) => {\n    checkAndSetInputValue(textarea, params.inputValue);\n    setInputPlaceholder(textarea, params);\n    setInputLabel(textarea, textarea, params);\n\n    /**\n     * @param {HTMLElement} el\n     * @returns {number}\n     */\n    const getMargin = el => parseInt(window.getComputedStyle(el).marginLeft) + parseInt(window.getComputedStyle(el).marginRight);\n\n    // https://github.com/sweetalert2/sweetalert2/issues/2291\n    setTimeout(() => {\n      // https://github.com/sweetalert2/sweetalert2/issues/1699\n      if ('MutationObserver' in window) {\n        const initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);\n        const textareaResizeHandler = () => {\n          // check if texarea is still in document (i.e. popup wasn't closed in the meantime)\n          if (!document.body.contains(textarea)) {\n            return;\n          }\n          const textareaWidth = textarea.offsetWidth + getMargin(textarea);\n          if (textareaWidth > initialPopupWidth) {\n            getPopup().style.width = `${textareaWidth}px`;\n          } else {\n            applyNumericalStyle(getPopup(), 'width', params.width);\n          }\n        };\n        new MutationObserver(textareaResizeHandler).observe(textarea, {\n          attributes: true,\n          attributeFilter: ['style']\n        });\n      }\n    });\n    return textarea;\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderContent = (instance, params) => {\n    const htmlContainer = getHtmlContainer();\n    if (!htmlContainer) {\n      return;\n    }\n    showWhenInnerHtmlPresent(htmlContainer);\n    applyCustomClass(htmlContainer, params, 'htmlContainer');\n\n    // Content as HTML\n    if (params.html) {\n      parseHtmlToContainer(params.html, htmlContainer);\n      show(htmlContainer, 'block');\n    }\n\n    // Content as plain text\n    else if (params.text) {\n      htmlContainer.textContent = params.text;\n      show(htmlContainer, 'block');\n    }\n\n    // No content\n    else {\n      hide(htmlContainer);\n    }\n    renderInput(instance, params);\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderFooter = (instance, params) => {\n    const footer = getFooter();\n    if (!footer) {\n      return;\n    }\n    showWhenInnerHtmlPresent(footer);\n    toggle(footer, params.footer, 'block');\n    if (params.footer) {\n      parseHtmlToContainer(params.footer, footer);\n    }\n\n    // Custom class\n    applyCustomClass(footer, params, 'footer');\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderIcon = (instance, params) => {\n    const innerParams = privateProps.innerParams.get(instance);\n    const icon = getIcon();\n    if (!icon) {\n      return;\n    }\n\n    // if the given icon already rendered, apply the styling without re-rendering the icon\n    if (innerParams && params.icon === innerParams.icon) {\n      // Custom or default content\n      setContent(icon, params);\n      applyStyles(icon, params);\n      return;\n    }\n    if (!params.icon && !params.iconHtml) {\n      hide(icon);\n      return;\n    }\n    if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {\n      error(`Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"${params.icon}\"`);\n      hide(icon);\n      return;\n    }\n    show(icon);\n\n    // Custom or default content\n    setContent(icon, params);\n    applyStyles(icon, params);\n\n    // Animate icon\n    addClass(icon, params.showClass && params.showClass.icon);\n\n    // Re-adjust the success icon on system theme change\n    const colorSchemeQueryList = window.matchMedia('(prefers-color-scheme: dark)');\n    colorSchemeQueryList.addEventListener('change', adjustSuccessIconBackgroundColor);\n  };\n\n  /**\n   * @param {HTMLElement} icon\n   * @param {SweetAlertOptions} params\n   */\n  const applyStyles = (icon, params) => {\n    for (const [iconType, iconClassName] of Object.entries(iconTypes)) {\n      if (params.icon !== iconType) {\n        removeClass(icon, iconClassName);\n      }\n    }\n    addClass(icon, params.icon && iconTypes[params.icon]);\n\n    // Icon color\n    setColor(icon, params);\n\n    // Success icon background color\n    adjustSuccessIconBackgroundColor();\n\n    // Custom class\n    applyCustomClass(icon, params, 'icon');\n  };\n\n  // Adjust success icon background color to match the popup background color\n  const adjustSuccessIconBackgroundColor = () => {\n    const popup = getPopup();\n    if (!popup) {\n      return;\n    }\n    const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');\n    /** @type {NodeListOf<HTMLElement>} */\n    const successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');\n    for (let i = 0; i < successIconParts.length; i++) {\n      successIconParts[i].style.backgroundColor = popupBackgroundColor;\n    }\n  };\n  const successIconHtml = `\n  <div class=\"swal2-success-circular-line-left\"></div>\n  <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n  <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n  <div class=\"swal2-success-circular-line-right\"></div>\n`;\n  const errorIconHtml = `\n  <span class=\"swal2-x-mark\">\n    <span class=\"swal2-x-mark-line-left\"></span>\n    <span class=\"swal2-x-mark-line-right\"></span>\n  </span>\n`;\n\n  /**\n   * @param {HTMLElement} icon\n   * @param {SweetAlertOptions} params\n   */\n  const setContent = (icon, params) => {\n    if (!params.icon && !params.iconHtml) {\n      return;\n    }\n    let oldContent = icon.innerHTML;\n    let newContent = '';\n    if (params.iconHtml) {\n      newContent = iconContent(params.iconHtml);\n    } else if (params.icon === 'success') {\n      newContent = successIconHtml;\n      oldContent = oldContent.replace(/ style=\".*?\"/g, ''); // undo adjustSuccessIconBackgroundColor()\n    } else if (params.icon === 'error') {\n      newContent = errorIconHtml;\n    } else if (params.icon) {\n      const defaultIconHtml = {\n        question: '?',\n        warning: '!',\n        info: 'i'\n      };\n      newContent = iconContent(defaultIconHtml[params.icon]);\n    }\n    if (oldContent.trim() !== newContent.trim()) {\n      setInnerHtml(icon, newContent);\n    }\n  };\n\n  /**\n   * @param {HTMLElement} icon\n   * @param {SweetAlertOptions} params\n   */\n  const setColor = (icon, params) => {\n    if (!params.iconColor) {\n      return;\n    }\n    icon.style.color = params.iconColor;\n    icon.style.borderColor = params.iconColor;\n    for (const sel of ['.swal2-success-line-tip', '.swal2-success-line-long', '.swal2-x-mark-line-left', '.swal2-x-mark-line-right']) {\n      setStyle(icon, sel, 'background-color', params.iconColor);\n    }\n    setStyle(icon, '.swal2-success-ring', 'border-color', params.iconColor);\n  };\n\n  /**\n   * @param {string} content\n   * @returns {string}\n   */\n  const iconContent = content => `<div class=\"${swalClasses['icon-content']}\">${content}</div>`;\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderImage = (instance, params) => {\n    const image = getImage();\n    if (!image) {\n      return;\n    }\n    if (!params.imageUrl) {\n      hide(image);\n      return;\n    }\n    show(image, '');\n\n    // Src, alt\n    image.setAttribute('src', params.imageUrl);\n    image.setAttribute('alt', params.imageAlt || '');\n\n    // Width, height\n    applyNumericalStyle(image, 'width', params.imageWidth);\n    applyNumericalStyle(image, 'height', params.imageHeight);\n\n    // Class\n    image.className = swalClasses.image;\n    applyCustomClass(image, params, 'image');\n  };\n\n  let dragging = false;\n  let mousedownX = 0;\n  let mousedownY = 0;\n  let initialX = 0;\n  let initialY = 0;\n\n  /**\n   * @param {HTMLElement} popup\n   */\n  const addDraggableListeners = popup => {\n    popup.addEventListener('mousedown', down);\n    document.body.addEventListener('mousemove', move);\n    popup.addEventListener('mouseup', up);\n    popup.addEventListener('touchstart', down);\n    document.body.addEventListener('touchmove', move);\n    popup.addEventListener('touchend', up);\n  };\n\n  /**\n   * @param {HTMLElement} popup\n   */\n  const removeDraggableListeners = popup => {\n    popup.removeEventListener('mousedown', down);\n    document.body.removeEventListener('mousemove', move);\n    popup.removeEventListener('mouseup', up);\n    popup.removeEventListener('touchstart', down);\n    document.body.removeEventListener('touchmove', move);\n    popup.removeEventListener('touchend', up);\n  };\n\n  /**\n   * @param {MouseEvent | TouchEvent} event\n   */\n  const down = event => {\n    const popup = getPopup();\n    if (event.target === popup || getIcon().contains(/** @type {HTMLElement} */event.target)) {\n      dragging = true;\n      const clientXY = getClientXY(event);\n      mousedownX = clientXY.clientX;\n      mousedownY = clientXY.clientY;\n      initialX = parseInt(popup.style.insetInlineStart) || 0;\n      initialY = parseInt(popup.style.insetBlockStart) || 0;\n      addClass(popup, 'swal2-dragging');\n    }\n  };\n\n  /**\n   * @param {MouseEvent | TouchEvent} event\n   */\n  const move = event => {\n    const popup = getPopup();\n    if (dragging) {\n      let {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      popup.style.insetInlineStart = `${initialX + (clientX - mousedownX)}px`;\n      popup.style.insetBlockStart = `${initialY + (clientY - mousedownY)}px`;\n    }\n  };\n  const up = () => {\n    const popup = getPopup();\n    dragging = false;\n    removeClass(popup, 'swal2-dragging');\n  };\n\n  /**\n   * @param {MouseEvent | TouchEvent} event\n   * @returns {{ clientX: number, clientY: number }}\n   */\n  const getClientXY = event => {\n    let clientX = 0,\n      clientY = 0;\n    if (event.type.startsWith('mouse')) {\n      clientX = /** @type {MouseEvent} */event.clientX;\n      clientY = /** @type {MouseEvent} */event.clientY;\n    } else if (event.type.startsWith('touch')) {\n      clientX = /** @type {TouchEvent} */event.touches[0].clientX;\n      clientY = /** @type {TouchEvent} */event.touches[0].clientY;\n    }\n    return {\n      clientX,\n      clientY\n    };\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderPopup = (instance, params) => {\n    const container = getContainer();\n    const popup = getPopup();\n    if (!container || !popup) {\n      return;\n    }\n\n    // Width\n    // https://github.com/sweetalert2/sweetalert2/issues/2170\n    if (params.toast) {\n      applyNumericalStyle(container, 'width', params.width);\n      popup.style.width = '100%';\n      const loader = getLoader();\n      if (loader) {\n        popup.insertBefore(loader, getIcon());\n      }\n    } else {\n      applyNumericalStyle(popup, 'width', params.width);\n    }\n\n    // Padding\n    applyNumericalStyle(popup, 'padding', params.padding);\n\n    // Color\n    if (params.color) {\n      popup.style.color = params.color;\n    }\n\n    // Background\n    if (params.background) {\n      popup.style.background = params.background;\n    }\n    hide(getValidationMessage());\n\n    // Classes\n    addClasses$1(popup, params);\n    if (params.draggable && !params.toast) {\n      addClass(popup, swalClasses.draggable);\n      addDraggableListeners(popup);\n    } else {\n      removeClass(popup, swalClasses.draggable);\n      removeDraggableListeners(popup);\n    }\n  };\n\n  /**\n   * @param {HTMLElement} popup\n   * @param {SweetAlertOptions} params\n   */\n  const addClasses$1 = (popup, params) => {\n    const showClass = params.showClass || {};\n    // Default Class + showClass when updating Swal.update({})\n    popup.className = `${swalClasses.popup} ${isVisible$1(popup) ? showClass.popup : ''}`;\n    if (params.toast) {\n      addClass([document.documentElement, document.body], swalClasses['toast-shown']);\n      addClass(popup, swalClasses.toast);\n    } else {\n      addClass(popup, swalClasses.modal);\n    }\n\n    // Custom class\n    applyCustomClass(popup, params, 'popup');\n    // TODO: remove in the next major\n    if (typeof params.customClass === 'string') {\n      addClass(popup, params.customClass);\n    }\n\n    // Icon class (#1842)\n    if (params.icon) {\n      addClass(popup, swalClasses[`icon-${params.icon}`]);\n    }\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderProgressSteps = (instance, params) => {\n    const progressStepsContainer = getProgressSteps();\n    if (!progressStepsContainer) {\n      return;\n    }\n    const {\n      progressSteps,\n      currentProgressStep\n    } = params;\n    if (!progressSteps || progressSteps.length === 0 || currentProgressStep === undefined) {\n      hide(progressStepsContainer);\n      return;\n    }\n    show(progressStepsContainer);\n    progressStepsContainer.textContent = '';\n    if (currentProgressStep >= progressSteps.length) {\n      warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');\n    }\n    progressSteps.forEach((step, index) => {\n      const stepEl = createStepElement(step);\n      progressStepsContainer.appendChild(stepEl);\n      if (index === currentProgressStep) {\n        addClass(stepEl, swalClasses['active-progress-step']);\n      }\n      if (index !== progressSteps.length - 1) {\n        const lineEl = createLineElement(params);\n        progressStepsContainer.appendChild(lineEl);\n      }\n    });\n  };\n\n  /**\n   * @param {string} step\n   * @returns {HTMLLIElement}\n   */\n  const createStepElement = step => {\n    const stepEl = document.createElement('li');\n    addClass(stepEl, swalClasses['progress-step']);\n    setInnerHtml(stepEl, step);\n    return stepEl;\n  };\n\n  /**\n   * @param {SweetAlertOptions} params\n   * @returns {HTMLLIElement}\n   */\n  const createLineElement = params => {\n    const lineEl = document.createElement('li');\n    addClass(lineEl, swalClasses['progress-step-line']);\n    if (params.progressStepsDistance) {\n      applyNumericalStyle(lineEl, 'width', params.progressStepsDistance);\n    }\n    return lineEl;\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const renderTitle = (instance, params) => {\n    const title = getTitle();\n    if (!title) {\n      return;\n    }\n    showWhenInnerHtmlPresent(title);\n    toggle(title, params.title || params.titleText, 'block');\n    if (params.title) {\n      parseHtmlToContainer(params.title, title);\n    }\n    if (params.titleText) {\n      title.innerText = params.titleText;\n    }\n\n    // Custom class\n    applyCustomClass(title, params, 'title');\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const render = (instance, params) => {\n    renderPopup(instance, params);\n    renderContainer(instance, params);\n    renderProgressSteps(instance, params);\n    renderIcon(instance, params);\n    renderImage(instance, params);\n    renderTitle(instance, params);\n    renderCloseButton(instance, params);\n    renderContent(instance, params);\n    renderActions(instance, params);\n    renderFooter(instance, params);\n    const popup = getPopup();\n    if (typeof params.didRender === 'function' && popup) {\n      params.didRender(popup);\n    }\n    globalState.eventEmitter.emit('didRender', popup);\n  };\n\n  /*\n   * Global function to determine if SweetAlert2 popup is shown\n   */\n  const isVisible = () => {\n    return isVisible$1(getPopup());\n  };\n\n  /*\n   * Global function to click 'Confirm' button\n   */\n  const clickConfirm = () => {\n    var _dom$getConfirmButton;\n    return (_dom$getConfirmButton = getConfirmButton()) === null || _dom$getConfirmButton === void 0 ? void 0 : _dom$getConfirmButton.click();\n  };\n\n  /*\n   * Global function to click 'Deny' button\n   */\n  const clickDeny = () => {\n    var _dom$getDenyButton;\n    return (_dom$getDenyButton = getDenyButton()) === null || _dom$getDenyButton === void 0 ? void 0 : _dom$getDenyButton.click();\n  };\n\n  /*\n   * Global function to click 'Cancel' button\n   */\n  const clickCancel = () => {\n    var _dom$getCancelButton;\n    return (_dom$getCancelButton = getCancelButton()) === null || _dom$getCancelButton === void 0 ? void 0 : _dom$getCancelButton.click();\n  };\n\n  /** @typedef {'cancel' | 'backdrop' | 'close' | 'esc' | 'timer'} DismissReason */\n\n  /** @type {Record<DismissReason, DismissReason>} */\n  const DismissReason = Object.freeze({\n    cancel: 'cancel',\n    backdrop: 'backdrop',\n    close: 'close',\n    esc: 'esc',\n    timer: 'timer'\n  });\n\n  /**\n   * @param {GlobalState} globalState\n   */\n  const removeKeydownHandler = globalState => {\n    if (globalState.keydownTarget && globalState.keydownHandlerAdded) {\n      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n        capture: globalState.keydownListenerCapture\n      });\n      globalState.keydownHandlerAdded = false;\n    }\n  };\n\n  /**\n   * @param {GlobalState} globalState\n   * @param {SweetAlertOptions} innerParams\n   * @param {*} dismissWith\n   */\n  const addKeydownHandler = (globalState, innerParams, dismissWith) => {\n    removeKeydownHandler(globalState);\n    if (!innerParams.toast) {\n      globalState.keydownHandler = e => keydownHandler(innerParams, e, dismissWith);\n      globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();\n      globalState.keydownListenerCapture = innerParams.keydownListenerCapture;\n      globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {\n        capture: globalState.keydownListenerCapture\n      });\n      globalState.keydownHandlerAdded = true;\n    }\n  };\n\n  /**\n   * @param {number} index\n   * @param {number} increment\n   */\n  const setFocus = (index, increment) => {\n    var _dom$getPopup;\n    const focusableElements = getFocusableElements();\n    // search for visible elements and select the next possible match\n    if (focusableElements.length) {\n      index = index + increment;\n\n      // rollover to first item\n      if (index === focusableElements.length) {\n        index = 0;\n\n        // go to last item\n      } else if (index === -1) {\n        index = focusableElements.length - 1;\n      }\n      focusableElements[index].focus();\n      return;\n    }\n    // no visible focusable elements, focus the popup\n    (_dom$getPopup = getPopup()) === null || _dom$getPopup === void 0 || _dom$getPopup.focus();\n  };\n  const arrowKeysNextButton = ['ArrowRight', 'ArrowDown'];\n  const arrowKeysPreviousButton = ['ArrowLeft', 'ArrowUp'];\n\n  /**\n   * @param {SweetAlertOptions} innerParams\n   * @param {KeyboardEvent} event\n   * @param {Function} dismissWith\n   */\n  const keydownHandler = (innerParams, event, dismissWith) => {\n    if (!innerParams) {\n      return; // This instance has already been destroyed\n    }\n\n    // Ignore keydown during IME composition\n    // https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event#ignoring_keydown_during_ime_composition\n    // https://github.com/sweetalert2/sweetalert2/issues/720\n    // https://github.com/sweetalert2/sweetalert2/issues/2406\n    if (event.isComposing || event.keyCode === 229) {\n      return;\n    }\n    if (innerParams.stopKeydownPropagation) {\n      event.stopPropagation();\n    }\n\n    // ENTER\n    if (event.key === 'Enter') {\n      handleEnter(event, innerParams);\n    }\n\n    // TAB\n    else if (event.key === 'Tab') {\n      handleTab(event);\n    }\n\n    // ARROWS - switch focus between buttons\n    else if ([...arrowKeysNextButton, ...arrowKeysPreviousButton].includes(event.key)) {\n      handleArrows(event.key);\n    }\n\n    // ESC\n    else if (event.key === 'Escape') {\n      handleEsc(event, innerParams, dismissWith);\n    }\n  };\n\n  /**\n   * @param {KeyboardEvent} event\n   * @param {SweetAlertOptions} innerParams\n   */\n  const handleEnter = (event, innerParams) => {\n    // https://github.com/sweetalert2/sweetalert2/issues/2386\n    if (!callIfFunction(innerParams.allowEnterKey)) {\n      return;\n    }\n    const input = getInput$1(getPopup(), innerParams.input);\n    if (event.target && input && event.target instanceof HTMLElement && event.target.outerHTML === input.outerHTML) {\n      if (['textarea', 'file'].includes(innerParams.input)) {\n        return; // do not submit\n      }\n      clickConfirm();\n      event.preventDefault();\n    }\n  };\n\n  /**\n   * @param {KeyboardEvent} event\n   */\n  const handleTab = event => {\n    const targetElement = event.target;\n    const focusableElements = getFocusableElements();\n    let btnIndex = -1;\n    for (let i = 0; i < focusableElements.length; i++) {\n      if (targetElement === focusableElements[i]) {\n        btnIndex = i;\n        break;\n      }\n    }\n\n    // Cycle to the next button\n    if (!event.shiftKey) {\n      setFocus(btnIndex, 1);\n    }\n\n    // Cycle to the prev button\n    else {\n      setFocus(btnIndex, -1);\n    }\n    event.stopPropagation();\n    event.preventDefault();\n  };\n\n  /**\n   * @param {string} key\n   */\n  const handleArrows = key => {\n    const actions = getActions();\n    const confirmButton = getConfirmButton();\n    const denyButton = getDenyButton();\n    const cancelButton = getCancelButton();\n    if (!actions || !confirmButton || !denyButton || !cancelButton) {\n      return;\n    }\n    /** @type HTMLElement[] */\n    const buttons = [confirmButton, denyButton, cancelButton];\n    if (document.activeElement instanceof HTMLElement && !buttons.includes(document.activeElement)) {\n      return;\n    }\n    const sibling = arrowKeysNextButton.includes(key) ? 'nextElementSibling' : 'previousElementSibling';\n    let buttonToFocus = document.activeElement;\n    if (!buttonToFocus) {\n      return;\n    }\n    for (let i = 0; i < actions.children.length; i++) {\n      buttonToFocus = buttonToFocus[sibling];\n      if (!buttonToFocus) {\n        return;\n      }\n      if (buttonToFocus instanceof HTMLButtonElement && isVisible$1(buttonToFocus)) {\n        break;\n      }\n    }\n    if (buttonToFocus instanceof HTMLButtonElement) {\n      buttonToFocus.focus();\n    }\n  };\n\n  /**\n   * @param {KeyboardEvent} event\n   * @param {SweetAlertOptions} innerParams\n   * @param {Function} dismissWith\n   */\n  const handleEsc = (event, innerParams, dismissWith) => {\n    if (callIfFunction(innerParams.allowEscapeKey)) {\n      event.preventDefault();\n      dismissWith(DismissReason.esc);\n    }\n  };\n\n  /**\n   * This module contains `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n   * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n   * This is the approach that Babel will probably take to implement private methods/fields\n   *   https://github.com/tc39/proposal-private-methods\n   *   https://github.com/babel/babel/pull/7555\n   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n   *   then we can use that language feature.\n   */\n\n  var privateMethods = {\n    swalPromiseResolve: new WeakMap(),\n    swalPromiseReject: new WeakMap()\n  };\n\n  // From https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n  // Adding aria-hidden=\"true\" to elements outside of the active modal dialog ensures that\n  // elements not within the active modal dialog will not be surfaced if a user opens a screen\n  // reader’s list of elements (headings, form controls, landmarks, etc.) in the document.\n\n  const setAriaHidden = () => {\n    const container = getContainer();\n    const bodyChildren = Array.from(document.body.children);\n    bodyChildren.forEach(el => {\n      if (el.contains(container)) {\n        return;\n      }\n      if (el.hasAttribute('aria-hidden')) {\n        el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden') || '');\n      }\n      el.setAttribute('aria-hidden', 'true');\n    });\n  };\n  const unsetAriaHidden = () => {\n    const bodyChildren = Array.from(document.body.children);\n    bodyChildren.forEach(el => {\n      if (el.hasAttribute('data-previous-aria-hidden')) {\n        el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden') || '');\n        el.removeAttribute('data-previous-aria-hidden');\n      } else {\n        el.removeAttribute('aria-hidden');\n      }\n    });\n  };\n\n  // @ts-ignore\n  const isSafariOrIOS = typeof window !== 'undefined' && !!window.GestureEvent; // true for Safari desktop + all iOS browsers https://stackoverflow.com/a/70585394\n\n  /**\n   * Fix iOS scrolling\n   * http://stackoverflow.com/q/39626302\n   */\n  const iOSfix = () => {\n    if (isSafariOrIOS && !hasClass(document.body, swalClasses.iosfix)) {\n      const offset = document.body.scrollTop;\n      document.body.style.top = `${offset * -1}px`;\n      addClass(document.body, swalClasses.iosfix);\n      lockBodyScroll();\n    }\n  };\n\n  /**\n   * https://github.com/sweetalert2/sweetalert2/issues/1246\n   */\n  const lockBodyScroll = () => {\n    const container = getContainer();\n    if (!container) {\n      return;\n    }\n    /** @type {boolean} */\n    let preventTouchMove;\n    /**\n     * @param {TouchEvent} event\n     */\n    container.ontouchstart = event => {\n      preventTouchMove = shouldPreventTouchMove(event);\n    };\n    /**\n     * @param {TouchEvent} event\n     */\n    container.ontouchmove = event => {\n      if (preventTouchMove) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    };\n  };\n\n  /**\n   * @param {TouchEvent} event\n   * @returns {boolean}\n   */\n  const shouldPreventTouchMove = event => {\n    const target = event.target;\n    const container = getContainer();\n    const htmlContainer = getHtmlContainer();\n    if (!container || !htmlContainer) {\n      return false;\n    }\n    if (isStylus(event) || isZoom(event)) {\n      return false;\n    }\n    if (target === container) {\n      return true;\n    }\n    if (!isScrollable(container) && target instanceof HTMLElement && target.tagName !== 'INPUT' &&\n    // #1603\n    target.tagName !== 'TEXTAREA' &&\n    // #2266\n    !(isScrollable(htmlContainer) &&\n    // #1944\n    htmlContainer.contains(target))) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * https://github.com/sweetalert2/sweetalert2/issues/1786\n   *\n   * @param {*} event\n   * @returns {boolean}\n   */\n  const isStylus = event => {\n    return event.touches && event.touches.length && event.touches[0].touchType === 'stylus';\n  };\n\n  /**\n   * https://github.com/sweetalert2/sweetalert2/issues/1891\n   *\n   * @param {TouchEvent} event\n   * @returns {boolean}\n   */\n  const isZoom = event => {\n    return event.touches && event.touches.length > 1;\n  };\n  const undoIOSfix = () => {\n    if (hasClass(document.body, swalClasses.iosfix)) {\n      const offset = parseInt(document.body.style.top, 10);\n      removeClass(document.body, swalClasses.iosfix);\n      document.body.style.top = '';\n      document.body.scrollTop = offset * -1;\n    }\n  };\n\n  /**\n   * Measure scrollbar width for padding body during modal show/hide\n   * https://github.com/twbs/bootstrap/blob/master/js/src/modal.js\n   *\n   * @returns {number}\n   */\n  const measureScrollbar = () => {\n    const scrollDiv = document.createElement('div');\n    scrollDiv.className = swalClasses['scrollbar-measure'];\n    document.body.appendChild(scrollDiv);\n    const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n    document.body.removeChild(scrollDiv);\n    return scrollbarWidth;\n  };\n\n  /**\n   * Remember state in cases where opening and handling a modal will fiddle with it.\n   * @type {number | null}\n   */\n  let previousBodyPadding = null;\n\n  /**\n   * @param {string} initialBodyOverflow\n   */\n  const replaceScrollbarWithPadding = initialBodyOverflow => {\n    // for queues, do not do this more than once\n    if (previousBodyPadding !== null) {\n      return;\n    }\n    // if the body has overflow\n    if (document.body.scrollHeight > window.innerHeight || initialBodyOverflow === 'scroll' // https://github.com/sweetalert2/sweetalert2/issues/2663\n    ) {\n      // add padding so the content doesn't shift after removal of scrollbar\n      previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));\n      document.body.style.paddingRight = `${previousBodyPadding + measureScrollbar()}px`;\n    }\n  };\n  const undoReplaceScrollbarWithPadding = () => {\n    if (previousBodyPadding !== null) {\n      document.body.style.paddingRight = `${previousBodyPadding}px`;\n      previousBodyPadding = null;\n    }\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {HTMLElement} container\n   * @param {boolean} returnFocus\n   * @param {Function} didClose\n   */\n  function removePopupAndResetState(instance, container, returnFocus, didClose) {\n    if (isToast()) {\n      triggerDidCloseAndDispose(instance, didClose);\n    } else {\n      restoreActiveElement(returnFocus).then(() => triggerDidCloseAndDispose(instance, didClose));\n      removeKeydownHandler(globalState);\n    }\n\n    // workaround for https://github.com/sweetalert2/sweetalert2/issues/2088\n    // for some reason removing the container in Safari will scroll the document to bottom\n    if (isSafariOrIOS) {\n      container.setAttribute('style', 'display:none !important');\n      container.removeAttribute('class');\n      container.innerHTML = '';\n    } else {\n      container.remove();\n    }\n    if (isModal()) {\n      undoReplaceScrollbarWithPadding();\n      undoIOSfix();\n      unsetAriaHidden();\n    }\n    removeBodyClasses();\n  }\n\n  /**\n   * Remove SweetAlert2 classes from body\n   */\n  function removeBodyClasses() {\n    removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown']]);\n  }\n\n  /**\n   * Instance method to close sweetAlert\n   *\n   * @param {any} resolveValue\n   */\n  function close(resolveValue) {\n    resolveValue = prepareResolveValue(resolveValue);\n    const swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);\n    const didClose = triggerClosePopup(this);\n    if (this.isAwaitingPromise) {\n      // A swal awaiting for a promise (after a click on Confirm or Deny) cannot be dismissed anymore #2335\n      if (!resolveValue.isDismissed) {\n        handleAwaitingPromise(this);\n        swalPromiseResolve(resolveValue);\n      }\n    } else if (didClose) {\n      // Resolve Swal promise\n      swalPromiseResolve(resolveValue);\n    }\n  }\n  const triggerClosePopup = instance => {\n    const popup = getPopup();\n    if (!popup) {\n      return false;\n    }\n    const innerParams = privateProps.innerParams.get(instance);\n    if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {\n      return false;\n    }\n    removeClass(popup, innerParams.showClass.popup);\n    addClass(popup, innerParams.hideClass.popup);\n    const backdrop = getContainer();\n    removeClass(backdrop, innerParams.showClass.backdrop);\n    addClass(backdrop, innerParams.hideClass.backdrop);\n    handlePopupAnimation(instance, popup, innerParams);\n    return true;\n  };\n\n  /**\n   * @param {any} error\n   */\n  function rejectPromise(error) {\n    const rejectPromise = privateMethods.swalPromiseReject.get(this);\n    handleAwaitingPromise(this);\n    if (rejectPromise) {\n      // Reject Swal promise\n      rejectPromise(error);\n    }\n  }\n\n  /**\n   * @param {SweetAlert} instance\n   */\n  const handleAwaitingPromise = instance => {\n    if (instance.isAwaitingPromise) {\n      delete instance.isAwaitingPromise;\n      // The instance might have been previously partly destroyed, we must resume the destroy process in this case #2335\n      if (!privateProps.innerParams.get(instance)) {\n        instance._destroy();\n      }\n    }\n  };\n\n  /**\n   * @param {any} resolveValue\n   * @returns {SweetAlertResult}\n   */\n  const prepareResolveValue = resolveValue => {\n    // When user calls Swal.close()\n    if (typeof resolveValue === 'undefined') {\n      return {\n        isConfirmed: false,\n        isDenied: false,\n        isDismissed: true\n      };\n    }\n    return Object.assign({\n      isConfirmed: false,\n      isDenied: false,\n      isDismissed: false\n    }, resolveValue);\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {HTMLElement} popup\n   * @param {SweetAlertOptions} innerParams\n   */\n  const handlePopupAnimation = (instance, popup, innerParams) => {\n    var _globalState$eventEmi;\n    const container = getContainer();\n    // If animation is supported, animate\n    const animationIsSupported = hasCssAnimation(popup);\n    if (typeof innerParams.willClose === 'function') {\n      innerParams.willClose(popup);\n    }\n    (_globalState$eventEmi = globalState.eventEmitter) === null || _globalState$eventEmi === void 0 || _globalState$eventEmi.emit('willClose', popup);\n    if (animationIsSupported) {\n      animatePopup(instance, popup, container, innerParams.returnFocus, innerParams.didClose);\n    } else {\n      // Otherwise, remove immediately\n      removePopupAndResetState(instance, container, innerParams.returnFocus, innerParams.didClose);\n    }\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {HTMLElement} popup\n   * @param {HTMLElement} container\n   * @param {boolean} returnFocus\n   * @param {Function} didClose\n   */\n  const animatePopup = (instance, popup, container, returnFocus, didClose) => {\n    globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, returnFocus, didClose);\n    /**\n     * @param {AnimationEvent | TransitionEvent} e\n     */\n    const swalCloseAnimationFinished = function (e) {\n      if (e.target === popup) {\n        var _globalState$swalClos;\n        (_globalState$swalClos = globalState.swalCloseEventFinishedCallback) === null || _globalState$swalClos === void 0 || _globalState$swalClos.call(globalState);\n        delete globalState.swalCloseEventFinishedCallback;\n        popup.removeEventListener('animationend', swalCloseAnimationFinished);\n        popup.removeEventListener('transitionend', swalCloseAnimationFinished);\n      }\n    };\n    popup.addEventListener('animationend', swalCloseAnimationFinished);\n    popup.addEventListener('transitionend', swalCloseAnimationFinished);\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {Function} didClose\n   */\n  const triggerDidCloseAndDispose = (instance, didClose) => {\n    setTimeout(() => {\n      var _globalState$eventEmi2;\n      if (typeof didClose === 'function') {\n        didClose.bind(instance.params)();\n      }\n      (_globalState$eventEmi2 = globalState.eventEmitter) === null || _globalState$eventEmi2 === void 0 || _globalState$eventEmi2.emit('didClose');\n      // instance might have been destroyed already\n      if (instance._destroy) {\n        instance._destroy();\n      }\n    });\n  };\n\n  /**\n   * Shows loader (spinner), this is useful with AJAX requests.\n   * By default the loader be shown instead of the \"Confirm\" button.\n   *\n   * @param {HTMLButtonElement | null} [buttonToReplace]\n   */\n  const showLoading = buttonToReplace => {\n    let popup = getPopup();\n    if (!popup) {\n      new Swal();\n    }\n    popup = getPopup();\n    if (!popup) {\n      return;\n    }\n    const loader = getLoader();\n    if (isToast()) {\n      hide(getIcon());\n    } else {\n      replaceButton(popup, buttonToReplace);\n    }\n    show(loader);\n    popup.setAttribute('data-loading', 'true');\n    popup.setAttribute('aria-busy', 'true');\n    popup.focus();\n  };\n\n  /**\n   * @param {HTMLElement} popup\n   * @param {HTMLButtonElement | null} [buttonToReplace]\n   */\n  const replaceButton = (popup, buttonToReplace) => {\n    const actions = getActions();\n    const loader = getLoader();\n    if (!actions || !loader) {\n      return;\n    }\n    if (!buttonToReplace && isVisible$1(getConfirmButton())) {\n      buttonToReplace = getConfirmButton();\n    }\n    show(actions);\n    if (buttonToReplace) {\n      hide(buttonToReplace);\n      loader.setAttribute('data-button-to-replace', buttonToReplace.className);\n      actions.insertBefore(loader, buttonToReplace);\n    }\n    addClass([popup, actions], swalClasses.loading);\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const handleInputOptionsAndValue = (instance, params) => {\n    if (params.input === 'select' || params.input === 'radio') {\n      handleInputOptions(instance, params);\n    } else if (['text', 'email', 'number', 'tel', 'textarea'].some(i => i === params.input) && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {\n      showLoading(getConfirmButton());\n      handleInputValue(instance, params);\n    }\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} innerParams\n   * @returns {SweetAlertInputValue}\n   */\n  const getInputValue = (instance, innerParams) => {\n    const input = instance.getInput();\n    if (!input) {\n      return null;\n    }\n    switch (innerParams.input) {\n      case 'checkbox':\n        return getCheckboxValue(input);\n      case 'radio':\n        return getRadioValue(input);\n      case 'file':\n        return getFileValue(input);\n      default:\n        return innerParams.inputAutoTrim ? input.value.trim() : input.value;\n    }\n  };\n\n  /**\n   * @param {HTMLInputElement} input\n   * @returns {number}\n   */\n  const getCheckboxValue = input => input.checked ? 1 : 0;\n\n  /**\n   * @param {HTMLInputElement} input\n   * @returns {string | null}\n   */\n  const getRadioValue = input => input.checked ? input.value : null;\n\n  /**\n   * @param {HTMLInputElement} input\n   * @returns {FileList | File | null}\n   */\n  const getFileValue = input => input.files && input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const handleInputOptions = (instance, params) => {\n    const popup = getPopup();\n    if (!popup) {\n      return;\n    }\n    /**\n     * @param {Record<string, any>} inputOptions\n     */\n    const processInputOptions = inputOptions => {\n      if (params.input === 'select') {\n        populateSelectOptions(popup, formatInputOptions(inputOptions), params);\n      } else if (params.input === 'radio') {\n        populateRadioOptions(popup, formatInputOptions(inputOptions), params);\n      }\n    };\n    if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {\n      showLoading(getConfirmButton());\n      asPromise(params.inputOptions).then(inputOptions => {\n        instance.hideLoading();\n        processInputOptions(inputOptions);\n      });\n    } else if (typeof params.inputOptions === 'object') {\n      processInputOptions(params.inputOptions);\n    } else {\n      error(`Unexpected type of inputOptions! Expected object, Map or Promise, got ${typeof params.inputOptions}`);\n    }\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertOptions} params\n   */\n  const handleInputValue = (instance, params) => {\n    const input = instance.getInput();\n    if (!input) {\n      return;\n    }\n    hide(input);\n    asPromise(params.inputValue).then(inputValue => {\n      input.value = params.input === 'number' ? `${parseFloat(inputValue) || 0}` : `${inputValue}`;\n      show(input);\n      input.focus();\n      instance.hideLoading();\n    }).catch(err => {\n      error(`Error in inputValue promise: ${err}`);\n      input.value = '';\n      show(input);\n      input.focus();\n      instance.hideLoading();\n    });\n  };\n\n  /**\n   * @param {HTMLElement} popup\n   * @param {InputOptionFlattened[]} inputOptions\n   * @param {SweetAlertOptions} params\n   */\n  function populateSelectOptions(popup, inputOptions, params) {\n    const select = getDirectChildByClass(popup, swalClasses.select);\n    if (!select) {\n      return;\n    }\n    /**\n     * @param {HTMLElement} parent\n     * @param {string} optionLabel\n     * @param {string} optionValue\n     */\n    const renderOption = (parent, optionLabel, optionValue) => {\n      const option = document.createElement('option');\n      option.value = optionValue;\n      setInnerHtml(option, optionLabel);\n      option.selected = isSelected(optionValue, params.inputValue);\n      parent.appendChild(option);\n    };\n    inputOptions.forEach(inputOption => {\n      const optionValue = inputOption[0];\n      const optionLabel = inputOption[1];\n      // <optgroup> spec:\n      // https://www.w3.org/TR/html401/interact/forms.html#h-17.6\n      // \"...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)...\"\n      // check whether this is a <optgroup>\n      if (Array.isArray(optionLabel)) {\n        // if it is an array, then it is an <optgroup>\n        const optgroup = document.createElement('optgroup');\n        optgroup.label = optionValue;\n        optgroup.disabled = false; // not configurable for now\n        select.appendChild(optgroup);\n        optionLabel.forEach(o => renderOption(optgroup, o[1], o[0]));\n      } else {\n        // case of <option>\n        renderOption(select, optionLabel, optionValue);\n      }\n    });\n    select.focus();\n  }\n\n  /**\n   * @param {HTMLElement} popup\n   * @param {InputOptionFlattened[]} inputOptions\n   * @param {SweetAlertOptions} params\n   */\n  function populateRadioOptions(popup, inputOptions, params) {\n    const radio = getDirectChildByClass(popup, swalClasses.radio);\n    if (!radio) {\n      return;\n    }\n    inputOptions.forEach(inputOption => {\n      const radioValue = inputOption[0];\n      const radioLabel = inputOption[1];\n      const radioInput = document.createElement('input');\n      const radioLabelElement = document.createElement('label');\n      radioInput.type = 'radio';\n      radioInput.name = swalClasses.radio;\n      radioInput.value = radioValue;\n      if (isSelected(radioValue, params.inputValue)) {\n        radioInput.checked = true;\n      }\n      const label = document.createElement('span');\n      setInnerHtml(label, radioLabel);\n      label.className = swalClasses.label;\n      radioLabelElement.appendChild(radioInput);\n      radioLabelElement.appendChild(label);\n      radio.appendChild(radioLabelElement);\n    });\n    const radios = radio.querySelectorAll('input');\n    if (radios.length) {\n      radios[0].focus();\n    }\n  }\n\n  /**\n   * Converts `inputOptions` into an array of `[value, label]`s\n   *\n   * @param {Record<string, any>} inputOptions\n   * @typedef {string[]} InputOptionFlattened\n   * @returns {InputOptionFlattened[]}\n   */\n  const formatInputOptions = inputOptions => {\n    /** @type {InputOptionFlattened[]} */\n    const result = [];\n    if (inputOptions instanceof Map) {\n      inputOptions.forEach((value, key) => {\n        let valueFormatted = value;\n        if (typeof valueFormatted === 'object') {\n          // case of <optgroup>\n          valueFormatted = formatInputOptions(valueFormatted);\n        }\n        result.push([key, valueFormatted]);\n      });\n    } else {\n      Object.keys(inputOptions).forEach(key => {\n        let valueFormatted = inputOptions[key];\n        if (typeof valueFormatted === 'object') {\n          // case of <optgroup>\n          valueFormatted = formatInputOptions(valueFormatted);\n        }\n        result.push([key, valueFormatted]);\n      });\n    }\n    return result;\n  };\n\n  /**\n   * @param {string} optionValue\n   * @param {SweetAlertInputValue} inputValue\n   * @returns {boolean}\n   */\n  const isSelected = (optionValue, inputValue) => {\n    return !!inputValue && inputValue.toString() === optionValue.toString();\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   */\n  const handleConfirmButtonClick = instance => {\n    const innerParams = privateProps.innerParams.get(instance);\n    instance.disableButtons();\n    if (innerParams.input) {\n      handleConfirmOrDenyWithInput(instance, 'confirm');\n    } else {\n      confirm(instance, true);\n    }\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   */\n  const handleDenyButtonClick = instance => {\n    const innerParams = privateProps.innerParams.get(instance);\n    instance.disableButtons();\n    if (innerParams.returnInputValueOnDeny) {\n      handleConfirmOrDenyWithInput(instance, 'deny');\n    } else {\n      deny(instance, false);\n    }\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {Function} dismissWith\n   */\n  const handleCancelButtonClick = (instance, dismissWith) => {\n    instance.disableButtons();\n    dismissWith(DismissReason.cancel);\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {'confirm' | 'deny'} type\n   */\n  const handleConfirmOrDenyWithInput = (instance, type) => {\n    const innerParams = privateProps.innerParams.get(instance);\n    if (!innerParams.input) {\n      error(`The \"input\" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`);\n      return;\n    }\n    const input = instance.getInput();\n    const inputValue = getInputValue(instance, innerParams);\n    if (innerParams.inputValidator) {\n      handleInputValidator(instance, inputValue, type);\n    } else if (input && !input.checkValidity()) {\n      instance.enableButtons();\n      instance.showValidationMessage(innerParams.validationMessage || input.validationMessage);\n    } else if (type === 'deny') {\n      deny(instance, inputValue);\n    } else {\n      confirm(instance, inputValue);\n    }\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {SweetAlertInputValue} inputValue\n   * @param {'confirm' | 'deny'} type\n   */\n  const handleInputValidator = (instance, inputValue, type) => {\n    const innerParams = privateProps.innerParams.get(instance);\n    instance.disableInput();\n    const validationPromise = Promise.resolve().then(() => asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));\n    validationPromise.then(validationMessage => {\n      instance.enableButtons();\n      instance.enableInput();\n      if (validationMessage) {\n        instance.showValidationMessage(validationMessage);\n      } else if (type === 'deny') {\n        deny(instance, inputValue);\n      } else {\n        confirm(instance, inputValue);\n      }\n    });\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {any} value\n   */\n  const deny = (instance, value) => {\n    const innerParams = privateProps.innerParams.get(instance || undefined);\n    if (innerParams.showLoaderOnDeny) {\n      showLoading(getDenyButton());\n    }\n    if (innerParams.preDeny) {\n      instance.isAwaitingPromise = true; // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received\n      const preDenyPromise = Promise.resolve().then(() => asPromise(innerParams.preDeny(value, innerParams.validationMessage)));\n      preDenyPromise.then(preDenyValue => {\n        if (preDenyValue === false) {\n          instance.hideLoading();\n          handleAwaitingPromise(instance);\n        } else {\n          instance.close({\n            isDenied: true,\n            value: typeof preDenyValue === 'undefined' ? value : preDenyValue\n          });\n        }\n      }).catch(error => rejectWith(instance || undefined, error));\n    } else {\n      instance.close({\n        isDenied: true,\n        value\n      });\n    }\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {any} value\n   */\n  const succeedWith = (instance, value) => {\n    instance.close({\n      isConfirmed: true,\n      value\n    });\n  };\n\n  /**\n   *\n   * @param {SweetAlert} instance\n   * @param {string} error\n   */\n  const rejectWith = (instance, error) => {\n    instance.rejectPromise(error);\n  };\n\n  /**\n   *\n   * @param {SweetAlert} instance\n   * @param {any} value\n   */\n  const confirm = (instance, value) => {\n    const innerParams = privateProps.innerParams.get(instance || undefined);\n    if (innerParams.showLoaderOnConfirm) {\n      showLoading();\n    }\n    if (innerParams.preConfirm) {\n      instance.resetValidationMessage();\n      instance.isAwaitingPromise = true; // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received\n      const preConfirmPromise = Promise.resolve().then(() => asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));\n      preConfirmPromise.then(preConfirmValue => {\n        if (isVisible$1(getValidationMessage()) || preConfirmValue === false) {\n          instance.hideLoading();\n          handleAwaitingPromise(instance);\n        } else {\n          succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\n        }\n      }).catch(error => rejectWith(instance || undefined, error));\n    } else {\n      succeedWith(instance, value);\n    }\n  };\n\n  /**\n   * Hides loader and shows back the button which was hidden by .showLoading()\n   */\n  function hideLoading() {\n    // do nothing if popup is closed\n    const innerParams = privateProps.innerParams.get(this);\n    if (!innerParams) {\n      return;\n    }\n    const domCache = privateProps.domCache.get(this);\n    hide(domCache.loader);\n    if (isToast()) {\n      if (innerParams.icon) {\n        show(getIcon());\n      }\n    } else {\n      showRelatedButton(domCache);\n    }\n    removeClass([domCache.popup, domCache.actions], swalClasses.loading);\n    domCache.popup.removeAttribute('aria-busy');\n    domCache.popup.removeAttribute('data-loading');\n    domCache.confirmButton.disabled = false;\n    domCache.denyButton.disabled = false;\n    domCache.cancelButton.disabled = false;\n  }\n  const showRelatedButton = domCache => {\n    const buttonToReplace = domCache.popup.getElementsByClassName(domCache.loader.getAttribute('data-button-to-replace'));\n    if (buttonToReplace.length) {\n      show(buttonToReplace[0], 'inline-block');\n    } else if (allButtonsAreHidden()) {\n      hide(domCache.actions);\n    }\n  };\n\n  /**\n   * Gets the input DOM node, this method works with input parameter.\n   *\n   * @returns {HTMLInputElement | null}\n   */\n  function getInput() {\n    const innerParams = privateProps.innerParams.get(this);\n    const domCache = privateProps.domCache.get(this);\n    if (!domCache) {\n      return null;\n    }\n    return getInput$1(domCache.popup, innerParams.input);\n  }\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {string[]} buttons\n   * @param {boolean} disabled\n   */\n  function setButtonsDisabled(instance, buttons, disabled) {\n    const domCache = privateProps.domCache.get(instance);\n    buttons.forEach(button => {\n      domCache[button].disabled = disabled;\n    });\n  }\n\n  /**\n   * @param {HTMLInputElement | null} input\n   * @param {boolean} disabled\n   */\n  function setInputDisabled(input, disabled) {\n    const popup = getPopup();\n    if (!popup || !input) {\n      return;\n    }\n    if (input.type === 'radio') {\n      /** @type {NodeListOf<HTMLInputElement>} */\n      const radios = popup.querySelectorAll(`[name=\"${swalClasses.radio}\"]`);\n      for (let i = 0; i < radios.length; i++) {\n        radios[i].disabled = disabled;\n      }\n    } else {\n      input.disabled = disabled;\n    }\n  }\n\n  /**\n   * Enable all the buttons\n   * @this {SweetAlert}\n   */\n  function enableButtons() {\n    setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], false);\n  }\n\n  /**\n   * Disable all the buttons\n   * @this {SweetAlert}\n   */\n  function disableButtons() {\n    setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], true);\n  }\n\n  /**\n   * Enable the input field\n   * @this {SweetAlert}\n   */\n  function enableInput() {\n    setInputDisabled(this.getInput(), false);\n  }\n\n  /**\n   * Disable the input field\n   * @this {SweetAlert}\n   */\n  function disableInput() {\n    setInputDisabled(this.getInput(), true);\n  }\n\n  /**\n   * Show block with validation message\n   *\n   * @param {string} error\n   * @this {SweetAlert}\n   */\n  function showValidationMessage(error) {\n    const domCache = privateProps.domCache.get(this);\n    const params = privateProps.innerParams.get(this);\n    setInnerHtml(domCache.validationMessage, error);\n    domCache.validationMessage.className = swalClasses['validation-message'];\n    if (params.customClass && params.customClass.validationMessage) {\n      addClass(domCache.validationMessage, params.customClass.validationMessage);\n    }\n    show(domCache.validationMessage);\n    const input = this.getInput();\n    if (input) {\n      input.setAttribute('aria-invalid', 'true');\n      input.setAttribute('aria-describedby', swalClasses['validation-message']);\n      focusInput(input);\n      addClass(input, swalClasses.inputerror);\n    }\n  }\n\n  /**\n   * Hide block with validation message\n   *\n   * @this {SweetAlert}\n   */\n  function resetValidationMessage() {\n    const domCache = privateProps.domCache.get(this);\n    if (domCache.validationMessage) {\n      hide(domCache.validationMessage);\n    }\n    const input = this.getInput();\n    if (input) {\n      input.removeAttribute('aria-invalid');\n      input.removeAttribute('aria-describedby');\n      removeClass(input, swalClasses.inputerror);\n    }\n  }\n\n  const defaultParams = {\n    title: '',\n    titleText: '',\n    text: '',\n    html: '',\n    footer: '',\n    icon: undefined,\n    iconColor: undefined,\n    iconHtml: undefined,\n    template: undefined,\n    toast: false,\n    draggable: false,\n    animation: true,\n    theme: 'light',\n    showClass: {\n      popup: 'swal2-show',\n      backdrop: 'swal2-backdrop-show',\n      icon: 'swal2-icon-show'\n    },\n    hideClass: {\n      popup: 'swal2-hide',\n      backdrop: 'swal2-backdrop-hide',\n      icon: 'swal2-icon-hide'\n    },\n    customClass: {},\n    target: 'body',\n    color: undefined,\n    backdrop: true,\n    heightAuto: true,\n    allowOutsideClick: true,\n    allowEscapeKey: true,\n    allowEnterKey: true,\n    stopKeydownPropagation: true,\n    keydownListenerCapture: false,\n    showConfirmButton: true,\n    showDenyButton: false,\n    showCancelButton: false,\n    preConfirm: undefined,\n    preDeny: undefined,\n    confirmButtonText: 'OK',\n    confirmButtonAriaLabel: '',\n    confirmButtonColor: undefined,\n    denyButtonText: 'No',\n    denyButtonAriaLabel: '',\n    denyButtonColor: undefined,\n    cancelButtonText: 'Cancel',\n    cancelButtonAriaLabel: '',\n    cancelButtonColor: undefined,\n    buttonsStyling: true,\n    reverseButtons: false,\n    focusConfirm: true,\n    focusDeny: false,\n    focusCancel: false,\n    returnFocus: true,\n    showCloseButton: false,\n    closeButtonHtml: '&times;',\n    closeButtonAriaLabel: 'Close this dialog',\n    loaderHtml: '',\n    showLoaderOnConfirm: false,\n    showLoaderOnDeny: false,\n    imageUrl: undefined,\n    imageWidth: undefined,\n    imageHeight: undefined,\n    imageAlt: '',\n    timer: undefined,\n    timerProgressBar: false,\n    width: undefined,\n    padding: undefined,\n    background: undefined,\n    input: undefined,\n    inputPlaceholder: '',\n    inputLabel: '',\n    inputValue: '',\n    inputOptions: {},\n    inputAutoFocus: true,\n    inputAutoTrim: true,\n    inputAttributes: {},\n    inputValidator: undefined,\n    returnInputValueOnDeny: false,\n    validationMessage: undefined,\n    grow: false,\n    position: 'center',\n    progressSteps: [],\n    currentProgressStep: undefined,\n    progressStepsDistance: undefined,\n    willOpen: undefined,\n    didOpen: undefined,\n    didRender: undefined,\n    willClose: undefined,\n    didClose: undefined,\n    didDestroy: undefined,\n    scrollbarPadding: true\n  };\n  const updatableParams = ['allowEscapeKey', 'allowOutsideClick', 'background', 'buttonsStyling', 'cancelButtonAriaLabel', 'cancelButtonColor', 'cancelButtonText', 'closeButtonAriaLabel', 'closeButtonHtml', 'color', 'confirmButtonAriaLabel', 'confirmButtonColor', 'confirmButtonText', 'currentProgressStep', 'customClass', 'denyButtonAriaLabel', 'denyButtonColor', 'denyButtonText', 'didClose', 'didDestroy', 'draggable', 'footer', 'hideClass', 'html', 'icon', 'iconColor', 'iconHtml', 'imageAlt', 'imageHeight', 'imageUrl', 'imageWidth', 'preConfirm', 'preDeny', 'progressSteps', 'returnFocus', 'reverseButtons', 'showCancelButton', 'showCloseButton', 'showConfirmButton', 'showDenyButton', 'text', 'title', 'titleText', 'theme', 'willClose'];\n\n  /** @type {Record<string, string | undefined>} */\n  const deprecatedParams = {\n    allowEnterKey: undefined\n  };\n  const toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'draggable', 'focusConfirm', 'focusDeny', 'focusCancel', 'returnFocus', 'heightAuto', 'keydownListenerCapture'];\n\n  /**\n   * Is valid parameter\n   *\n   * @param {string} paramName\n   * @returns {boolean}\n   */\n  const isValidParameter = paramName => {\n    return Object.prototype.hasOwnProperty.call(defaultParams, paramName);\n  };\n\n  /**\n   * Is valid parameter for Swal.update() method\n   *\n   * @param {string} paramName\n   * @returns {boolean}\n   */\n  const isUpdatableParameter = paramName => {\n    return updatableParams.indexOf(paramName) !== -1;\n  };\n\n  /**\n   * Is deprecated parameter\n   *\n   * @param {string} paramName\n   * @returns {string | undefined}\n   */\n  const isDeprecatedParameter = paramName => {\n    return deprecatedParams[paramName];\n  };\n\n  /**\n   * @param {string} param\n   */\n  const checkIfParamIsValid = param => {\n    if (!isValidParameter(param)) {\n      warn(`Unknown parameter \"${param}\"`);\n    }\n  };\n\n  /**\n   * @param {string} param\n   */\n  const checkIfToastParamIsValid = param => {\n    if (toastIncompatibleParams.includes(param)) {\n      warn(`The parameter \"${param}\" is incompatible with toasts`);\n    }\n  };\n\n  /**\n   * @param {string} param\n   */\n  const checkIfParamIsDeprecated = param => {\n    const isDeprecated = isDeprecatedParameter(param);\n    if (isDeprecated) {\n      warnAboutDeprecation(param, isDeprecated);\n    }\n  };\n\n  /**\n   * Show relevant warnings for given params\n   *\n   * @param {SweetAlertOptions} params\n   */\n  const showWarningsForParams = params => {\n    if (params.backdrop === false && params.allowOutsideClick) {\n      warn('\"allowOutsideClick\" parameter requires `backdrop` parameter to be set to `true`');\n    }\n    if (params.theme && !['light', 'dark', 'auto', 'borderless'].includes(params.theme)) {\n      warn(`Invalid theme \"${params.theme}\". Expected \"light\", \"dark\", \"auto\", or \"borderless\"`);\n    }\n    for (const param in params) {\n      checkIfParamIsValid(param);\n      if (params.toast) {\n        checkIfToastParamIsValid(param);\n      }\n      checkIfParamIsDeprecated(param);\n    }\n  };\n\n  /**\n   * Updates popup parameters.\n   *\n   * @param {SweetAlertOptions} params\n   */\n  function update(params) {\n    const container = getContainer();\n    const popup = getPopup();\n    const innerParams = privateProps.innerParams.get(this);\n    if (!popup || hasClass(popup, innerParams.hideClass.popup)) {\n      warn(`You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.`);\n      return;\n    }\n    const validUpdatableParams = filterValidParams(params);\n    const updatedParams = Object.assign({}, innerParams, validUpdatableParams);\n    showWarningsForParams(updatedParams);\n    container.dataset['swal2Theme'] = updatedParams.theme;\n    render(this, updatedParams);\n    privateProps.innerParams.set(this, updatedParams);\n    Object.defineProperties(this, {\n      params: {\n        value: Object.assign({}, this.params, params),\n        writable: false,\n        enumerable: true\n      }\n    });\n  }\n\n  /**\n   * @param {SweetAlertOptions} params\n   * @returns {SweetAlertOptions}\n   */\n  const filterValidParams = params => {\n    const validUpdatableParams = {};\n    Object.keys(params).forEach(param => {\n      if (isUpdatableParameter(param)) {\n        validUpdatableParams[param] = params[param];\n      } else {\n        warn(`Invalid parameter to update: ${param}`);\n      }\n    });\n    return validUpdatableParams;\n  };\n\n  /**\n   * Dispose the current SweetAlert2 instance\n   */\n  function _destroy() {\n    const domCache = privateProps.domCache.get(this);\n    const innerParams = privateProps.innerParams.get(this);\n    if (!innerParams) {\n      disposeWeakMaps(this); // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n      return; // This instance has already been destroyed\n    }\n\n    // Check if there is another Swal closing\n    if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n      globalState.swalCloseEventFinishedCallback();\n      delete globalState.swalCloseEventFinishedCallback;\n    }\n    if (typeof innerParams.didDestroy === 'function') {\n      innerParams.didDestroy();\n    }\n    globalState.eventEmitter.emit('didDestroy');\n    disposeSwal(this);\n  }\n\n  /**\n   * @param {SweetAlert} instance\n   */\n  const disposeSwal = instance => {\n    disposeWeakMaps(instance);\n    // Unset this.params so GC will dispose it (#1569)\n    delete instance.params;\n    // Unset globalState props so GC will dispose globalState (#1569)\n    delete globalState.keydownHandler;\n    delete globalState.keydownTarget;\n    // Unset currentInstance\n    delete globalState.currentInstance;\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   */\n  const disposeWeakMaps = instance => {\n    // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n    if (instance.isAwaitingPromise) {\n      unsetWeakMaps(privateProps, instance);\n      instance.isAwaitingPromise = true;\n    } else {\n      unsetWeakMaps(privateMethods, instance);\n      unsetWeakMaps(privateProps, instance);\n      delete instance.isAwaitingPromise;\n      // Unset instance methods\n      delete instance.disableButtons;\n      delete instance.enableButtons;\n      delete instance.getInput;\n      delete instance.disableInput;\n      delete instance.enableInput;\n      delete instance.hideLoading;\n      delete instance.disableLoading;\n      delete instance.showValidationMessage;\n      delete instance.resetValidationMessage;\n      delete instance.close;\n      delete instance.closePopup;\n      delete instance.closeModal;\n      delete instance.closeToast;\n      delete instance.rejectPromise;\n      delete instance.update;\n      delete instance._destroy;\n    }\n  };\n\n  /**\n   * @param {object} obj\n   * @param {SweetAlert} instance\n   */\n  const unsetWeakMaps = (obj, instance) => {\n    for (const i in obj) {\n      obj[i].delete(instance);\n    }\n  };\n\n  var instanceMethods = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    _destroy: _destroy,\n    close: close,\n    closeModal: close,\n    closePopup: close,\n    closeToast: close,\n    disableButtons: disableButtons,\n    disableInput: disableInput,\n    disableLoading: hideLoading,\n    enableButtons: enableButtons,\n    enableInput: enableInput,\n    getInput: getInput,\n    handleAwaitingPromise: handleAwaitingPromise,\n    hideLoading: hideLoading,\n    rejectPromise: rejectPromise,\n    resetValidationMessage: resetValidationMessage,\n    showValidationMessage: showValidationMessage,\n    update: update\n  });\n\n  /**\n   * @param {SweetAlertOptions} innerParams\n   * @param {DomCache} domCache\n   * @param {Function} dismissWith\n   */\n  const handlePopupClick = (innerParams, domCache, dismissWith) => {\n    if (innerParams.toast) {\n      handleToastClick(innerParams, domCache, dismissWith);\n    } else {\n      // Ignore click events that had mousedown on the popup but mouseup on the container\n      // This can happen when the user drags a slider\n      handleModalMousedown(domCache);\n\n      // Ignore click events that had mousedown on the container but mouseup on the popup\n      handleContainerMousedown(domCache);\n      handleModalClick(innerParams, domCache, dismissWith);\n    }\n  };\n\n  /**\n   * @param {SweetAlertOptions} innerParams\n   * @param {DomCache} domCache\n   * @param {Function} dismissWith\n   */\n  const handleToastClick = (innerParams, domCache, dismissWith) => {\n    // Closing toast by internal click\n    domCache.popup.onclick = () => {\n      if (innerParams && (isAnyButtonShown(innerParams) || innerParams.timer || innerParams.input)) {\n        return;\n      }\n      dismissWith(DismissReason.close);\n    };\n  };\n\n  /**\n   * @param {SweetAlertOptions} innerParams\n   * @returns {boolean}\n   */\n  const isAnyButtonShown = innerParams => {\n    return !!(innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton);\n  };\n  let ignoreOutsideClick = false;\n\n  /**\n   * @param {DomCache} domCache\n   */\n  const handleModalMousedown = domCache => {\n    domCache.popup.onmousedown = () => {\n      domCache.container.onmouseup = function (e) {\n        domCache.container.onmouseup = () => {};\n        // We only check if the mouseup target is the container because usually it doesn't\n        // have any other direct children aside of the popup\n        if (e.target === domCache.container) {\n          ignoreOutsideClick = true;\n        }\n      };\n    };\n  };\n\n  /**\n   * @param {DomCache} domCache\n   */\n  const handleContainerMousedown = domCache => {\n    domCache.container.onmousedown = e => {\n      // prevent the modal text from being selected on double click on the container (allowOutsideClick: false)\n      if (e.target === domCache.container) {\n        e.preventDefault();\n      }\n      domCache.popup.onmouseup = function (e) {\n        domCache.popup.onmouseup = () => {};\n        // We also need to check if the mouseup target is a child of the popup\n        if (e.target === domCache.popup || e.target instanceof HTMLElement && domCache.popup.contains(e.target)) {\n          ignoreOutsideClick = true;\n        }\n      };\n    };\n  };\n\n  /**\n   * @param {SweetAlertOptions} innerParams\n   * @param {DomCache} domCache\n   * @param {Function} dismissWith\n   */\n  const handleModalClick = (innerParams, domCache, dismissWith) => {\n    domCache.container.onclick = e => {\n      if (ignoreOutsideClick) {\n        ignoreOutsideClick = false;\n        return;\n      }\n      if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {\n        dismissWith(DismissReason.backdrop);\n      }\n    };\n  };\n\n  const isJqueryElement = elem => typeof elem === 'object' && elem.jquery;\n  const isElement = elem => elem instanceof Element || isJqueryElement(elem);\n  const argsToParams = args => {\n    const params = {};\n    if (typeof args[0] === 'object' && !isElement(args[0])) {\n      Object.assign(params, args[0]);\n    } else {\n      ['title', 'html', 'icon'].forEach((name, index) => {\n        const arg = args[index];\n        if (typeof arg === 'string' || isElement(arg)) {\n          params[name] = arg;\n        } else if (arg !== undefined) {\n          error(`Unexpected type of ${name}! Expected \"string\" or \"Element\", got ${typeof arg}`);\n        }\n      });\n    }\n    return params;\n  };\n\n  /**\n   * Main method to create a new SweetAlert2 popup\n   *\n   * @param  {...SweetAlertOptions} args\n   * @returns {Promise<SweetAlertResult>}\n   */\n  function fire() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new this(...args);\n  }\n\n  /**\n   * Returns an extended version of `Swal` containing `params` as defaults.\n   * Useful for reusing Swal configuration.\n   *\n   * For example:\n   *\n   * Before:\n   * const textPromptOptions = { input: 'text', showCancelButton: true }\n   * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })\n   * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })\n   *\n   * After:\n   * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })\n   * const {value: firstName} = await TextPrompt('What is your first name?')\n   * const {value: lastName} = await TextPrompt('What is your last name?')\n   *\n   * @param {SweetAlertOptions} mixinParams\n   * @returns {SweetAlert}\n   */\n  function mixin(mixinParams) {\n    class MixinSwal extends this {\n      _main(params, priorityMixinParams) {\n        return super._main(params, Object.assign({}, mixinParams, priorityMixinParams));\n      }\n    }\n    // @ts-ignore\n    return MixinSwal;\n  }\n\n  /**\n   * If `timer` parameter is set, returns number of milliseconds of timer remained.\n   * Otherwise, returns undefined.\n   *\n   * @returns {number | undefined}\n   */\n  const getTimerLeft = () => {\n    return globalState.timeout && globalState.timeout.getTimerLeft();\n  };\n\n  /**\n   * Stop timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   *\n   * @returns {number | undefined}\n   */\n  const stopTimer = () => {\n    if (globalState.timeout) {\n      stopTimerProgressBar();\n      return globalState.timeout.stop();\n    }\n  };\n\n  /**\n   * Resume timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   *\n   * @returns {number | undefined}\n   */\n  const resumeTimer = () => {\n    if (globalState.timeout) {\n      const remaining = globalState.timeout.start();\n      animateTimerProgressBar(remaining);\n      return remaining;\n    }\n  };\n\n  /**\n   * Resume timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   *\n   * @returns {number | undefined}\n   */\n  const toggleTimer = () => {\n    const timer = globalState.timeout;\n    return timer && (timer.running ? stopTimer() : resumeTimer());\n  };\n\n  /**\n   * Increase timer. Returns number of milliseconds of an updated timer.\n   * If `timer` parameter isn't set, returns undefined.\n   *\n   * @param {number} ms\n   * @returns {number | undefined}\n   */\n  const increaseTimer = ms => {\n    if (globalState.timeout) {\n      const remaining = globalState.timeout.increase(ms);\n      animateTimerProgressBar(remaining, true);\n      return remaining;\n    }\n  };\n\n  /**\n   * Check if timer is running. Returns true if timer is running\n   * or false if timer is paused or stopped.\n   * If `timer` parameter isn't set, returns undefined\n   *\n   * @returns {boolean}\n   */\n  const isTimerRunning = () => {\n    return !!(globalState.timeout && globalState.timeout.isRunning());\n  };\n\n  let bodyClickListenerAdded = false;\n  const clickHandlers = {};\n\n  /**\n   * @param {string} attr\n   */\n  function bindClickHandler() {\n    let attr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data-swal-template';\n    clickHandlers[attr] = this;\n    if (!bodyClickListenerAdded) {\n      document.body.addEventListener('click', bodyClickListener);\n      bodyClickListenerAdded = true;\n    }\n  }\n  const bodyClickListener = event => {\n    for (let el = event.target; el && el !== document; el = el.parentNode) {\n      for (const attr in clickHandlers) {\n        const template = el.getAttribute(attr);\n        if (template) {\n          clickHandlers[attr].fire({\n            template\n          });\n          return;\n        }\n      }\n    }\n  };\n\n  // Source: https://gist.github.com/mudge/5830382?permalink_comment_id=2691957#gistcomment-2691957\n\n  class EventEmitter {\n    constructor() {\n      /** @type {Events} */\n      this.events = {};\n    }\n\n    /**\n     * @param {string} eventName\n     * @returns {EventHandlers}\n     */\n    _getHandlersByEventName(eventName) {\n      if (typeof this.events[eventName] === 'undefined') {\n        // not Set because we need to keep the FIFO order\n        // https://github.com/sweetalert2/sweetalert2/pull/2763#discussion_r1748990334\n        this.events[eventName] = [];\n      }\n      return this.events[eventName];\n    }\n\n    /**\n     * @param {string} eventName\n     * @param {EventHandler} eventHandler\n     */\n    on(eventName, eventHandler) {\n      const currentHandlers = this._getHandlersByEventName(eventName);\n      if (!currentHandlers.includes(eventHandler)) {\n        currentHandlers.push(eventHandler);\n      }\n    }\n\n    /**\n     * @param {string} eventName\n     * @param {EventHandler} eventHandler\n     */\n    once(eventName, eventHandler) {\n      var _this = this;\n      /**\n       * @param {Array} args\n       */\n      const onceFn = function () {\n        _this.removeListener(eventName, onceFn);\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        eventHandler.apply(_this, args);\n      };\n      this.on(eventName, onceFn);\n    }\n\n    /**\n     * @param {string} eventName\n     * @param {Array} args\n     */\n    emit(eventName) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      this._getHandlersByEventName(eventName).forEach(\n      /**\n       * @param {EventHandler} eventHandler\n       */\n      eventHandler => {\n        try {\n          eventHandler.apply(this, args);\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    }\n\n    /**\n     * @param {string} eventName\n     * @param {EventHandler} eventHandler\n     */\n    removeListener(eventName, eventHandler) {\n      const currentHandlers = this._getHandlersByEventName(eventName);\n      const index = currentHandlers.indexOf(eventHandler);\n      if (index > -1) {\n        currentHandlers.splice(index, 1);\n      }\n    }\n\n    /**\n     * @param {string} eventName\n     */\n    removeAllListeners(eventName) {\n      if (this.events[eventName] !== undefined) {\n        // https://github.com/sweetalert2/sweetalert2/pull/2763#discussion_r1749239222\n        this.events[eventName].length = 0;\n      }\n    }\n    reset() {\n      this.events = {};\n    }\n  }\n\n  globalState.eventEmitter = new EventEmitter();\n\n  /**\n   * @param {string} eventName\n   * @param {EventHandler} eventHandler\n   */\n  const on = (eventName, eventHandler) => {\n    globalState.eventEmitter.on(eventName, eventHandler);\n  };\n\n  /**\n   * @param {string} eventName\n   * @param {EventHandler} eventHandler\n   */\n  const once = (eventName, eventHandler) => {\n    globalState.eventEmitter.once(eventName, eventHandler);\n  };\n\n  /**\n   * @param {string} [eventName]\n   * @param {EventHandler} [eventHandler]\n   */\n  const off = (eventName, eventHandler) => {\n    // Remove all handlers for all events\n    if (!eventName) {\n      globalState.eventEmitter.reset();\n      return;\n    }\n    if (eventHandler) {\n      // Remove a specific handler\n      globalState.eventEmitter.removeListener(eventName, eventHandler);\n    } else {\n      // Remove all handlers for a specific event\n      globalState.eventEmitter.removeAllListeners(eventName);\n    }\n  };\n\n  var staticMethods = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    argsToParams: argsToParams,\n    bindClickHandler: bindClickHandler,\n    clickCancel: clickCancel,\n    clickConfirm: clickConfirm,\n    clickDeny: clickDeny,\n    enableLoading: showLoading,\n    fire: fire,\n    getActions: getActions,\n    getCancelButton: getCancelButton,\n    getCloseButton: getCloseButton,\n    getConfirmButton: getConfirmButton,\n    getContainer: getContainer,\n    getDenyButton: getDenyButton,\n    getFocusableElements: getFocusableElements,\n    getFooter: getFooter,\n    getHtmlContainer: getHtmlContainer,\n    getIcon: getIcon,\n    getIconContent: getIconContent,\n    getImage: getImage,\n    getInputLabel: getInputLabel,\n    getLoader: getLoader,\n    getPopup: getPopup,\n    getProgressSteps: getProgressSteps,\n    getTimerLeft: getTimerLeft,\n    getTimerProgressBar: getTimerProgressBar,\n    getTitle: getTitle,\n    getValidationMessage: getValidationMessage,\n    increaseTimer: increaseTimer,\n    isDeprecatedParameter: isDeprecatedParameter,\n    isLoading: isLoading,\n    isTimerRunning: isTimerRunning,\n    isUpdatableParameter: isUpdatableParameter,\n    isValidParameter: isValidParameter,\n    isVisible: isVisible,\n    mixin: mixin,\n    off: off,\n    on: on,\n    once: once,\n    resumeTimer: resumeTimer,\n    showLoading: showLoading,\n    stopTimer: stopTimer,\n    toggleTimer: toggleTimer\n  });\n\n  class Timer {\n    /**\n     * @param {Function} callback\n     * @param {number} delay\n     */\n    constructor(callback, delay) {\n      this.callback = callback;\n      this.remaining = delay;\n      this.running = false;\n      this.start();\n    }\n\n    /**\n     * @returns {number}\n     */\n    start() {\n      if (!this.running) {\n        this.running = true;\n        this.started = new Date();\n        this.id = setTimeout(this.callback, this.remaining);\n      }\n      return this.remaining;\n    }\n\n    /**\n     * @returns {number}\n     */\n    stop() {\n      if (this.started && this.running) {\n        this.running = false;\n        clearTimeout(this.id);\n        this.remaining -= new Date().getTime() - this.started.getTime();\n      }\n      return this.remaining;\n    }\n\n    /**\n     * @param {number} n\n     * @returns {number}\n     */\n    increase(n) {\n      const running = this.running;\n      if (running) {\n        this.stop();\n      }\n      this.remaining += n;\n      if (running) {\n        this.start();\n      }\n      return this.remaining;\n    }\n\n    /**\n     * @returns {number}\n     */\n    getTimerLeft() {\n      if (this.running) {\n        this.stop();\n        this.start();\n      }\n      return this.remaining;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isRunning() {\n      return this.running;\n    }\n  }\n\n  const swalStringParams = ['swal-title', 'swal-html', 'swal-footer'];\n\n  /**\n   * @param {SweetAlertOptions} params\n   * @returns {SweetAlertOptions}\n   */\n  const getTemplateParams = params => {\n    const template = typeof params.template === 'string' ? (/** @type {HTMLTemplateElement} */document.querySelector(params.template)) : params.template;\n    if (!template) {\n      return {};\n    }\n    /** @type {DocumentFragment} */\n    const templateContent = template.content;\n    showWarningsForElements(templateContent);\n    const result = Object.assign(getSwalParams(templateContent), getSwalFunctionParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));\n    return result;\n  };\n\n  /**\n   * @param {DocumentFragment} templateContent\n   * @returns {Record<string, any>}\n   */\n  const getSwalParams = templateContent => {\n    /** @type {Record<string, any>} */\n    const result = {};\n    /** @type {HTMLElement[]} */\n    const swalParams = Array.from(templateContent.querySelectorAll('swal-param'));\n    swalParams.forEach(param => {\n      showWarningsForAttributes(param, ['name', 'value']);\n      const paramName = /** @type {keyof SweetAlertOptions} */param.getAttribute('name');\n      const value = param.getAttribute('value');\n      if (!paramName || !value) {\n        return;\n      }\n      if (typeof defaultParams[paramName] === 'boolean') {\n        result[paramName] = value !== 'false';\n      } else if (typeof defaultParams[paramName] === 'object') {\n        result[paramName] = JSON.parse(value);\n      } else {\n        result[paramName] = value;\n      }\n    });\n    return result;\n  };\n\n  /**\n   * @param {DocumentFragment} templateContent\n   * @returns {Record<string, any>}\n   */\n  const getSwalFunctionParams = templateContent => {\n    /** @type {Record<string, any>} */\n    const result = {};\n    /** @type {HTMLElement[]} */\n    const swalFunctions = Array.from(templateContent.querySelectorAll('swal-function-param'));\n    swalFunctions.forEach(param => {\n      const paramName = /** @type {keyof SweetAlertOptions} */param.getAttribute('name');\n      const value = param.getAttribute('value');\n      if (!paramName || !value) {\n        return;\n      }\n      result[paramName] = new Function(`return ${value}`)();\n    });\n    return result;\n  };\n\n  /**\n   * @param {DocumentFragment} templateContent\n   * @returns {Record<string, any>}\n   */\n  const getSwalButtons = templateContent => {\n    /** @type {Record<string, any>} */\n    const result = {};\n    /** @type {HTMLElement[]} */\n    const swalButtons = Array.from(templateContent.querySelectorAll('swal-button'));\n    swalButtons.forEach(button => {\n      showWarningsForAttributes(button, ['type', 'color', 'aria-label']);\n      const type = button.getAttribute('type');\n      if (!type || !['confirm', 'cancel', 'deny'].includes(type)) {\n        return;\n      }\n      result[`${type}ButtonText`] = button.innerHTML;\n      result[`show${capitalizeFirstLetter(type)}Button`] = true;\n      if (button.hasAttribute('color')) {\n        result[`${type}ButtonColor`] = button.getAttribute('color');\n      }\n      if (button.hasAttribute('aria-label')) {\n        result[`${type}ButtonAriaLabel`] = button.getAttribute('aria-label');\n      }\n    });\n    return result;\n  };\n\n  /**\n   * @param {DocumentFragment} templateContent\n   * @returns {Pick<SweetAlertOptions, 'imageUrl' | 'imageWidth' | 'imageHeight' | 'imageAlt'>}\n   */\n  const getSwalImage = templateContent => {\n    const result = {};\n    /** @type {HTMLElement | null} */\n    const image = templateContent.querySelector('swal-image');\n    if (image) {\n      showWarningsForAttributes(image, ['src', 'width', 'height', 'alt']);\n      if (image.hasAttribute('src')) {\n        result.imageUrl = image.getAttribute('src') || undefined;\n      }\n      if (image.hasAttribute('width')) {\n        result.imageWidth = image.getAttribute('width') || undefined;\n      }\n      if (image.hasAttribute('height')) {\n        result.imageHeight = image.getAttribute('height') || undefined;\n      }\n      if (image.hasAttribute('alt')) {\n        result.imageAlt = image.getAttribute('alt') || undefined;\n      }\n    }\n    return result;\n  };\n\n  /**\n   * @param {DocumentFragment} templateContent\n   * @returns {Record<string, any>}\n   */\n  const getSwalIcon = templateContent => {\n    const result = {};\n    /** @type {HTMLElement | null} */\n    const icon = templateContent.querySelector('swal-icon');\n    if (icon) {\n      showWarningsForAttributes(icon, ['type', 'color']);\n      if (icon.hasAttribute('type')) {\n        result.icon = icon.getAttribute('type');\n      }\n      if (icon.hasAttribute('color')) {\n        result.iconColor = icon.getAttribute('color');\n      }\n      result.iconHtml = icon.innerHTML;\n    }\n    return result;\n  };\n\n  /**\n   * @param {DocumentFragment} templateContent\n   * @returns {Record<string, any>}\n   */\n  const getSwalInput = templateContent => {\n    /** @type {Record<string, any>} */\n    const result = {};\n    /** @type {HTMLElement | null} */\n    const input = templateContent.querySelector('swal-input');\n    if (input) {\n      showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value']);\n      result.input = input.getAttribute('type') || 'text';\n      if (input.hasAttribute('label')) {\n        result.inputLabel = input.getAttribute('label');\n      }\n      if (input.hasAttribute('placeholder')) {\n        result.inputPlaceholder = input.getAttribute('placeholder');\n      }\n      if (input.hasAttribute('value')) {\n        result.inputValue = input.getAttribute('value');\n      }\n    }\n    /** @type {HTMLElement[]} */\n    const inputOptions = Array.from(templateContent.querySelectorAll('swal-input-option'));\n    if (inputOptions.length) {\n      result.inputOptions = {};\n      inputOptions.forEach(option => {\n        showWarningsForAttributes(option, ['value']);\n        const optionValue = option.getAttribute('value');\n        if (!optionValue) {\n          return;\n        }\n        const optionName = option.innerHTML;\n        result.inputOptions[optionValue] = optionName;\n      });\n    }\n    return result;\n  };\n\n  /**\n   * @param {DocumentFragment} templateContent\n   * @param {string[]} paramNames\n   * @returns {Record<string, any>}\n   */\n  const getSwalStringParams = (templateContent, paramNames) => {\n    /** @type {Record<string, any>} */\n    const result = {};\n    for (const i in paramNames) {\n      const paramName = paramNames[i];\n      /** @type {HTMLElement | null} */\n      const tag = templateContent.querySelector(paramName);\n      if (tag) {\n        showWarningsForAttributes(tag, []);\n        result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim();\n      }\n    }\n    return result;\n  };\n\n  /**\n   * @param {DocumentFragment} templateContent\n   */\n  const showWarningsForElements = templateContent => {\n    const allowedElements = swalStringParams.concat(['swal-param', 'swal-function-param', 'swal-button', 'swal-image', 'swal-icon', 'swal-input', 'swal-input-option']);\n    Array.from(templateContent.children).forEach(el => {\n      const tagName = el.tagName.toLowerCase();\n      if (!allowedElements.includes(tagName)) {\n        warn(`Unrecognized element <${tagName}>`);\n      }\n    });\n  };\n\n  /**\n   * @param {HTMLElement} el\n   * @param {string[]} allowedAttributes\n   */\n  const showWarningsForAttributes = (el, allowedAttributes) => {\n    Array.from(el.attributes).forEach(attribute => {\n      if (allowedAttributes.indexOf(attribute.name) === -1) {\n        warn([`Unrecognized attribute \"${attribute.name}\" on <${el.tagName.toLowerCase()}>.`, `${allowedAttributes.length ? `Allowed attributes are: ${allowedAttributes.join(', ')}` : 'To set the value, use HTML within the element.'}`]);\n      }\n    });\n  };\n\n  const SHOW_CLASS_TIMEOUT = 10;\n\n  /**\n   * Open popup, add necessary classes and styles, fix scrollbar\n   *\n   * @param {SweetAlertOptions} params\n   */\n  const openPopup = params => {\n    const container = getContainer();\n    const popup = getPopup();\n    if (typeof params.willOpen === 'function') {\n      params.willOpen(popup);\n    }\n    globalState.eventEmitter.emit('willOpen', popup);\n    const bodyStyles = window.getComputedStyle(document.body);\n    const initialBodyOverflow = bodyStyles.overflowY;\n    addClasses(container, popup, params);\n\n    // scrolling is 'hidden' until animation is done, after that 'auto'\n    setTimeout(() => {\n      setScrollingVisibility(container, popup);\n    }, SHOW_CLASS_TIMEOUT);\n    if (isModal()) {\n      fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);\n      setAriaHidden();\n    }\n    if (!isToast() && !globalState.previousActiveElement) {\n      globalState.previousActiveElement = document.activeElement;\n    }\n    if (typeof params.didOpen === 'function') {\n      setTimeout(() => params.didOpen(popup));\n    }\n    globalState.eventEmitter.emit('didOpen', popup);\n    removeClass(container, swalClasses['no-transition']);\n  };\n\n  /**\n   * @param {AnimationEvent} event\n   */\n  const swalOpenAnimationFinished = event => {\n    const popup = getPopup();\n    if (event.target !== popup) {\n      return;\n    }\n    const container = getContainer();\n    popup.removeEventListener('animationend', swalOpenAnimationFinished);\n    popup.removeEventListener('transitionend', swalOpenAnimationFinished);\n    container.style.overflowY = 'auto';\n  };\n\n  /**\n   * @param {HTMLElement} container\n   * @param {HTMLElement} popup\n   */\n  const setScrollingVisibility = (container, popup) => {\n    if (hasCssAnimation(popup)) {\n      container.style.overflowY = 'hidden';\n      popup.addEventListener('animationend', swalOpenAnimationFinished);\n      popup.addEventListener('transitionend', swalOpenAnimationFinished);\n    } else {\n      container.style.overflowY = 'auto';\n    }\n  };\n\n  /**\n   * @param {HTMLElement} container\n   * @param {boolean} scrollbarPadding\n   * @param {string} initialBodyOverflow\n   */\n  const fixScrollContainer = (container, scrollbarPadding, initialBodyOverflow) => {\n    iOSfix();\n    if (scrollbarPadding && initialBodyOverflow !== 'hidden') {\n      replaceScrollbarWithPadding(initialBodyOverflow);\n    }\n\n    // sweetalert2/issues/1247\n    setTimeout(() => {\n      container.scrollTop = 0;\n    });\n  };\n\n  /**\n   * @param {HTMLElement} container\n   * @param {HTMLElement} popup\n   * @param {SweetAlertOptions} params\n   */\n  const addClasses = (container, popup, params) => {\n    addClass(container, params.showClass.backdrop);\n    if (params.animation) {\n      // this workaround with opacity is needed for https://github.com/sweetalert2/sweetalert2/issues/2059\n      popup.style.setProperty('opacity', '0', 'important');\n      show(popup, 'grid');\n      setTimeout(() => {\n        // Animate popup right after showing it\n        addClass(popup, params.showClass.popup);\n        // and remove the opacity workaround\n        popup.style.removeProperty('opacity');\n      }, SHOW_CLASS_TIMEOUT); // 10ms in order to fix #2062\n    } else {\n      show(popup, 'grid');\n    }\n    addClass([document.documentElement, document.body], swalClasses.shown);\n    if (params.heightAuto && params.backdrop && !params.toast) {\n      addClass([document.documentElement, document.body], swalClasses['height-auto']);\n    }\n  };\n\n  var defaultInputValidators = {\n    /**\n     * @param {string} string\n     * @param {string} [validationMessage]\n     * @returns {Promise<string | void>}\n     */\n    email: (string, validationMessage) => {\n      return /^[a-zA-Z0-9.+_'-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]+$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');\n    },\n    /**\n     * @param {string} string\n     * @param {string} [validationMessage]\n     * @returns {Promise<string | void>}\n     */\n    url: (string, validationMessage) => {\n      // taken from https://stackoverflow.com/a/3809435 with a small change from #1306 and #2013\n      return /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');\n    }\n  };\n\n  /**\n   * @param {SweetAlertOptions} params\n   */\n  function setDefaultInputValidators(params) {\n    // Use default `inputValidator` for supported input types if not provided\n    if (params.inputValidator) {\n      return;\n    }\n    if (params.input === 'email') {\n      params.inputValidator = defaultInputValidators['email'];\n    }\n    if (params.input === 'url') {\n      params.inputValidator = defaultInputValidators['url'];\n    }\n  }\n\n  /**\n   * @param {SweetAlertOptions} params\n   */\n  function validateCustomTargetElement(params) {\n    // Determine if the custom target element is valid\n    if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {\n      warn('Target parameter is not valid, defaulting to \"body\"');\n      params.target = 'body';\n    }\n  }\n\n  /**\n   * Set type, text and actions on popup\n   *\n   * @param {SweetAlertOptions} params\n   */\n  function setParameters(params) {\n    setDefaultInputValidators(params);\n\n    // showLoaderOnConfirm && preConfirm\n    if (params.showLoaderOnConfirm && !params.preConfirm) {\n      warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' + 'https://sweetalert2.github.io/#ajax-request');\n    }\n    validateCustomTargetElement(params);\n\n    // Replace newlines with <br> in title\n    if (typeof params.title === 'string') {\n      params.title = params.title.split('\\n').join('<br />');\n    }\n    init(params);\n  }\n\n  /** @type {SweetAlert} */\n  let currentInstance;\n  var _promise = /*#__PURE__*/new WeakMap();\n  class SweetAlert {\n    /**\n     * @param {...any} args\n     * @this {SweetAlert}\n     */\n    constructor() {\n      /**\n       * @type {Promise<SweetAlertResult>}\n       */\n      _classPrivateFieldInitSpec(this, _promise, void 0);\n      // Prevent run in Node env\n      if (typeof window === 'undefined') {\n        return;\n      }\n      currentInstance = this;\n\n      // @ts-ignore\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const outerParams = Object.freeze(this.constructor.argsToParams(args));\n\n      /** @type {Readonly<SweetAlertOptions>} */\n      this.params = outerParams;\n\n      /** @type {boolean} */\n      this.isAwaitingPromise = false;\n      _classPrivateFieldSet2(_promise, this, this._main(currentInstance.params));\n    }\n    _main(userParams) {\n      let mixinParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      showWarningsForParams(Object.assign({}, mixinParams, userParams));\n      if (globalState.currentInstance) {\n        const swalPromiseResolve = privateMethods.swalPromiseResolve.get(globalState.currentInstance);\n        const {\n          isAwaitingPromise\n        } = globalState.currentInstance;\n        globalState.currentInstance._destroy();\n        if (!isAwaitingPromise) {\n          swalPromiseResolve({\n            isDismissed: true\n          });\n        }\n        if (isModal()) {\n          unsetAriaHidden();\n        }\n      }\n      globalState.currentInstance = currentInstance;\n      const innerParams = prepareParams(userParams, mixinParams);\n      setParameters(innerParams);\n      Object.freeze(innerParams);\n\n      // clear the previous timer\n      if (globalState.timeout) {\n        globalState.timeout.stop();\n        delete globalState.timeout;\n      }\n\n      // clear the restore focus timeout\n      clearTimeout(globalState.restoreFocusTimeout);\n      const domCache = populateDomCache(currentInstance);\n      render(currentInstance, innerParams);\n      privateProps.innerParams.set(currentInstance, innerParams);\n      return swalPromise(currentInstance, domCache, innerParams);\n    }\n\n    // `catch` cannot be the name of a module export, so we define our thenable methods here instead\n    then(onFulfilled) {\n      return _classPrivateFieldGet2(_promise, this).then(onFulfilled);\n    }\n    finally(onFinally) {\n      return _classPrivateFieldGet2(_promise, this).finally(onFinally);\n    }\n  }\n\n  /**\n   * @param {SweetAlert} instance\n   * @param {DomCache} domCache\n   * @param {SweetAlertOptions} innerParams\n   * @returns {Promise}\n   */\n  const swalPromise = (instance, domCache, innerParams) => {\n    return new Promise((resolve, reject) => {\n      // functions to handle all closings/dismissals\n      /**\n       * @param {DismissReason} dismiss\n       */\n      const dismissWith = dismiss => {\n        instance.close({\n          isDismissed: true,\n          dismiss\n        });\n      };\n      privateMethods.swalPromiseResolve.set(instance, resolve);\n      privateMethods.swalPromiseReject.set(instance, reject);\n      domCache.confirmButton.onclick = () => {\n        handleConfirmButtonClick(instance);\n      };\n      domCache.denyButton.onclick = () => {\n        handleDenyButtonClick(instance);\n      };\n      domCache.cancelButton.onclick = () => {\n        handleCancelButtonClick(instance, dismissWith);\n      };\n      domCache.closeButton.onclick = () => {\n        dismissWith(DismissReason.close);\n      };\n      handlePopupClick(innerParams, domCache, dismissWith);\n      addKeydownHandler(globalState, innerParams, dismissWith);\n      handleInputOptionsAndValue(instance, innerParams);\n      openPopup(innerParams);\n      setupTimer(globalState, innerParams, dismissWith);\n      initFocus(domCache, innerParams);\n\n      // Scroll container to top on open (#1247, #1946)\n      setTimeout(() => {\n        domCache.container.scrollTop = 0;\n      });\n    });\n  };\n\n  /**\n   * @param {SweetAlertOptions} userParams\n   * @param {SweetAlertOptions} mixinParams\n   * @returns {SweetAlertOptions}\n   */\n  const prepareParams = (userParams, mixinParams) => {\n    const templateParams = getTemplateParams(userParams);\n    const params = Object.assign({}, defaultParams, mixinParams, templateParams, userParams); // precedence is described in #2131\n    params.showClass = Object.assign({}, defaultParams.showClass, params.showClass);\n    params.hideClass = Object.assign({}, defaultParams.hideClass, params.hideClass);\n    if (params.animation === false) {\n      params.showClass = {\n        backdrop: 'swal2-noanimation'\n      };\n      params.hideClass = {};\n    }\n    return params;\n  };\n\n  /**\n   * @param {SweetAlert} instance\n   * @returns {DomCache}\n   */\n  const populateDomCache = instance => {\n    const domCache = {\n      popup: getPopup(),\n      container: getContainer(),\n      actions: getActions(),\n      confirmButton: getConfirmButton(),\n      denyButton: getDenyButton(),\n      cancelButton: getCancelButton(),\n      loader: getLoader(),\n      closeButton: getCloseButton(),\n      validationMessage: getValidationMessage(),\n      progressSteps: getProgressSteps()\n    };\n    privateProps.domCache.set(instance, domCache);\n    return domCache;\n  };\n\n  /**\n   * @param {GlobalState} globalState\n   * @param {SweetAlertOptions} innerParams\n   * @param {Function} dismissWith\n   */\n  const setupTimer = (globalState, innerParams, dismissWith) => {\n    const timerProgressBar = getTimerProgressBar();\n    hide(timerProgressBar);\n    if (innerParams.timer) {\n      globalState.timeout = new Timer(() => {\n        dismissWith('timer');\n        delete globalState.timeout;\n      }, innerParams.timer);\n      if (innerParams.timerProgressBar) {\n        show(timerProgressBar);\n        applyCustomClass(timerProgressBar, innerParams, 'timerProgressBar');\n        setTimeout(() => {\n          if (globalState.timeout && globalState.timeout.running) {\n            // timer can be already stopped or unset at this point\n            animateTimerProgressBar(innerParams.timer);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Initialize focus in the popup:\n   *\n   * 1. If `toast` is `true`, don't steal focus from the document.\n   * 2. Else if there is an [autofocus] element, focus it.\n   * 3. Else if `focusConfirm` is `true` and confirm button is visible, focus it.\n   * 4. Else if `focusDeny` is `true` and deny button is visible, focus it.\n   * 5. Else if `focusCancel` is `true` and cancel button is visible, focus it.\n   * 6. Else focus the first focusable element in a popup (if any).\n   *\n   * @param {DomCache} domCache\n   * @param {SweetAlertOptions} innerParams\n   */\n  const initFocus = (domCache, innerParams) => {\n    if (innerParams.toast) {\n      return;\n    }\n    // TODO: this is dumb, remove `allowEnterKey` param in the next major version\n    if (!callIfFunction(innerParams.allowEnterKey)) {\n      warnAboutDeprecation('allowEnterKey');\n      blurActiveElement();\n      return;\n    }\n    if (focusAutofocus(domCache)) {\n      return;\n    }\n    if (focusButton(domCache, innerParams)) {\n      return;\n    }\n    setFocus(-1, 1);\n  };\n\n  /**\n   * @param {DomCache} domCache\n   * @returns {boolean}\n   */\n  const focusAutofocus = domCache => {\n    const autofocusElements = Array.from(domCache.popup.querySelectorAll('[autofocus]'));\n    for (const autofocusElement of autofocusElements) {\n      if (autofocusElement instanceof HTMLElement && isVisible$1(autofocusElement)) {\n        autofocusElement.focus();\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * @param {DomCache} domCache\n   * @param {SweetAlertOptions} innerParams\n   * @returns {boolean}\n   */\n  const focusButton = (domCache, innerParams) => {\n    if (innerParams.focusDeny && isVisible$1(domCache.denyButton)) {\n      domCache.denyButton.focus();\n      return true;\n    }\n    if (innerParams.focusCancel && isVisible$1(domCache.cancelButton)) {\n      domCache.cancelButton.focus();\n      return true;\n    }\n    if (innerParams.focusConfirm && isVisible$1(domCache.confirmButton)) {\n      domCache.confirmButton.focus();\n      return true;\n    }\n    return false;\n  };\n  const blurActiveElement = () => {\n    if (document.activeElement instanceof HTMLElement && typeof document.activeElement.blur === 'function') {\n      document.activeElement.blur();\n    }\n  };\n\n  // Dear russian users visiting russian sites. Let's have fun.\n  if (typeof window !== 'undefined' && /^ru\\b/.test(navigator.language) && location.host.match(/\\.(ru|su|by|xn--p1ai)$/)) {\n    const now = new Date();\n    const initiationDate = localStorage.getItem('swal-initiation');\n    if (!initiationDate) {\n      localStorage.setItem('swal-initiation', `${now}`);\n    } else if ((now.getTime() - Date.parse(initiationDate)) / (1000 * 60 * 60 * 24) > 3) {\n      setTimeout(() => {\n        document.body.style.pointerEvents = 'none';\n        const ukrainianAnthem = document.createElement('audio');\n        ukrainianAnthem.src = 'https://flag-gimn.ru/wp-content/uploads/2021/09/Ukraina.mp3';\n        ukrainianAnthem.loop = true;\n        document.body.appendChild(ukrainianAnthem);\n        setTimeout(() => {\n          ukrainianAnthem.play().catch(() => {\n            // ignore\n          });\n        }, 2500);\n      }, 500);\n    }\n  }\n\n  // Assign instance methods from src/instanceMethods/*.js to prototype\n  SweetAlert.prototype.disableButtons = disableButtons;\n  SweetAlert.prototype.enableButtons = enableButtons;\n  SweetAlert.prototype.getInput = getInput;\n  SweetAlert.prototype.disableInput = disableInput;\n  SweetAlert.prototype.enableInput = enableInput;\n  SweetAlert.prototype.hideLoading = hideLoading;\n  SweetAlert.prototype.disableLoading = hideLoading;\n  SweetAlert.prototype.showValidationMessage = showValidationMessage;\n  SweetAlert.prototype.resetValidationMessage = resetValidationMessage;\n  SweetAlert.prototype.close = close;\n  SweetAlert.prototype.closePopup = close;\n  SweetAlert.prototype.closeModal = close;\n  SweetAlert.prototype.closeToast = close;\n  SweetAlert.prototype.rejectPromise = rejectPromise;\n  SweetAlert.prototype.update = update;\n  SweetAlert.prototype._destroy = _destroy;\n\n  // Assign static methods from src/staticMethods/*.js to constructor\n  Object.assign(SweetAlert, staticMethods);\n\n  // Proxy to instance methods to constructor, for now, for backwards compatibility\n  Object.keys(instanceMethods).forEach(key => {\n    /**\n     * @param {...any} args\n     * @returns {any | undefined}\n     */\n    SweetAlert[key] = function () {\n      if (currentInstance && currentInstance[key]) {\n        return currentInstance[key](...arguments);\n      }\n      return null;\n    };\n  });\n  SweetAlert.DismissReason = DismissReason;\n  SweetAlert.version = '11.17.2';\n\n  const Swal = SweetAlert;\n  // @ts-ignore\n  Swal.default = Swal;\n\n  return Swal;\n\n}));\nif (typeof this !== 'undefined' && this.Sweetalert2){this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2}\n\"undefined\"!=typeof document&&function(e,t){var n=e.createElement(\"style\");if(e.getElementsByTagName(\"head\")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,\":root{--swal2-container-padding: 0.625em;--swal2-backdrop: rgba(0, 0, 0, 0.4);--swal2-width: 32em;--swal2-padding: 0 0 1.25em;--swal2-border: none;--swal2-border-radius: 0.3125rem;--swal2-background: white;--swal2-color: #545454;--swal2-footer-border-color: #eee;--swal2-show-animation: swal2-show 0.3s;--swal2-hide-animation: swal2-hide 0.15s forwards;--swal2-input-background: transparent;--swal2-progress-step-background: #add8e6;--swal2-validation-message-background: #f0f0f0;--swal2-validation-message-color: #666;--swal2-close-button-position: initial;--swal2-close-button-inset: auto;--swal2-close-button-font-size: 2.5em;--swal2-close-button-color: #ccc}[data-swal2-theme=dark]{--swal2-dark-theme-black: #19191a;--swal2-dark-theme-white: #e1e1e1;--swal2-background: var(--swal2-dark-theme-black);--swal2-color: var(--swal2-dark-theme-white);--swal2-footer-border-color: #555;--swal2-input-background: color-mix(in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10%);--swal2-validation-message-background: color-mix( in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10% );--swal2-validation-message-color: var(--swal2-dark-theme-white)}@media(prefers-color-scheme: dark){[data-swal2-theme=auto]{--swal2-dark-theme-black: #19191a;--swal2-dark-theme-white: #e1e1e1;--swal2-background: var(--swal2-dark-theme-black);--swal2-color: var(--swal2-dark-theme-white);--swal2-footer-border-color: #555;--swal2-input-background: color-mix(in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10%);--swal2-validation-message-background: color-mix( in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10% );--swal2-validation-message-color: var(--swal2-dark-theme-white)}}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px var(--swal2-backdrop)}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{inset:0 auto auto 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{inset:0 0 auto auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{inset:0 auto auto 0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{inset:50% auto auto 0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{inset:50% auto auto 50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{inset:50% 0 auto auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{inset:auto auto 0 0}body.swal2-toast-shown .swal2-container.swal2-bottom{inset:auto auto 0 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{inset:auto 0 0 auto}@media print{body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown) .swal2-container{position:static !important}}div:where(.swal2-container){display:grid;position:fixed;z-index:1060;inset:0;box-sizing:border-box;grid-template-areas:\\\"top-start     top            top-end\\\" \\\"center-start  center         center-end\\\" \\\"bottom-start  bottom-center  bottom-end\\\";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:var(--swal2-container-padding);overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}div:where(.swal2-container).swal2-backdrop-show,div:where(.swal2-container).swal2-noanimation{background:var(--swal2-backdrop)}div:where(.swal2-container).swal2-backdrop-hide{background:rgba(0,0,0,0) !important}div:where(.swal2-container).swal2-top-start,div:where(.swal2-container).swal2-center-start,div:where(.swal2-container).swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}div:where(.swal2-container).swal2-top,div:where(.swal2-container).swal2-center,div:where(.swal2-container).swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}div:where(.swal2-container).swal2-top-end,div:where(.swal2-container).swal2-center-end,div:where(.swal2-container).swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}div:where(.swal2-container).swal2-top-start>.swal2-popup{align-self:start}div:where(.swal2-container).swal2-top>.swal2-popup{grid-column:2;place-self:start center}div:where(.swal2-container).swal2-top-end>.swal2-popup,div:where(.swal2-container).swal2-top-right>.swal2-popup{grid-column:3;place-self:start end}div:where(.swal2-container).swal2-center-start>.swal2-popup,div:where(.swal2-container).swal2-center-left>.swal2-popup{grid-row:2;align-self:center}div:where(.swal2-container).swal2-center>.swal2-popup{grid-column:2;grid-row:2;place-self:center center}div:where(.swal2-container).swal2-center-end>.swal2-popup,div:where(.swal2-container).swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;place-self:center end}div:where(.swal2-container).swal2-bottom-start>.swal2-popup,div:where(.swal2-container).swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}div:where(.swal2-container).swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;place-self:end center}div:where(.swal2-container).swal2-bottom-end>.swal2-popup,div:where(.swal2-container).swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;place-self:end end}div:where(.swal2-container).swal2-grow-row>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}div:where(.swal2-container).swal2-grow-column>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}div:where(.swal2-container).swal2-no-transition{transition:none !important}div:where(.swal2-container) div:where(.swal2-popup){display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:var(--swal2-width);max-width:100%;padding:var(--swal2-padding);border:var(--swal2-border);border-radius:var(--swal2-border-radius);background:var(--swal2-background);color:var(--swal2-color);font-family:inherit;font-size:1rem}div:where(.swal2-container) div:where(.swal2-popup):focus{outline:none}div:where(.swal2-container) div:where(.swal2-popup).swal2-loading{overflow-y:hidden}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable{cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable div:where(.swal2-icon){cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging{cursor:grabbing}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging div:where(.swal2-icon){cursor:grabbing}div:where(.swal2-container) h2:where(.swal2-title){position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word;cursor:initial}div:where(.swal2-container) div:where(.swal2-actions){display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1))}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2))}div:where(.swal2-container) div:where(.swal2-loader){display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}div:where(.swal2-container) button:where(.swal2-styled){margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}div:where(.swal2-container) button:where(.swal2-styled):not([disabled]){cursor:pointer}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm){border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm):focus-visible{box-shadow:0 0 0 3px rgba(112,102,224,.5)}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny){border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny):focus-visible{box-shadow:0 0 0 3px rgba(220,55,65,.5)}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel){border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel):focus-visible{box-shadow:0 0 0 3px rgba(110,120,129,.5)}div:where(.swal2-container) button:where(.swal2-styled).swal2-default-outline:focus-visible{box-shadow:0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) button:where(.swal2-styled):focus-visible{outline:none}div:where(.swal2-container) button:where(.swal2-styled)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-footer){margin:1em 0 0;padding:1em 1em 0;border-top:1px solid var(--swal2-footer-border-color);color:inherit;font-size:1em;text-align:center;cursor:initial}div:where(.swal2-container) .swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:var(--swal2-border-radius);border-bottom-left-radius:var(--swal2-border-radius)}div:where(.swal2-container) div:where(.swal2-timer-progress-bar){width:100%;height:.25em;background:rgba(0,0,0,.2)}div:where(.swal2-container) img:where(.swal2-image){max-width:100%;margin:2em auto 1em;cursor:initial}div:where(.swal2-container) button:where(.swal2-close){position:var(--swal2-close-button-position);inset:var(--swal2-close-button-inset);z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:var(--swal2-border-radius);background:rgba(0,0,0,0);color:var(--swal2-close-button-color);font-family:monospace;font-size:var(--swal2-close-button-font-size);cursor:pointer;justify-self:end}div:where(.swal2-container) button:where(.swal2-close):hover{transform:none;background:rgba(0,0,0,0);color:#f27474}div:where(.swal2-container) button:where(.swal2-close):focus-visible{outline:none;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) button:where(.swal2-close)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-html-container){z-index:1;justify-content:center;margin:0;padding:1em 1.6em .3em;overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word;cursor:initial}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea),div:where(.swal2-container) select:where(.swal2-select),div:where(.swal2-container) div:where(.swal2-radio),div:where(.swal2-container) label:where(.swal2-checkbox){margin:1em 2em 3px}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea){box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:var(--swal2-input-background);box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(0,0,0,0);color:inherit;font-size:1.125em}div:where(.swal2-container) input:where(.swal2-input).swal2-inputerror,div:where(.swal2-container) input:where(.swal2-file).swal2-inputerror,div:where(.swal2-container) textarea:where(.swal2-textarea).swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}div:where(.swal2-container) input:where(.swal2-input):focus,div:where(.swal2-container) input:where(.swal2-file):focus,div:where(.swal2-container) textarea:where(.swal2-textarea):focus{border:1px solid #b4dbed;outline:none;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) input:where(.swal2-input)::placeholder,div:where(.swal2-container) input:where(.swal2-file)::placeholder,div:where(.swal2-container) textarea:where(.swal2-textarea)::placeholder{color:#ccc}div:where(.swal2-container) .swal2-range{margin:1em 2em 3px;background:var(--swal2-background)}div:where(.swal2-container) .swal2-range input{width:80%}div:where(.swal2-container) .swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}div:where(.swal2-container) .swal2-range input,div:where(.swal2-container) .swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}div:where(.swal2-container) .swal2-input{height:2.625em;padding:0 .75em}div:where(.swal2-container) .swal2-file{width:75%;margin-right:auto;margin-left:auto;background:var(--swal2-input-background);font-size:1.125em}div:where(.swal2-container) .swal2-textarea{height:6.75em;padding:.75em}div:where(.swal2-container) .swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:var(--swal2-input-background);color:inherit;font-size:1.125em}div:where(.swal2-container) .swal2-radio,div:where(.swal2-container) .swal2-checkbox{align-items:center;justify-content:center;background:var(--swal2-background);color:inherit}div:where(.swal2-container) .swal2-radio label,div:where(.swal2-container) .swal2-checkbox label{margin:0 .6em;font-size:1.125em}div:where(.swal2-container) .swal2-radio input,div:where(.swal2-container) .swal2-checkbox input{flex-shrink:0;margin:0 .4em}div:where(.swal2-container) label:where(.swal2-input-label){display:flex;justify-content:center;margin:1em auto 0}div:where(.swal2-container) div:where(.swal2-validation-message){align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:var(--swal2-validation-message-background);color:var(--swal2-validation-message-color);font-size:1em;font-weight:300}div:where(.swal2-container) div:where(.swal2-validation-message)::before{content:\\\"!\\\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}div:where(.swal2-container) .swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}div:where(.swal2-container) .swal2-progress-steps li{display:inline-block;position:relative}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:var(--swal2-progress-step-background);color:#fff}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:var(--swal2-progress-step-background)}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}div:where(.swal2-icon){position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}div:where(.swal2-icon) .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}div:where(.swal2-icon).swal2-error{border-color:#f27474;color:#f27474}div:where(.swal2-icon).swal2-error .swal2-x-mark{position:relative;flex-grow:1}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}div:where(.swal2-icon).swal2-warning{border-color:#f8bb86;color:#f8bb86}div:where(.swal2-icon).swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}div:where(.swal2-icon).swal2-info{border-color:#3fc3ee;color:#3fc3ee}div:where(.swal2-icon).swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}div:where(.swal2-icon).swal2-question{border-color:#87adbd;color:#87adbd}div:where(.swal2-icon).swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}div:where(.swal2-icon).swal2-success{border-color:#a5dc86;color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;border-radius:50%}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}div:where(.swal2-icon).swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}div:where(.swal2-icon).swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:var(--swal2-show-animation)}.swal2-hide{animation:var(--swal2-hide-animation)}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;background:var(--swal2-background);box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-toast>*{grid-column:2}.swal2-toast h2:where(.swal2-title){margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-toast .swal2-loading{justify-content:center}.swal2-toast input:where(.swal2-input){height:2em;margin:.5em;font-size:1em}.swal2-toast .swal2-validation-message{font-size:1em}.swal2-toast div:where(.swal2-footer){margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-toast button:where(.swal2-close){grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-toast div:where(.swal2-html-container){margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-toast div:where(.swal2-html-container):empty{padding:0}.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-toast div:where(.swal2-actions){justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-toast button:where(.swal2-styled){margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;border-radius:50%}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}.swal2-toast.swal2-show{animation:swal2-toast-show .5s}.swal2-toast.swal2-hide{animation:swal2-toast-hide .1s forwards}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sweetalert2/dist/sweetalert2.all.js\n");

/***/ }),

/***/ "./public/js/core/placeholderCreation.js":
/*!***********************************************!*\
  !*** ./public/js/core/placeholderCreation.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomPlaceholder: () => (/* binding */ addCustomPlaceholder),\n/* harmony export */   applyPlaceholderToAllOccurrences: () => (/* binding */ applyPlaceholderToAllOccurrences),\n/* harmony export */   duplicatePlaceholder: () => (/* binding */ duplicatePlaceholder),\n/* harmony export */   insertPlaceholder: () => (/* binding */ insertPlaceholder),\n/* harmony export */   insertPlaceholderFromCustom: () => (/* binding */ insertPlaceholderFromCustom)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/StringUtils.js */ \"./public/js/utils/StringUtils.js\");\n/* harmony import */ var _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderDOM.js */ \"./public/js/core/placeholderDOM.js\");\n/* harmony import */ var _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./placeholderManagement.js */ \"./public/js/core/placeholderManagement.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n/**\r\n * Duplicates an existing placeholder at the current caret position\r\n * @param {Object} variable - The placeholder variable to duplicate\r\n */\nvar duplicatePlaceholder = function duplicatePlaceholder(variable) {\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[variable.id] = (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[variable.id] || 0) + 1;\n  var newId = variable.id;\n  var editor = document.getElementById(\"storyText\");\n  var rangeToUse = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange && editor.contains(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.commonAncestorContainer) ? _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange : function () {\n    (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.ensureEditorFocus)();\n    var sel = window.getSelection();\n    return sel.rangeCount ? sel.getRangeAt(0) : null;\n  }();\n  var displayText = variable.displayOverride || variable.officialDisplay;\n  (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.insertPlaceholderSpan)(newId, displayText, rangeToUse);\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = null;\n};\n\n/**\r\n * Inserts a new placeholder into the editor\r\n * @param {string} internalType - The internal type of the placeholder\r\n * @param {string} displayName - The display name of the placeholder\r\n * @param {boolean} isCustom - Whether this is a custom placeholder\r\n * @returns {Promise<void>}\r\n */\nvar insertPlaceholder = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(internalType, displayName, isCustom) {\n    var sanitized, editor, spans, max, newCount, id, rangeToUse, selectedText, displayText, _yield$Swal$fire, temp;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          sanitized = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.sanitizeString(internalType);\n          editor = document.getElementById(\"storyText\");\n          spans = editor.querySelectorAll(\".placeholder\");\n          max = 0;\n          spans.forEach(function (span) {\n            var id = span.getAttribute(\"data-id\");\n            if (id.startsWith(sanitized)) {\n              var match = id.match(/(\\d+)$/);\n              if (match) {\n                var num = parseInt(match[1], 10);\n                if (num > max) max = num;\n              }\n            }\n          });\n          newCount = max + 1;\n          _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts[sanitized] = newCount;\n          id = sanitized + newCount;\n          rangeToUse = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange && editor.contains(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.commonAncestorContainer) ? _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange : function () {\n            (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.ensureEditorFocus)();\n            var sel = window.getSelection();\n            return sel.rangeCount ? sel.getRangeAt(0) : null;\n          }();\n          selectedText = \"\";\n          if (rangeToUse && !rangeToUse.collapsed) {\n            selectedText = rangeToUse.toString().trim();\n          }\n          displayText = selectedText || displayName;\n          if (selectedText) {\n            _context.next = 18;\n            break;\n          }\n          _context.next = 15;\n          return Swal.fire({\n            title: 'Enter temporary word',\n            input: 'text',\n            inputLabel: 'Temporary fill word for this placeholder',\n            inputValue: displayName,\n            showCancelButton: true\n          });\n        case 15:\n          _yield$Swal$fire = _context.sent;\n          temp = _yield$Swal$fire.value;\n          if (temp) displayText = temp;\n        case 18:\n          (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.insertPlaceholderSpan)(id, displayText, rangeToUse);\n          if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.some(function (v) {\n            return v.id === id;\n          })) {\n            _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.push({\n              id: id,\n              internalType: internalType,\n              officialDisplay: displayName,\n              display: displayName,\n              isCustom: !!isCustom,\n              order: _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter++,\n              displayOverride: displayText\n            });\n          }\n          (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateVariablesList)();\n          _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = null;\n          if (internalType.startsWith(\"NN\") && selectedText) {\n            Swal.fire({\n              title: 'Apply placeholder to all occurrences?',\n              text: \"Replace all instances of \\\"\".concat(selectedText, \"\\\" with this placeholder?\"),\n              icon: 'question',\n              showCancelButton: true,\n              confirmButtonText: 'Yes, apply',\n              cancelButtonText: 'No'\n            }).then(function (result) {\n              if (result.isConfirmed) {\n                applyPlaceholderToAllOccurrences(selectedText, id, displayText);\n              }\n            });\n          }\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function insertPlaceholder(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\r\n * Applies a placeholder to all occurrences of a text string in the story\r\n * @param {string} text - The text to replace\r\n * @param {string} id - The ID of the placeholder\r\n * @param {string} displayText - The display text of the placeholder\r\n */\nvar applyPlaceholderToAllOccurrences = function applyPlaceholderToAllOccurrences(text, id, displayText) {\n  var editor = document.getElementById(\"storyText\");\n  var textNodes = [];\n  var _getTextNodes = function getTextNodes(node) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      if (node.textContent.includes(text)) {\n        textNodes.push(node);\n      }\n    } else if (node.childNodes && node.childNodes.length > 0) {\n      node.childNodes.forEach(function (child) {\n        if (!child.classList || !child.classList.contains('placeholder')) {\n          _getTextNodes(child);\n        }\n      });\n    }\n  };\n  _getTextNodes(editor);\n  for (var i = textNodes.length - 1; i >= 0; i--) {\n    var node = textNodes[i];\n    var content = node.textContent;\n    var parts = content.split(text);\n    if (parts.length > 1) {\n      var parent = node.parentNode;\n      var fragment = document.createDocumentFragment();\n      for (var j = 0; j < parts.length; j++) {\n        if (parts[j]) {\n          fragment.appendChild(document.createTextNode(parts[j]));\n        }\n        if (j < parts.length - 1) {\n          var span = document.createElement(\"span\");\n          span.className = \"placeholder\";\n          span.setAttribute(\"data-id\", id);\n          span.setAttribute(\"title\", id);\n          span.setAttribute(\"contenteditable\", \"false\");\n          span.textContent = displayText;\n          fragment.appendChild(span);\n          fragment.appendChild(document.createTextNode(\" \"));\n        }\n      }\n      parent.replaceChild(fragment, node);\n    }\n  }\n  (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateVariablesFromEditor)();\n};\n\n/**\r\n * Adds a new custom placeholder type to the system with optional type information\r\n * @param {string} rawText - The raw text to use as the base\r\n * @param {string} [usage='generic'] - The usage type ('noun', 'verb', or 'generic')\r\n * @returns {string} The generated internal type\r\n */\nvar addCustomPlaceholder = function addCustomPlaceholder(rawText) {\n  var usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'generic';\n  var internal;\n  if (usage === \"noun\") {\n    internal = \"NN_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.pascalCase(rawText);\n  } else if (usage === \"verb\") {\n    internal = \"VB_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.pascalCase(rawText);\n  } else {\n    internal = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.pascalCase(rawText);\n  }\n  if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.some(function (p) {\n    return p.type === internal;\n  })) {\n    _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.push({\n      type: internal\n    });\n  }\n  return internal;\n};\n\n/**\r\n * Creates and inserts a custom placeholder into the editor\r\n * @param {string} rawText - The raw text to use as the base\r\n */\nvar insertPlaceholderFromCustom = function insertPlaceholderFromCustom(rawText) {\n  var internal = addCustomPlaceholder(rawText);\n  var display = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.naturalDisplay(internal);\n  insertPlaceholder(internal, display, true);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZGVyQ3JlYXRpb24uanM/NTNkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3RhdGUgZnJvbSAnLi9zdGF0ZS5qcyc7XHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSAnLi4vdXRpbHMvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBpbnNlcnRQbGFjZWhvbGRlclNwYW4sIGVuc3VyZUVkaXRvckZvY3VzIH0gZnJvbSAnLi9wbGFjZWhvbGRlckRPTS5qcyc7XHJcbmltcG9ydCB7IHVwZGF0ZVZhcmlhYmxlc0xpc3QsIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IgfSBmcm9tICcuL3BsYWNlaG9sZGVyTWFuYWdlbWVudC5qcyc7XHJcblxyXG4vKipcclxuICogRHVwbGljYXRlcyBhbiBleGlzdGluZyBwbGFjZWhvbGRlciBhdCB0aGUgY3VycmVudCBjYXJldCBwb3NpdGlvblxyXG4gKiBAcGFyYW0ge09iamVjdH0gdmFyaWFibGUgLSBUaGUgcGxhY2Vob2xkZXIgdmFyaWFibGUgdG8gZHVwbGljYXRlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZHVwbGljYXRlUGxhY2Vob2xkZXIgPSAodmFyaWFibGUpID0+IHtcclxuICAgIHN0YXRlLnVzYWdlVHJhY2tlclt2YXJpYWJsZS5pZF0gPSAoc3RhdGUudXNhZ2VUcmFja2VyW3ZhcmlhYmxlLmlkXSB8fCAwKSArIDE7XHJcbiAgICBjb25zdCBuZXdJZCA9IHZhcmlhYmxlLmlkO1xyXG4gICAgY29uc3QgZWRpdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdG9yeVRleHRcIik7XHJcbiAgICBsZXQgcmFuZ2VUb1VzZSA9IChzdGF0ZS5sYXN0UmFuZ2UgJiYgZWRpdG9yLmNvbnRhaW5zKHN0YXRlLmxhc3RSYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcikpXHJcbiAgICAgICAgPyBzdGF0ZS5sYXN0UmFuZ2VcclxuICAgICAgICA6ICgoKSA9PiB7XHJcbiAgICAgICAgICAgIGVuc3VyZUVkaXRvckZvY3VzKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbC5yYW5nZUNvdW50ID8gc2VsLmdldFJhbmdlQXQoMCkgOiBudWxsO1xyXG4gICAgICAgIH0pKCk7XHJcbiAgICBjb25zdCBkaXNwbGF5VGV4dCA9IHZhcmlhYmxlLmRpc3BsYXlPdmVycmlkZSB8fCB2YXJpYWJsZS5vZmZpY2lhbERpc3BsYXk7XHJcbiAgICBpbnNlcnRQbGFjZWhvbGRlclNwYW4obmV3SWQsIGRpc3BsYXlUZXh0LCByYW5nZVRvVXNlKTtcclxuICAgIHN0YXRlLmxhc3RSYW5nZSA9IG51bGw7XHJcbn07XHJcblxyXG4vKipcclxuICogSW5zZXJ0cyBhIG5ldyBwbGFjZWhvbGRlciBpbnRvIHRoZSBlZGl0b3JcclxuICogQHBhcmFtIHtzdHJpbmd9IGludGVybmFsVHlwZSAtIFRoZSBpbnRlcm5hbCB0eXBlIG9mIHRoZSBwbGFjZWhvbGRlclxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGxheU5hbWUgLSBUaGUgZGlzcGxheSBuYW1lIG9mIHRoZSBwbGFjZWhvbGRlclxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzQ3VzdG9tIC0gV2hldGhlciB0aGlzIGlzIGEgY3VzdG9tIHBsYWNlaG9sZGVyXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGluc2VydFBsYWNlaG9sZGVyID0gYXN5bmMgKGludGVybmFsVHlwZSwgZGlzcGxheU5hbWUsIGlzQ3VzdG9tKSA9PiB7XHJcbiAgICBjb25zdCBzYW5pdGl6ZWQgPSBTdHJpbmdVdGlscy5zYW5pdGl6ZVN0cmluZyhpbnRlcm5hbFR5cGUpO1xyXG4gICAgY29uc3QgZWRpdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdG9yeVRleHRcIik7XHJcbiAgICBjb25zdCBzcGFucyA9IGVkaXRvci5xdWVyeVNlbGVjdG9yQWxsKFwiLnBsYWNlaG9sZGVyXCIpO1xyXG4gICAgbGV0IG1heCA9IDA7XHJcbiAgICBzcGFucy5mb3JFYWNoKHNwYW4gPT4ge1xyXG4gICAgICAgIGNvbnN0IGlkID0gc3Bhbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIpO1xyXG4gICAgICAgIGlmIChpZC5zdGFydHNXaXRoKHNhbml0aXplZCkpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBpZC5tYXRjaCgvKFxcZCspJC8pO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG51bSA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobnVtID4gbWF4KSBtYXggPSBudW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IG5ld0NvdW50ID0gbWF4ICsgMTtcclxuICAgIHN0YXRlLnZhcmlhYmxlQ291bnRzW3Nhbml0aXplZF0gPSBuZXdDb3VudDtcclxuICAgIGNvbnN0IGlkID0gc2FuaXRpemVkICsgbmV3Q291bnQ7XHJcbiAgICBsZXQgcmFuZ2VUb1VzZSA9IChzdGF0ZS5sYXN0UmFuZ2UgJiYgZWRpdG9yLmNvbnRhaW5zKHN0YXRlLmxhc3RSYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcikpXHJcbiAgICAgICAgPyBzdGF0ZS5sYXN0UmFuZ2VcclxuICAgICAgICA6ICgoKSA9PiB7XHJcbiAgICAgICAgICAgIGVuc3VyZUVkaXRvckZvY3VzKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbC5yYW5nZUNvdW50ID8gc2VsLmdldFJhbmdlQXQoMCkgOiBudWxsO1xyXG4gICAgICAgIH0pKCk7XHJcbiAgICBsZXQgc2VsZWN0ZWRUZXh0ID0gXCJcIjtcclxuICAgIGlmIChyYW5nZVRvVXNlICYmICFyYW5nZVRvVXNlLmNvbGxhcHNlZCkge1xyXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IHJhbmdlVG9Vc2UudG9TdHJpbmcoKS50cmltKCk7XHJcbiAgICB9XHJcbiAgICBsZXQgZGlzcGxheVRleHQgPSBzZWxlY3RlZFRleHQgfHwgZGlzcGxheU5hbWU7XHJcbiAgICBpZiAoIXNlbGVjdGVkVGV4dCkge1xyXG4gICAgICAgIGNvbnN0IHsgdmFsdWU6IHRlbXAgfSA9IGF3YWl0IFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnRW50ZXIgdGVtcG9yYXJ5IHdvcmQnLFxyXG4gICAgICAgICAgICBpbnB1dDogJ3RleHQnLFxyXG4gICAgICAgICAgICBpbnB1dExhYmVsOiAnVGVtcG9yYXJ5IGZpbGwgd29yZCBmb3IgdGhpcyBwbGFjZWhvbGRlcicsXHJcbiAgICAgICAgICAgIGlucHV0VmFsdWU6IGRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRlbXApIGRpc3BsYXlUZXh0ID0gdGVtcDtcclxuICAgIH1cclxuICAgIGluc2VydFBsYWNlaG9sZGVyU3BhbihpZCwgZGlzcGxheVRleHQsIHJhbmdlVG9Vc2UpO1xyXG4gICAgaWYgKCFzdGF0ZS52YXJpYWJsZXMuc29tZSh2ID0+IHYuaWQgPT09IGlkKSkge1xyXG4gICAgICAgIHN0YXRlLnZhcmlhYmxlcy5wdXNoKHtcclxuICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgIGludGVybmFsVHlwZSxcclxuICAgICAgICAgICAgb2ZmaWNpYWxEaXNwbGF5OiBkaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgZGlzcGxheTogZGlzcGxheU5hbWUsXHJcbiAgICAgICAgICAgIGlzQ3VzdG9tOiAhIWlzQ3VzdG9tLFxyXG4gICAgICAgICAgICBvcmRlcjogc3RhdGUuaW5zZXJ0aW9uQ291bnRlcisrLFxyXG4gICAgICAgICAgICBkaXNwbGF5T3ZlcnJpZGU6IGRpc3BsYXlUZXh0XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVWYXJpYWJsZXNMaXN0KCk7XHJcbiAgICBzdGF0ZS5sYXN0UmFuZ2UgPSBudWxsO1xyXG4gICAgaWYgKGludGVybmFsVHlwZS5zdGFydHNXaXRoKFwiTk5cIikgJiYgc2VsZWN0ZWRUZXh0KSB7XHJcbiAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgdGl0bGU6ICdBcHBseSBwbGFjZWhvbGRlciB0byBhbGwgb2NjdXJyZW5jZXM/JyxcclxuICAgICAgICAgICAgdGV4dDogYFJlcGxhY2UgYWxsIGluc3RhbmNlcyBvZiBcIiR7c2VsZWN0ZWRUZXh0fVwiIHdpdGggdGhpcyBwbGFjZWhvbGRlcj9gLFxyXG4gICAgICAgICAgICBpY29uOiAncXVlc3Rpb24nLFxyXG4gICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1llcywgYXBwbHknLFxyXG4gICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAnTm8nXHJcbiAgICAgICAgfSkudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7XHJcbiAgICAgICAgICAgICAgICBhcHBseVBsYWNlaG9sZGVyVG9BbGxPY2N1cnJlbmNlcyhzZWxlY3RlZFRleHQsIGlkLCBkaXNwbGF5VGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBBcHBsaWVzIGEgcGxhY2Vob2xkZXIgdG8gYWxsIG9jY3VycmVuY2VzIG9mIGEgdGV4dCBzdHJpbmcgaW4gdGhlIHN0b3J5XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGhlIHRleHQgdG8gcmVwbGFjZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgSUQgb2YgdGhlIHBsYWNlaG9sZGVyXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwbGF5VGV4dCAtIFRoZSBkaXNwbGF5IHRleHQgb2YgdGhlIHBsYWNlaG9sZGVyXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgYXBwbHlQbGFjZWhvbGRlclRvQWxsT2NjdXJyZW5jZXMgPSAodGV4dCwgaWQsIGRpc3BsYXlUZXh0KSA9PiB7XHJcbiAgICBjb25zdCBlZGl0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0b3J5VGV4dFwiKTtcclxuICAgIGNvbnN0IHRleHROb2RlcyA9IFtdO1xyXG4gICAgY29uc3QgZ2V0VGV4dE5vZGVzID0gKG5vZGUpID0+IHtcclxuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUudGV4dENvbnRlbnQuaW5jbHVkZXModGV4dCkpIHtcclxuICAgICAgICAgICAgICAgIHRleHROb2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmNoaWxkTm9kZXMgJiYgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbm9kZS5jaGlsZE5vZGVzLmZvckVhY2goY2hpbGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjaGlsZC5jbGFzc0xpc3QgfHwgIWNoaWxkLmNsYXNzTGlzdC5jb250YWlucygncGxhY2Vob2xkZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldFRleHROb2RlcyhjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZ2V0VGV4dE5vZGVzKGVkaXRvcik7XHJcbiAgICBcclxuICAgIGZvciAobGV0IGkgPSB0ZXh0Tm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBjb25zdCBub2RlID0gdGV4dE5vZGVzW2ldO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBub2RlLnRleHRDb250ZW50O1xyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gY29udGVudC5zcGxpdCh0ZXh0KTtcclxuICAgICAgICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXJ0cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnRzW2pdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocGFydHNbal0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChqIDwgcGFydHMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzcGFuLmNsYXNzTmFtZSA9IFwicGxhY2Vob2xkZXJcIjtcclxuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIsIFwiZmFsc2VcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IGRpc3BsYXlUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHNwYW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiIFwiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQoZnJhZ21lbnQsIG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgbmV3IGN1c3RvbSBwbGFjZWhvbGRlciB0eXBlIHRvIHRoZSBzeXN0ZW0gd2l0aCBvcHRpb25hbCB0eXBlIGluZm9ybWF0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByYXdUZXh0IC0gVGhlIHJhdyB0ZXh0IHRvIHVzZSBhcyB0aGUgYmFzZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VzYWdlPSdnZW5lcmljJ10gLSBUaGUgdXNhZ2UgdHlwZSAoJ25vdW4nLCAndmVyYicsIG9yICdnZW5lcmljJylcclxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGdlbmVyYXRlZCBpbnRlcm5hbCB0eXBlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgYWRkQ3VzdG9tUGxhY2Vob2xkZXIgPSAocmF3VGV4dCwgdXNhZ2UgPSAnZ2VuZXJpYycpID0+IHtcclxuICAgIGxldCBpbnRlcm5hbDtcclxuICAgIFxyXG4gICAgaWYgKHVzYWdlID09PSBcIm5vdW5cIikge1xyXG4gICAgICAgIGludGVybmFsID0gXCJOTl9cIiArIFN0cmluZ1V0aWxzLnBhc2NhbENhc2UocmF3VGV4dCk7XHJcbiAgICB9IGVsc2UgaWYgKHVzYWdlID09PSBcInZlcmJcIikge1xyXG4gICAgICAgIGludGVybmFsID0gXCJWQl9cIiArIFN0cmluZ1V0aWxzLnBhc2NhbENhc2UocmF3VGV4dCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGludGVybmFsID0gU3RyaW5nVXRpbHMucGFzY2FsQ2FzZShyYXdUZXh0KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCFzdGF0ZS5jdXN0b21QbGFjZWhvbGRlcnMuc29tZShwID0+IHAudHlwZSA9PT0gaW50ZXJuYWwpKSB7XHJcbiAgICAgICAgc3RhdGUuY3VzdG9tUGxhY2Vob2xkZXJzLnB1c2goeyB0eXBlOiBpbnRlcm5hbCB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGludGVybmFsO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW5kIGluc2VydHMgYSBjdXN0b20gcGxhY2Vob2xkZXIgaW50byB0aGUgZWRpdG9yXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByYXdUZXh0IC0gVGhlIHJhdyB0ZXh0IHRvIHVzZSBhcyB0aGUgYmFzZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGluc2VydFBsYWNlaG9sZGVyRnJvbUN1c3RvbSA9IChyYXdUZXh0KSA9PiB7XHJcbiAgICBjb25zdCBpbnRlcm5hbCA9IGFkZEN1c3RvbVBsYWNlaG9sZGVyKHJhd1RleHQpO1xyXG4gICAgY29uc3QgZGlzcGxheSA9IFN0cmluZ1V0aWxzLm5hdHVyYWxEaXNwbGF5KGludGVybmFsKTtcclxuICAgIGluc2VydFBsYWNlaG9sZGVyKGludGVybmFsLCBkaXNwbGF5LCB0cnVlKTtcclxufTsgIl0sIm5hbWVzIjpbIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJlIiwidCIsInIiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJuIiwiaGFzT3duUHJvcGVydHkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImkiLCJTeW1ib2wiLCJhIiwiaXRlcmF0b3IiLCJjIiwiYXN5bmNJdGVyYXRvciIsInUiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIndyYXAiLCJHZW5lcmF0b3IiLCJjcmVhdGUiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwidHlwZSIsImFyZyIsImNhbGwiLCJoIiwibCIsImYiLCJzIiwieSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJwIiwiZCIsImdldFByb3RvdHlwZU9mIiwidiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJpbnZva2UiLCJfdHlwZW9mIiwicmVzb2x2ZSIsIl9fYXdhaXQiLCJ0aGVuIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJFcnJvciIsImRvbmUiLCJtZXRob2QiLCJkZWxlZ2F0ZSIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsIlR5cGVFcnJvciIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXNOYU4iLCJsZW5ndGgiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsImtleXMiLCJyZXZlcnNlIiwicG9wIiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJ2YWwiLCJoYW5kbGUiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3VtZW50cyIsImFwcGx5IiwiX25leHQiLCJfdGhyb3ciLCJzdGF0ZSIsIlN0cmluZ1V0aWxzIiwiaW5zZXJ0UGxhY2Vob2xkZXJTcGFuIiwiZW5zdXJlRWRpdG9yRm9jdXMiLCJ1cGRhdGVWYXJpYWJsZXNMaXN0IiwidXBkYXRlVmFyaWFibGVzRnJvbUVkaXRvciIsImR1cGxpY2F0ZVBsYWNlaG9sZGVyIiwidmFyaWFibGUiLCJ1c2FnZVRyYWNrZXIiLCJpZCIsIm5ld0lkIiwiZWRpdG9yIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJhbmdlVG9Vc2UiLCJsYXN0UmFuZ2UiLCJjb250YWlucyIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwic2VsIiwid2luZG93IiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImdldFJhbmdlQXQiLCJkaXNwbGF5VGV4dCIsImRpc3BsYXlPdmVycmlkZSIsIm9mZmljaWFsRGlzcGxheSIsImluc2VydFBsYWNlaG9sZGVyIiwiX3JlZiIsIl9jYWxsZWUiLCJpbnRlcm5hbFR5cGUiLCJpc0N1c3RvbSIsInNhbml0aXplZCIsInNwYW5zIiwibWF4IiwibmV3Q291bnQiLCJzZWxlY3RlZFRleHQiLCJfeWllbGQkU3dhbCRmaXJlIiwidGVtcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJzYW5pdGl6ZVN0cmluZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzcGFuIiwiZ2V0QXR0cmlidXRlIiwic3RhcnRzV2l0aCIsIm1hdGNoIiwibnVtIiwicGFyc2VJbnQiLCJ2YXJpYWJsZUNvdW50cyIsImNvbGxhcHNlZCIsInRvU3RyaW5nIiwidHJpbSIsIlN3YWwiLCJmaXJlIiwidGl0bGUiLCJpbnB1dCIsImlucHV0TGFiZWwiLCJpbnB1dFZhbHVlIiwic2hvd0NhbmNlbEJ1dHRvbiIsInZhcmlhYmxlcyIsInNvbWUiLCJkaXNwbGF5Iiwib3JkZXIiLCJpbnNlcnRpb25Db3VudGVyIiwidGV4dCIsImNvbmNhdCIsImljb24iLCJjb25maXJtQnV0dG9uVGV4dCIsImNhbmNlbEJ1dHRvblRleHQiLCJyZXN1bHQiLCJpc0NvbmZpcm1lZCIsImFwcGx5UGxhY2Vob2xkZXJUb0FsbE9jY3VycmVuY2VzIiwiX3giLCJfeDIiLCJfeDMiLCJ0ZXh0Tm9kZXMiLCJnZXRUZXh0Tm9kZXMiLCJub2RlIiwibm9kZVR5cGUiLCJOb2RlIiwiVEVYVF9OT0RFIiwidGV4dENvbnRlbnQiLCJpbmNsdWRlcyIsImNoaWxkTm9kZXMiLCJjaGlsZCIsImNsYXNzTGlzdCIsImNvbnRlbnQiLCJwYXJ0cyIsInNwbGl0IiwicGFyZW50IiwicGFyZW50Tm9kZSIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImoiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInNldEF0dHJpYnV0ZSIsInJlcGxhY2VDaGlsZCIsImFkZEN1c3RvbVBsYWNlaG9sZGVyIiwicmF3VGV4dCIsInVzYWdlIiwidW5kZWZpbmVkIiwiaW50ZXJuYWwiLCJwYXNjYWxDYXNlIiwiY3VzdG9tUGxhY2Vob2xkZXJzIiwiaW5zZXJ0UGxhY2Vob2xkZXJGcm9tQ3VzdG9tIiwibmF0dXJhbERpc3BsYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./public/js/core/placeholderCreation.js\n");

/***/ }),

/***/ "./public/js/core/placeholderDOM.js":
/*!******************************************!*\
  !*** ./public/js/core/placeholderDOM.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureEditorFocus: () => (/* binding */ ensureEditorFocus),\n/* harmony export */   generateLegacyText: () => (/* binding */ generateLegacyText),\n/* harmony export */   insertNodeAtCaret: () => (/* binding */ insertNodeAtCaret),\n/* harmony export */   insertPlaceholderSpan: () => (/* binding */ insertPlaceholderSpan)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"./public/js/core/state.js\");\n\n\n/**\r\n * Inserts a DOM node at the current caret position\r\n * @param {Node} node - The DOM node to insert\r\n * @param {Range} range - Optional range to use instead of current selection\r\n */\nvar insertNodeAtCaret = function insertNodeAtCaret(node, range) {\n  if (range) {\n    range.deleteContents();\n    range.insertNode(node);\n    var newRange = document.createRange();\n    newRange.setStartAfter(node);\n    newRange.collapse(true);\n    var sel = window.getSelection();\n    sel.removeAllRanges();\n    sel.addRange(newRange);\n  } else {\n    var _sel = window.getSelection();\n    if (_sel.rangeCount) {\n      var r = _sel.getRangeAt(0);\n      r.deleteContents();\n      r.insertNode(node);\n      r.setStartAfter(node);\n      r.collapse(true);\n      _sel.removeAllRanges();\n      _sel.addRange(r);\n    }\n  }\n};\n\n/**\r\n * Ensures the editor has focus and a valid selection range\r\n */\nvar ensureEditorFocus = function ensureEditorFocus() {\n  var editor = document.getElementById(\"storyText\");\n  var sel = window.getSelection();\n  if (!sel.rangeCount || !editor.contains(sel.anchorNode)) {\n    editor.focus();\n    var range = document.createRange();\n    range.selectNodeContents(editor);\n    range.collapse(false);\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n};\n\n/**\r\n * Creates and inserts a placeholder span element at the current caret position\r\n * @param {string} placeholderID - The ID of the placeholder\r\n * @param {string} displayText - The text to display in the placeholder\r\n * @param {Range} range - Optional range to use instead of current selection\r\n */\nvar insertPlaceholderSpan = function insertPlaceholderSpan(placeholderID, displayText, range) {\n  var span = document.createElement(\"span\");\n  span.className = \"placeholder\";\n  span.setAttribute(\"data-id\", placeholderID);\n  span.setAttribute(\"title\", placeholderID);\n  span.setAttribute(\"contenteditable\", \"false\");\n  span.textContent = displayText;\n  insertNodeAtCaret(span, range);\n\n  // Append extra space if needed\n  if (!displayText.endsWith(\" \")) {\n    if (span.parentNode) {\n      var nextNode = span.nextSibling;\n      if (nextNode && nextNode.nodeType === Node.TEXT_NODE) {\n        if (!/^\\s/.test(nextNode.textContent)) {\n          span.parentNode.insertBefore(document.createTextNode(\" \"), nextNode);\n        }\n      } else if (nextNode) {\n        span.parentNode.insertBefore(document.createTextNode(\" \"), nextNode);\n      } else {\n        span.parentNode.appendChild(document.createTextNode(\" \"));\n      }\n    }\n  }\n};\n\n/**\r\n * Converts the editor content to text format with placeholders in {id} format\r\n * @returns {string} The story text with placeholders in {id} format\r\n */\nvar generateLegacyText = function generateLegacyText() {\n  var editor = document.getElementById(\"storyText\");\n  var _traverse = function traverse(node) {\n    var result = \"\";\n    node.childNodes.forEach(function (child) {\n      if (child.nodeType === Node.TEXT_NODE) {\n        result += child.textContent;\n      } else if (child.nodeType === Node.ELEMENT_NODE) {\n        if (child.tagName.toLowerCase() === \"br\") {\n          result += \"\\n\";\n        } else if (child.classList.contains(\"placeholder\")) {\n          result += \"{\" + child.getAttribute(\"data-id\") + \"}\";\n        } else {\n          result += _traverse(child);\n          var tag = child.tagName.toLowerCase();\n          if (tag === \"div\" || tag === \"p\") result += \"\\n\";\n        }\n      }\n    });\n    return result;\n  };\n  return _traverse(editor);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM3QixJQUFJQSxLQUFLLENBQUNaLFFBQVEsS0FBS0MsSUFBSSxDQUFDQyxTQUFTLEVBQUU7UUFDbkNPLE1BQU0sSUFBSUcsS0FBSyxDQUFDakIsV0FBVztNQUMvQixDQUFDLE1BQU0sSUFBSWlCLEtBQUssQ0FBQ1osUUFBUSxLQUFLQyxJQUFJLENBQUNZLFlBQVksRUFBRTtRQUM3QyxJQUFJRCxLQUFLLENBQUNFLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7VUFDdENOLE1BQU0sSUFBSSxJQUFJO1FBQ2xCLENBQUMsTUFBTSxJQUFJRyxLQUFLLENBQUNJLFNBQVMsQ0FBQ2hDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtVQUNoRHlCLE1BQU0sSUFBSSxHQUFHLEdBQUdHLEtBQUssQ0FBQ0ssWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUc7UUFDdkQsQ0FBQyxNQUFNO1VBQ0hSLE1BQU0sSUFBSUQsU0FBUSxDQUFDSSxLQUFLLENBQUM7VUFDekIsSUFBTU0sR0FBRyxHQUFHTixLQUFLLENBQUNFLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDLENBQUM7VUFDdkMsSUFBSUcsR0FBRyxLQUFLLEtBQUssSUFBSUEsR0FBRyxLQUFLLEdBQUcsRUFBRVQsTUFBTSxJQUFJLElBQUk7UUFDcEQ7TUFDSjtJQUNKLENBQUMsQ0FBQztJQUNGLE9BQU9BLE1BQU07RUFDakIsQ0FBQztFQUNELE9BQU9ELFNBQVEsQ0FBQzFCLE1BQU0sQ0FBQztBQUMzQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmtib29rLy4vcHVibGljL2pzL2NvcmUvcGxhY2Vob2xkZXJET00uanM/ZmVlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3RhdGUgZnJvbSAnLi9zdGF0ZS5qcyc7XHJcblxyXG4vKipcclxuICogSW5zZXJ0cyBhIERPTSBub2RlIGF0IHRoZSBjdXJyZW50IGNhcmV0IHBvc2l0aW9uXHJcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBET00gbm9kZSB0byBpbnNlcnRcclxuICogQHBhcmFtIHtSYW5nZX0gcmFuZ2UgLSBPcHRpb25hbCByYW5nZSB0byB1c2UgaW5zdGVhZCBvZiBjdXJyZW50IHNlbGVjdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGluc2VydE5vZGVBdENhcmV0ID0gKG5vZGUsIHJhbmdlKSA9PiB7XHJcbiAgICBpZiAocmFuZ2UpIHtcclxuICAgICAgICByYW5nZS5kZWxldGVDb250ZW50cygpO1xyXG4gICAgICAgIHJhbmdlLmluc2VydE5vZGUobm9kZSk7XHJcbiAgICAgICAgY29uc3QgbmV3UmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgICAgIG5ld1JhbmdlLnNldFN0YXJ0QWZ0ZXIobm9kZSk7XHJcbiAgICAgICAgbmV3UmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcbiAgICAgICAgY29uc3Qgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICBzZWwuYWRkUmFuZ2UobmV3UmFuZ2UpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgaWYgKHNlbC5yYW5nZUNvdW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBzZWwuZ2V0UmFuZ2VBdCgwKTtcclxuICAgICAgICAgICAgci5kZWxldGVDb250ZW50cygpO1xyXG4gICAgICAgICAgICByLmluc2VydE5vZGUobm9kZSk7XHJcbiAgICAgICAgICAgIHIuc2V0U3RhcnRBZnRlcihub2RlKTtcclxuICAgICAgICAgICAgci5jb2xsYXBzZSh0cnVlKTtcclxuICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgICAgICBzZWwuYWRkUmFuZ2Uocik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVuc3VyZXMgdGhlIGVkaXRvciBoYXMgZm9jdXMgYW5kIGEgdmFsaWQgc2VsZWN0aW9uIHJhbmdlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW5zdXJlRWRpdG9yRm9jdXMgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBlZGl0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0b3J5VGV4dFwiKTtcclxuICAgIGNvbnN0IHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcclxuICAgIGlmICghc2VsLnJhbmdlQ291bnQgfHwgIWVkaXRvci5jb250YWlucyhzZWwuYW5jaG9yTm9kZSkpIHtcclxuICAgICAgICBlZGl0b3IuZm9jdXMoKTtcclxuICAgICAgICBjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XHJcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVkaXRvcik7XHJcbiAgICAgICAgcmFuZ2UuY29sbGFwc2UoZmFsc2UpO1xyXG4gICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW5kIGluc2VydHMgYSBwbGFjZWhvbGRlciBzcGFuIGVsZW1lbnQgYXQgdGhlIGN1cnJlbnQgY2FyZXQgcG9zaXRpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IHBsYWNlaG9sZGVySUQgLSBUaGUgSUQgb2YgdGhlIHBsYWNlaG9sZGVyXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwbGF5VGV4dCAtIFRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIHBsYWNlaG9sZGVyXHJcbiAqIEBwYXJhbSB7UmFuZ2V9IHJhbmdlIC0gT3B0aW9uYWwgcmFuZ2UgdG8gdXNlIGluc3RlYWQgb2YgY3VycmVudCBzZWxlY3Rpb25cclxuICovXHJcbmV4cG9ydCBjb25zdCBpbnNlcnRQbGFjZWhvbGRlclNwYW4gPSAocGxhY2Vob2xkZXJJRCwgZGlzcGxheVRleHQsIHJhbmdlKSA9PiB7XHJcbiAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICBzcGFuLmNsYXNzTmFtZSA9IFwicGxhY2Vob2xkZXJcIjtcclxuICAgIHNwYW4uc2V0QXR0cmlidXRlKFwiZGF0YS1pZFwiLCBwbGFjZWhvbGRlcklEKTtcclxuICAgIHNwYW4uc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgcGxhY2Vob2xkZXJJRCk7XHJcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiLCBcImZhbHNlXCIpO1xyXG4gICAgc3Bhbi50ZXh0Q29udGVudCA9IGRpc3BsYXlUZXh0O1xyXG4gICAgaW5zZXJ0Tm9kZUF0Q2FyZXQoc3BhbiwgcmFuZ2UpO1xyXG5cclxuICAgIC8vIEFwcGVuZCBleHRyYSBzcGFjZSBpZiBuZWVkZWRcclxuICAgIGlmICghZGlzcGxheVRleHQuZW5kc1dpdGgoXCIgXCIpKSB7XHJcbiAgICAgICAgaWYgKHNwYW4ucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICBsZXQgbmV4dE5vZGUgPSBzcGFuLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICBpZiAobmV4dE5vZGUgJiYgbmV4dE5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIS9eXFxzLy50ZXN0KG5leHROb2RlLnRleHRDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNwYW4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIgXCIpLCBuZXh0Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHNwYW4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIgXCIpLCBuZXh0Tm9kZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzcGFuLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIgXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZWRpdG9yIGNvbnRlbnQgdG8gdGV4dCBmb3JtYXQgd2l0aCBwbGFjZWhvbGRlcnMgaW4ge2lkfSBmb3JtYXRcclxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHN0b3J5IHRleHQgd2l0aCBwbGFjZWhvbGRlcnMgaW4ge2lkfSBmb3JtYXRcclxuICovXHJcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUxlZ2FjeVRleHQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBlZGl0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0b3J5VGV4dFwiKTtcclxuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUpID0+IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICBub2RlLmNoaWxkTm9kZXMuZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBjaGlsZC50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYnJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIlxcblwiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZC5jbGFzc0xpc3QuY29udGFpbnMoXCJwbGFjZWhvbGRlclwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIntcIiArIGNoaWxkLmdldEF0dHJpYnV0ZShcImRhdGEtaWRcIikgKyBcIn1cIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHRyYXZlcnNlKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWcgPSBjaGlsZC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gXCJkaXZcIiB8fCB0YWcgPT09IFwicFwiKSByZXN1bHQgKz0gXCJcXG5cIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHRyYXZlcnNlKGVkaXRvcik7XHJcbn07ICJdLCJuYW1lcyI6WyJzdGF0ZSIsImluc2VydE5vZGVBdENhcmV0Iiwibm9kZSIsInJhbmdlIiwiZGVsZXRlQ29udGVudHMiLCJpbnNlcnROb2RlIiwibmV3UmFuZ2UiLCJkb2N1bWVudCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnRBZnRlciIsImNvbGxhcHNlIiwic2VsIiwid2luZG93IiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJyYW5nZUNvdW50IiwiciIsImdldFJhbmdlQXQiLCJlbnN1cmVFZGl0b3JGb2N1cyIsImVkaXRvciIsImdldEVsZW1lbnRCeUlkIiwiY29udGFpbnMiLCJhbmNob3JOb2RlIiwiZm9jdXMiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJpbnNlcnRQbGFjZWhvbGRlclNwYW4iLCJwbGFjZWhvbGRlcklEIiwiZGlzcGxheVRleHQiLCJzcGFuIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInNldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwiZW5kc1dpdGgiLCJwYXJlbnROb2RlIiwibmV4dE5vZGUiLCJuZXh0U2libGluZyIsIm5vZGVUeXBlIiwiTm9kZSIsIlRFWFRfTk9ERSIsInRlc3QiLCJpbnNlcnRCZWZvcmUiLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwiZ2VuZXJhdGVMZWdhY3lUZXh0IiwidHJhdmVyc2UiLCJyZXN1bHQiLCJjaGlsZE5vZGVzIiwiZm9yRWFjaCIsImNoaWxkIiwiRUxFTUVOVF9OT0RFIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwidGFnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/js/core/placeholderDOM.js\n");

/***/ }),

/***/ "./public/js/core/placeholderDefinitions.js":
/*!**************************************************!*\
  !*** ./public/js/core/placeholderDefinitions.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERB_TENSES: () => (/* binding */ VERB_TENSES),\n/* harmony export */   allPlaceholders: () => (/* binding */ allPlaceholders),\n/* harmony export */   categoryOrder: () => (/* binding */ categoryOrder)\n/* harmony export */ });\n/**\r\n * Order of categories as they appear in the placeholder accordion\r\n */\nvar categoryOrder = [\"Nouns\", \"Verbs\", \"Descriptors\", \"Other\"];\n\n/**\r\n * Complete collection of all predefined placeholders by category\r\n */\nvar allPlaceholders = {\n  \"Nouns\": [{\n    internalType: \"NN\",\n    display: \"Noun\",\n    tooltip: \"Generic noun (table, apple)\",\n    icon: \"fas fa-book\",\n    isPrimary: true\n  }, {\n    internalType: \"NNP\",\n    display: \"Proper Noun\",\n    tooltip: \"Specific name (London, Sarah)\",\n    icon: \"fas fa-user\",\n    isPrimary: false\n  }, {\n    internalType: \"PRONOUN\",\n    display: \"Pronoun\",\n    tooltip: \"A pronoun\",\n    icon: \"fas fa-user-circle\",\n    isPrimary: true\n  }, {\n    internalType: \"NN_Concrete\",\n    display: \"Concrete\",\n    tooltip: \"Tangible object (chair, phone)\",\n    icon: \"fas fa-cube\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Person\",\n    display: \"Person\",\n    tooltip: \"A person (teacher, doctor)\",\n    icon: \"fas fa-user-friends\",\n    isPrimary: true\n  }, {\n    internalType: \"NN_Place\",\n    display: \"Place\",\n    tooltip: \"A location (park, school)\",\n    icon: \"fas fa-map-marker-alt\",\n    isPrimary: true\n  }, {\n    internalType: \"NN_Abstract\",\n    display: \"Abstract\",\n    tooltip: \"Intangible (happiness, freedom)\",\n    icon: \"fas fa-cloud\",\n    isPrimary: true\n  }, {\n    internalType: \"NN_Animal\",\n    display: \"Animal\",\n    tooltip: \"Living creature (dog, elephant)\",\n    icon: \"fas fa-dog\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_BodyPart\",\n    display: \"Body Part\",\n    tooltip: \"Part of body (hand, knee)\",\n    icon: \"fas fa-hand-paper\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Clothing\",\n    display: \"Clothing\",\n    tooltip: \"Wearable (shirt, jacket)\",\n    icon: \"fas fa-tshirt\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Drink\",\n    display: \"Drink\",\n    tooltip: \"Beverage (juice, coffee)\",\n    icon: \"fas fa-cocktail\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Emotion\",\n    display: \"Emotion\",\n    tooltip: \"Feeling (joy, anger)\",\n    icon: \"fas fa-heart\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Food\",\n    display: \"Food\",\n    tooltip: \"Edible item (pizza, carrot)\",\n    icon: \"fas fa-utensils\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Vehicle\",\n    display: \"Vehicle\",\n    tooltip: \"Mode of transport (car, bicycle)\",\n    icon: \"fas fa-car\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Onomatopoeia\",\n    display: \"Sound/Onomatopoeia\",\n    tooltip: \"Sound word (bang, buzz)\",\n    icon: \"fas fa-volume-up\",\n    isPrimary: false\n  }],\n  \"Verbs\": [{\n    internalType: \"VB\",\n    display: \"Verb\",\n    tooltip: \"Action/state (jump, write)\",\n    icon: \"fas fa-pen\",\n    isPrimary: true\n  }, {\n    internalType: \"VB_Intransitive\",\n    display: \"Intransitive\",\n    tooltip: \"No object (sleep, arrive)\",\n    icon: \"fas fa-bed\",\n    isPrimary: true\n  }, {\n    internalType: \"VB_Transitive\",\n    display: \"Transitive\",\n    tooltip: \"Takes object (kick, carry)\",\n    icon: \"fas fa-hammer\",\n    isPrimary: true\n  }, {\n    internalType: \"VB_Action\",\n    display: \"Action\",\n    tooltip: \"Physical action (run, climb)\",\n    icon: \"fas fa-bolt\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Stative\",\n    display: \"State\",\n    tooltip: \"Condition (believe, know)\",\n    icon: \"fas fa-brain\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Communication\",\n    display: \"Communication\",\n    tooltip: \"Speaking (say, shout)\",\n    icon: \"fas fa-comment-dots\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Movement\",\n    display: \"Movement\",\n    tooltip: \"Motion-based (walk, swim)\",\n    icon: \"fas fa-walking\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Onomatopoeia\",\n    display: \"Sound/Onomatopoeia\",\n    tooltip: \"Sound verb (meow, boom)\",\n    icon: \"fas fa-volume-up\",\n    isPrimary: false\n  }, {\n    internalType: \"MD\",\n    display: \"Modal\",\n    tooltip: \"Possibility (can, must)\",\n    icon: \"fas fa-key\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Linking\",\n    display: \"Linking\",\n    tooltip: \"Links subject (seem, become)\",\n    icon: \"fas fa-link\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Phrase\",\n    display: \"Phrasal Verb\",\n    tooltip: \"Multi-word verb (give up, look after)\",\n    icon: \"fas fa-random\",\n    isPrimary: false\n  }],\n  \"Descriptors\": [{\n    internalType: \"JJ\",\n    display: \"Adjective\",\n    tooltip: \"Describes noun (blue, tall)\",\n    icon: \"fas fa-ad\",\n    isPrimary: true\n  }, {\n    internalType: \"RB\",\n    display: \"Adverb\",\n    tooltip: \"Modifies verb (quickly, often)\",\n    icon: \"fas fa-feather-alt\",\n    isPrimary: true\n  }, {\n    internalType: \"JJR\",\n    display: \"Comparative\",\n    tooltip: \"Comparison (faster, smaller)\",\n    icon: \"fas fa-level-up-alt\",\n    isPrimary: false\n  }, {\n    internalType: \"JJS\",\n    display: \"Superlative\",\n    tooltip: \"Highest degree (best, tallest)\",\n    icon: \"fas fa-medal\",\n    isPrimary: false\n  }, {\n    internalType: \"JJ_Number\",\n    display: \"Ordered Number\",\n    tooltip: \"A ranked number (1st, seventh)\",\n    icon: \"fas fa-hashtag\",\n    isPrimary: true\n  }],\n  \"Other\": [{\n    internalType: \"IN\",\n    display: \"Preposition\",\n    tooltip: \"Shows relation (in, under)\",\n    icon: \"fas fa-arrows-alt\",\n    isPrimary: false\n  }, {\n    internalType: \"DT\",\n    display: \"Determiner\",\n    tooltip: \"Specifier (a, the)\",\n    icon: \"fas fa-bookmark\",\n    isPrimary: false\n  }, {\n    internalType: \"CC\",\n    display: \"Conjunction\",\n    tooltip: \"Joins clauses (and, or)\",\n    icon: \"fas fa-link\",\n    isPrimary: false\n  }, {\n    internalType: \"FW\",\n    display: \"Foreign Word\",\n    tooltip: \"Non-English (bonjour, sushi)\",\n    icon: \"fas fa-globe\",\n    isPrimary: false\n  }, {\n    internalType: \"Number\",\n    display: \"Number\",\n    tooltip: \"Numerical (five, twenty)\",\n    icon: \"fas fa-hashtag\",\n    isPrimary: true\n  }, {\n    internalType: \"Exclamation\",\n    display: \"Exclamation\",\n    tooltip: \"Interjection (wow, oops)\",\n    icon: \"fas fa-bullhorn\",\n    isPrimary: true\n  }]\n};\n\n/**\r\n * Available verb tenses for selection\r\n */\nvar VERB_TENSES = [{\n  value: 'VB',\n  text: 'Base (run)'\n}, {\n  value: 'VBP',\n  text: 'Present (I walk)'\n}, {\n  value: 'VBZ',\n  text: 'Present 3rd (he leaves)'\n}, {\n  value: 'VBD',\n  text: 'Past (slept)'\n}, {\n  value: 'VBG',\n  text: 'Gerund (crying)'\n}, {\n  value: 'VBN',\n  text: 'Past Participle (eaten)'\n}];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/core/placeholderDefinitions.js\n");

/***/ }),

/***/ "./public/js/core/placeholderManagement.js":
/*!*************************************************!*\
  !*** ./public/js/core/placeholderManagement.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   updateExistingPlaceholder: () => (/* binding */ updateExistingPlaceholder),\n/* harmony export */   updateVariablesFromEditor: () => (/* binding */ updateVariablesFromEditor),\n/* harmony export */   updateVariablesList: () => (/* binding */ updateVariablesList)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/typeHelpers.js */ \"./public/js/utils/typeHelpers.js\");\n/* harmony import */ var _placeholderUI_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderUI.js */ \"./public/js/core/placeholderUI.js\");\n\n\n\n\n/**\r\n * Updates the variables list display in the UI\r\n */\nvar updateVariablesList = function updateVariablesList() {\n  var container = document.getElementById('existingPlaceholdersContainer');\n  container.innerHTML = '';\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.sort(function (a, b) {\n    return (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[b.id] || 0) - (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[a.id] || 0) || a.order - b.order;\n  });\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.forEach(function (v) {\n    var btn = document.createElement('button');\n    btn.type = 'button';\n    btn.className = 'btn btn-outline-secondary btn-sm m-1 placeholder-item';\n    btn.setAttribute('data-id', v.id);\n    btn.textContent = v.displayOverride || v.officialDisplay;\n    btn.setAttribute('title', v.id);\n    container.appendChild(btn);\n  });\n};\n\n/**\r\n * Updates the variables array by scanning the editor for placeholders\r\n */\nvar updateVariablesFromEditor = function updateVariablesFromEditor() {\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = [];\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter = 0;\n  var editor = document.getElementById('storyText');\n  var placeholderElements = editor.querySelectorAll('.placeholder');\n  placeholderElements.forEach(function (el) {\n    var id = el.getAttribute('data-id');\n    var base = id.replace(/\\d+$/, '');\n    var numMatch = id.match(/(\\d+)$/);\n    var num = numMatch ? parseInt(numMatch[1], 10) : 0;\n    if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts[base] || num > _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts[base]) {\n      _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts[base] = num;\n    }\n    if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.some(function (v) {\n      return v.id === id;\n    })) {\n      var variableEntry;\n      var custom = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.find(function (p) {\n        return p.type === base;\n      });\n      if (custom) {\n        variableEntry = {\n          id: id,\n          internalType: custom.type,\n          officialDisplay: _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.naturalizeType(custom.type),\n          display: _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.naturalizeType(custom.type),\n          isCustom: true,\n          order: _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter++,\n          displayOverride: el.textContent\n        };\n      } else {\n        var guessed = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.guessTypeFromId(id);\n        var originalDisplay = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.getOriginalDisplayForType(guessed) || guessed;\n        variableEntry = {\n          id: id,\n          internalType: guessed,\n          officialDisplay: originalDisplay,\n          display: originalDisplay,\n          order: _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter++,\n          displayOverride: el.textContent\n        };\n      }\n      _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.push(variableEntry);\n    }\n  });\n  var currentSearch = $('#placeholderSearch').val() || '';\n  (0,_placeholderUI_js__WEBPACK_IMPORTED_MODULE_2__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', currentSearch);\n  var currentModalSearch = $('#modalPlaceholderSearch').val() || '';\n  (0,_placeholderUI_js__WEBPACK_IMPORTED_MODULE_2__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', currentModalSearch);\n  updateVariablesList();\n};\n\n/**\r\n * Update existing placeholder\r\n * @param {Object} variable - The placeholder variable to update \r\n * @param {string} newInternalType - The new internal type for the placeholder\r\n * @param {string} newDisplayName - The new display name for the placeholder\r\n */\nvar updateExistingPlaceholder = function updateExistingPlaceholder(variable, newInternalType, newDisplayName) {\n  var id = variable.id;\n  var editor = document.getElementById(\"storyText\");\n  var spans = editor.querySelectorAll(\".placeholder[data-id=\\\"\".concat(id, \"\\\"]\"));\n  spans.forEach(function (span) {\n    span.setAttribute(\"title\", \"\".concat(id, \" (\").concat(newInternalType, \")\"));\n  });\n  variable.internalType = newInternalType;\n  variable.officialDisplay = newDisplayName;\n  variable.display = newDisplayName;\n  updateVariablesList();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/core/placeholderManagement.js\n");

/***/ }),

/***/ "./public/js/core/placeholderUI.js":
/*!*****************************************!*\
  !*** ./public/js/core/placeholderUI.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendPlaceholderItem: () => (/* binding */ appendPlaceholderItem),\n/* harmony export */   createCardHeader: () => (/* binding */ createCardHeader),\n/* harmony export */   createCustomPlaceholderCategoryCard: () => (/* binding */ createCustomPlaceholderCategoryCard),\n/* harmony export */   createPlaceholderCategoryCard: () => (/* binding */ createPlaceholderCategoryCard),\n/* harmony export */   createSecondaryPlaceholderWrapper: () => (/* binding */ createSecondaryPlaceholderWrapper),\n/* harmony export */   createShowMoreToggle: () => (/* binding */ createShowMoreToggle),\n/* harmony export */   updatePlaceholderAccordion: () => (/* binding */ updatePlaceholderAccordion),\n/* harmony export */   updateShowMoreToggleVisibility: () => (/* binding */ updateShowMoreToggleVisibility)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./placeholderDefinitions.js */ \"./public/js/core/placeholderDefinitions.js\");\n\n\n\n/**\r\n * Updates the placeholder accordion display based on search\r\n * @param {string} accordionSelector - The CSS selector for the accordion\r\n * @param {string} noResultsSelector - The CSS selector for the no results element\r\n * @param {string} searchVal - The current search value\r\n */\nvar updatePlaceholderAccordion = function updatePlaceholderAccordion(accordionSelector, noResultsSelector) {\n  var searchVal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  if (noResultsSelector === \"#noResults\") {\n    $(\"#searchQuery\").text(searchVal);\n    $(\"#searchQueryBtn\").text(searchVal);\n  } else if (noResultsSelector === \"#modalNoResults\") {\n    $(\"#modalSearchQuery\").text(searchVal);\n    $(\"#modalSearchQueryBtn\").text(searchVal);\n  }\n  $(noResultsSelector).hide();\n  var accordion = $(accordionSelector);\n  accordion.empty();\n  _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_1__.categoryOrder.forEach(function (categoryName) {\n    var placeholders = _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders[categoryName] || [];\n    if (placeholders.length > 0) {\n      var categoryCard = createPlaceholderCategoryCard(categoryName, accordionSelector, placeholders, searchVal);\n      accordion.append(categoryCard);\n    }\n  });\n  if (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.length > 0) {\n    var customCard = createCustomPlaceholderCategoryCard(accordionSelector, searchVal);\n    accordion.append(customCard);\n  }\n  if (searchVal) {\n    var anyShown = accordion.find('.placeholder-btn:visible').length > 0;\n    $(noResultsSelector).toggle(!anyShown);\n    accordion.find('.card-header, .show-more-toggle').hide();\n  } else {\n    accordion.find('.card-header, .show-more-toggle').show();\n  }\n};\n\n/**\r\n * Creates a category card for the placeholder accordion\r\n * @param {string} categoryName - The name of the category\r\n * @param {string} accordionSelector - The CSS selector for the accordion\r\n * @param {Array} placeholders - The placeholders in this category\r\n * @param {string} searchVal - The current search value\r\n * @returns {jQuery} The created category card\r\n */\nvar createPlaceholderCategoryCard = function createPlaceholderCategoryCard(categoryName, accordionSelector, placeholders, searchVal) {\n  var sanitizedCategoryName = categoryName.replace(/\\s+/g, '');\n  var card = $(\"<div class='card'></div>\");\n  card.append(createCardHeader(categoryName, sanitizedCategoryName, accordionSelector));\n  var collapseDiv = $(\"\\n  <div id='\".concat(sanitizedCategoryName, \"Collapse' class='collapse show' aria-labelledby='\").concat(sanitizedCategoryName, \"Heading' data-parent='\").concat(accordionSelector, \"'>\\n    <div class='card-body'><div class='list-group'></div></div>\\n  </div>\\n\"));\n  var primaryItems = placeholders.filter(function (p) {\n    return p.isPrimary;\n  });\n  var secondaryItems = placeholders.filter(function (p) {\n    return !p.isPrimary;\n  });\n  primaryItems.forEach(function (p) {\n    return appendPlaceholderItem(collapseDiv.find('.list-group'), p, searchVal);\n  });\n  if (secondaryItems.length > 0) {\n    var secondaryPlaceholderWrapper = createSecondaryPlaceholderWrapper(secondaryItems, searchVal);\n    collapseDiv.find('.list-group').append(secondaryPlaceholderWrapper);\n    collapseDiv.find('.list-group').append(createShowMoreToggle(sanitizedCategoryName));\n    updateShowMoreToggleVisibility(collapseDiv, searchVal, secondaryPlaceholderWrapper);\n  }\n  card.append(collapseDiv);\n  return card;\n};\n\n/**\r\n * Creates a category card for custom placeholders\r\n * @param {string} accordionSelector - The CSS selector for the accordion\r\n * @param {string} searchVal - The current search value\r\n * @returns {jQuery} The created category card\r\n */\nvar createCustomPlaceholderCategoryCard = function createCustomPlaceholderCategoryCard(accordionSelector, searchVal) {\n  var card = $(\"<div class='card'></div>\");\n  card.append(createCardHeader('Custom Placeholders', 'CustomPlaceholders', accordionSelector));\n  var collapseDiv = $(\"\\n  <div id='CustomPlaceholdersCollapse' class='collapse show' aria-labelledby='CustomPlaceholdersHeading' data-parent='\".concat(accordionSelector, \"'>\\n    <div class='card-body'><div class='list-group'></div></div>\\n  </div>\\n\"));\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.forEach(function (p) {\n    var showItem = !searchVal || p.type.toLowerCase().includes(searchVal.toLowerCase());\n    var item = $(\"\\n    <div class='list-group-item placeholder-btn custom-placeholder'\\n      data-internal='\".concat(p.type, \"'\\n      data-display='\").concat(p.type, \"'\\n      style='display: \").concat(showItem ? 'block' : 'none', \";'>\\n      <i class='fas fa-star'></i> \").concat(p.type, \"\\n    </div>\\n  \"));\n    collapseDiv.find('.list-group').append(item);\n  });\n  card.append(collapseDiv);\n  return card;\n};\n\n/**\r\n * Creates a card header for a category\r\n * @param {string} categoryName - The name of the category\r\n * @param {string} sanitizedCategoryName - The sanitized name of the category\r\n * @param {string} accordionSelector - The CSS selector for the accordion\r\n * @returns {jQuery} The created card header\r\n */\nvar createCardHeader = function createCardHeader(categoryName, sanitizedCategoryName, accordionSelector) {\n  return $(\"\\n  <div class='card-header' id='\".concat(sanitizedCategoryName, \"Heading'>\\n    <h2 class='mb-0'>\\n      <button class='btn btn-link btn-block text-left' type='button'\\n        data-toggle='collapse' data-target='#\").concat(sanitizedCategoryName, \"Collapse'\\n        aria-expanded='true' aria-controls='\").concat(sanitizedCategoryName, \"Collapse'>\\n        \").concat(categoryName, \"\\n      </button>\\n    </h2>\\n  </div>\\n\"));\n};\n\n/**\r\n * Creates a wrapper for secondary placeholders\r\n * @param {Array} secondaryItems - The secondary placeholder items\r\n * @param {string} searchVal - The current search value\r\n * @returns {jQuery} The created wrapper\r\n */\nvar createSecondaryPlaceholderWrapper = function createSecondaryPlaceholderWrapper(secondaryItems, searchVal) {\n  var hiddenWrapper = $(\"<div class='secondary-placeholder-wrapper'></div>\");\n  secondaryItems.forEach(function (p) {\n    return appendPlaceholderItem(hiddenWrapper, p, searchVal, true);\n  });\n  return hiddenWrapper;\n};\n\n/**\r\n * Creates a \"Show More\" toggle for a category\r\n * @param {string} sanitizedCategoryName - The sanitized name of the category\r\n * @returns {jQuery} The created toggle\r\n */\nvar createShowMoreToggle = function createShowMoreToggle(sanitizedCategoryName) {\n  return $(\"\\n  <div class='show-more-toggle' data-category='\".concat(sanitizedCategoryName, \"'>\\n    Show More\\n  </div>\\n\"));\n};\n\n/**\r\n * Updates the visibility of the \"Show More\" toggle based on search\r\n * @param {jQuery} collapseDiv - The collapse div\r\n * @param {string} searchVal - The current search value\r\n * @param {jQuery} secondaryPlaceholderWrapper - The secondary placeholder wrapper\r\n */\nvar updateShowMoreToggleVisibility = function updateShowMoreToggleVisibility(collapseDiv, searchVal, secondaryPlaceholderWrapper) {\n  var toggleLink = collapseDiv.find('.show-more-toggle');\n  if (!searchVal) {\n    secondaryPlaceholderWrapper.find('.secondary-placeholder').hide();\n    toggleLink.text('Show More');\n  } else {\n    var anySecondaryVisible = secondaryPlaceholderWrapper.find('.secondary-placeholder:visible').length > 0;\n    toggleLink.text(anySecondaryVisible ? 'Show Less' : 'Show More');\n  }\n};\n\n/**\r\n * Appends a placeholder item to a list group\r\n * @param {jQuery} listGroup - The list group to append to\r\n * @param {Object} placeholder - The placeholder to append\r\n * @param {string} searchVal - The current search value\r\n * @param {boolean} isSecondary - Whether this is a secondary placeholder\r\n */\nvar appendPlaceholderItem = function appendPlaceholderItem(listGroup, placeholder, searchVal) {\n  var isSecondary = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var showItem = !searchVal || placeholder.display.toLowerCase().includes(searchVal.toLowerCase());\n  var item = $(\"\\n  <div class='list-group-item placeholder-btn\".concat(isSecondary ? ' secondary-placeholder' : '', \"'\\n    data-internal='\").concat(placeholder.internalType, \"'\\n    data-display='\").concat(placeholder.display, \"'\\n    style='display: \").concat(showItem ? 'block' : 'none', \";'>\\n    <i class='\").concat(placeholder.icon, \"'></i> \").concat(placeholder.display, \"\\n    <i class='fas fa-info-circle accordion-info-icon' data-tooltip=\\\"\").concat(placeholder.tooltip, \"\\\" style=\\\"font-size:0.8em; margin-left:5px;\\\"></i>\\n  </div>\\n\"));\n  listGroup.append(item);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/core/placeholderUI.js\n");

/***/ }),

/***/ "./public/js/core/placeholders.js":
/*!****************************************!*\
  !*** ./public/js/core/placeholders.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERB_TENSES: () => (/* reexport safe */ _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_0__.VERB_TENSES),\n/* harmony export */   addCustomPlaceholder: () => (/* reexport safe */ _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__.addCustomPlaceholder),\n/* harmony export */   allPlaceholders: () => (/* reexport safe */ _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_0__.allPlaceholders),\n/* harmony export */   appendPlaceholderItem: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.appendPlaceholderItem),\n/* harmony export */   applyPlaceholderToAllOccurrences: () => (/* reexport safe */ _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__.applyPlaceholderToAllOccurrences),\n/* harmony export */   categoryOrder: () => (/* reexport safe */ _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_0__.categoryOrder),\n/* harmony export */   choosePronounTempValue: () => (/* reexport safe */ _pronounFunctions_js__WEBPACK_IMPORTED_MODULE_6__.choosePronounTempValue),\n/* harmony export */   createCardHeader: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.createCardHeader),\n/* harmony export */   createCustomPlaceholderCategoryCard: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.createCustomPlaceholderCategoryCard),\n/* harmony export */   createPlaceholderCategoryCard: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.createPlaceholderCategoryCard),\n/* harmony export */   createSecondaryPlaceholderWrapper: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.createSecondaryPlaceholderWrapper),\n/* harmony export */   createShowMoreToggle: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.createShowMoreToggle),\n/* harmony export */   duplicatePlaceholder: () => (/* reexport safe */ _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__.duplicatePlaceholder),\n/* harmony export */   ensureEditorFocus: () => (/* reexport safe */ _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.ensureEditorFocus),\n/* harmony export */   generateLegacyText: () => (/* reexport safe */ _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.generateLegacyText),\n/* harmony export */   insertNodeAtCaret: () => (/* reexport safe */ _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.insertNodeAtCaret),\n/* harmony export */   insertPlaceholder: () => (/* reexport safe */ _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__.insertPlaceholder),\n/* harmony export */   insertPlaceholderFromCustom: () => (/* reexport safe */ _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__.insertPlaceholderFromCustom),\n/* harmony export */   insertPlaceholderSpan: () => (/* reexport safe */ _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.insertPlaceholderSpan),\n/* harmony export */   insertPronounPlaceholderSimple: () => (/* reexport safe */ _pronounFunctions_js__WEBPACK_IMPORTED_MODULE_6__.insertPronounPlaceholderSimple),\n/* harmony export */   pickPronounFormAndGroup: () => (/* reexport safe */ _pronounFunctions_js__WEBPACK_IMPORTED_MODULE_6__.pickPronounFormAndGroup),\n/* harmony export */   pickPronounGroup: () => (/* reexport safe */ _pronounFunctions_js__WEBPACK_IMPORTED_MODULE_6__.pickPronounGroup),\n/* harmony export */   showNounNumberSelection: () => (/* reexport safe */ _typeSelectionModals_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection),\n/* harmony export */   showPersonTypeSelection: () => (/* reexport safe */ _typeSelectionModals_js__WEBPACK_IMPORTED_MODULE_5__.showPersonTypeSelection),\n/* harmony export */   showVerbTenseSelection: () => (/* reexport safe */ _typeSelectionModals_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection),\n/* harmony export */   updateExistingPlaceholder: () => (/* reexport safe */ _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateExistingPlaceholder),\n/* harmony export */   updatePlaceholderAccordion: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.updatePlaceholderAccordion),\n/* harmony export */   updateShowMoreToggleVisibility: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.updateShowMoreToggleVisibility),\n/* harmony export */   updateVariablesFromEditor: () => (/* reexport safe */ _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateVariablesFromEditor),\n/* harmony export */   updateVariablesList: () => (/* reexport safe */ _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateVariablesList)\n/* harmony export */ });\n/* harmony import */ var _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./placeholderDefinitions.js */ \"./public/js/core/placeholderDefinitions.js\");\n/* harmony import */ var _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./placeholderDOM.js */ \"./public/js/core/placeholderDOM.js\");\n/* harmony import */ var _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderCreation.js */ \"./public/js/core/placeholderCreation.js\");\n/* harmony import */ var _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./placeholderManagement.js */ \"./public/js/core/placeholderManagement.js\");\n/* harmony import */ var _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./placeholderUI.js */ \"./public/js/core/placeholderUI.js\");\n/* harmony import */ var _typeSelectionModals_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typeSelectionModals.js */ \"./public/js/core/typeSelectionModals.js\");\n/* harmony import */ var _pronounFunctions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pronounFunctions.js */ \"./public/js/core/pronounFunctions.js\");\n// public/js/core/placeholders.js\n\n// Import from new modules\n\n\n\n\n\n\n\n\n// Re-export all functionality\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvanMvY29yZS9wbGFjZWhvbGRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQzBGO0FBQzRCO0FBQ2tEO0FBQ2pEO0FBQytJO0FBQ2xKO0FBQ3NCOztBQUUxSSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rYm9vay8uL3B1YmxpYy9qcy9jb3JlL3BsYWNlaG9sZGVycy5qcz9lMDk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHB1YmxpYy9qcy9jb3JlL3BsYWNlaG9sZGVycy5qc1xyXG5cclxuLy8gSW1wb3J0IGZyb20gbmV3IG1vZHVsZXNcclxuaW1wb3J0IHsgY2F0ZWdvcnlPcmRlciwgYWxsUGxhY2Vob2xkZXJzLCBWRVJCX1RFTlNFUyB9IGZyb20gJy4vcGxhY2Vob2xkZXJEZWZpbml0aW9ucy5qcyc7XHJcbmltcG9ydCB7IGluc2VydE5vZGVBdENhcmV0LCBlbnN1cmVFZGl0b3JGb2N1cywgaW5zZXJ0UGxhY2Vob2xkZXJTcGFuLCBnZW5lcmF0ZUxlZ2FjeVRleHQgfSBmcm9tICcuL3BsYWNlaG9sZGVyRE9NLmpzJztcclxuaW1wb3J0IHsgZHVwbGljYXRlUGxhY2Vob2xkZXIsIGluc2VydFBsYWNlaG9sZGVyLCBhcHBseVBsYWNlaG9sZGVyVG9BbGxPY2N1cnJlbmNlcywgYWRkQ3VzdG9tUGxhY2Vob2xkZXIsIGluc2VydFBsYWNlaG9sZGVyRnJvbUN1c3RvbSB9IGZyb20gJy4vcGxhY2Vob2xkZXJDcmVhdGlvbi5qcyc7XHJcbmltcG9ydCB7IHVwZGF0ZVZhcmlhYmxlc0xpc3QsIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IsIHVwZGF0ZUV4aXN0aW5nUGxhY2Vob2xkZXIgfSBmcm9tICcuL3BsYWNlaG9sZGVyTWFuYWdlbWVudC5qcyc7XHJcbmltcG9ydCB7IHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uLCBjcmVhdGVQbGFjZWhvbGRlckNhdGVnb3J5Q2FyZCwgY3JlYXRlQ3VzdG9tUGxhY2Vob2xkZXJDYXRlZ29yeUNhcmQsIGNyZWF0ZUNhcmRIZWFkZXIsIGNyZWF0ZVNlY29uZGFyeVBsYWNlaG9sZGVyV3JhcHBlciwgY3JlYXRlU2hvd01vcmVUb2dnbGUsIHVwZGF0ZVNob3dNb3JlVG9nZ2xlVmlzaWJpbGl0eSwgYXBwZW5kUGxhY2Vob2xkZXJJdGVtIH0gZnJvbSAnLi9wbGFjZWhvbGRlclVJLmpzJztcclxuaW1wb3J0IHsgc2hvd1BlcnNvblR5cGVTZWxlY3Rpb24sIHNob3dOb3VuTnVtYmVyU2VsZWN0aW9uLCBzaG93VmVyYlRlbnNlU2VsZWN0aW9uIH0gZnJvbSAnLi90eXBlU2VsZWN0aW9uTW9kYWxzLmpzJztcclxuaW1wb3J0IHsgaW5zZXJ0UHJvbm91blBsYWNlaG9sZGVyU2ltcGxlLCBwaWNrUHJvbm91bkZvcm1BbmRHcm91cCwgcGlja1Byb25vdW5Hcm91cCwgY2hvb3NlUHJvbm91blRlbXBWYWx1ZSB9IGZyb20gJy4vcHJvbm91bkZ1bmN0aW9ucy5qcyc7XHJcblxyXG4vLyBSZS1leHBvcnQgYWxsIGZ1bmN0aW9uYWxpdHlcclxuZXhwb3J0IHtcclxuICAgIC8vIENvbnN0YW50c1xyXG4gICAgY2F0ZWdvcnlPcmRlcixcclxuICAgIGFsbFBsYWNlaG9sZGVycyxcclxuICAgIFZFUkJfVEVOU0VTLFxyXG4gICAgXHJcbiAgICAvLyBET00gVXRpbGl0aWVzXHJcbiAgICBpbnNlcnROb2RlQXRDYXJldCxcclxuICAgIGVuc3VyZUVkaXRvckZvY3VzLFxyXG4gICAgaW5zZXJ0UGxhY2Vob2xkZXJTcGFuLFxyXG4gICAgZ2VuZXJhdGVMZWdhY3lUZXh0LFxyXG4gICAgXHJcbiAgICAvLyBQbGFjZWhvbGRlciBDcmVhdGlvblxyXG4gICAgZHVwbGljYXRlUGxhY2Vob2xkZXIsXHJcbiAgICBpbnNlcnRQbGFjZWhvbGRlcixcclxuICAgIGFwcGx5UGxhY2Vob2xkZXJUb0FsbE9jY3VycmVuY2VzLFxyXG4gICAgYWRkQ3VzdG9tUGxhY2Vob2xkZXIsXHJcbiAgICBpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b20sXHJcbiAgICBcclxuICAgIC8vIFBsYWNlaG9sZGVyIE1hbmFnZW1lbnRcclxuICAgIHVwZGF0ZVZhcmlhYmxlc0xpc3QsXHJcbiAgICB1cGRhdGVWYXJpYWJsZXNGcm9tRWRpdG9yLFxyXG4gICAgdXBkYXRlRXhpc3RpbmdQbGFjZWhvbGRlcixcclxuICAgIFxyXG4gICAgLy8gVUkgRnVuY3Rpb25zXHJcbiAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbixcclxuICAgIGNyZWF0ZVBsYWNlaG9sZGVyQ2F0ZWdvcnlDYXJkLFxyXG4gICAgY3JlYXRlQ3VzdG9tUGxhY2Vob2xkZXJDYXRlZ29yeUNhcmQsXHJcbiAgICBjcmVhdGVDYXJkSGVhZGVyLFxyXG4gICAgY3JlYXRlU2Vjb25kYXJ5UGxhY2Vob2xkZXJXcmFwcGVyLFxyXG4gICAgY3JlYXRlU2hvd01vcmVUb2dnbGUsXHJcbiAgICB1cGRhdGVTaG93TW9yZVRvZ2dsZVZpc2liaWxpdHksXHJcbiAgICBhcHBlbmRQbGFjZWhvbGRlckl0ZW0sXHJcbiAgICBcclxuICAgIC8vIFR5cGUgU2VsZWN0aW9uIE1vZGFsc1xyXG4gICAgc2hvd1BlcnNvblR5cGVTZWxlY3Rpb24sXHJcbiAgICBzaG93Tm91bk51bWJlclNlbGVjdGlvbixcclxuICAgIHNob3dWZXJiVGVuc2VTZWxlY3Rpb24sXHJcbiAgICBcclxuICAgIC8vIFByb25vdW4gRnVuY3Rpb25zXHJcbiAgICBpbnNlcnRQcm9ub3VuUGxhY2Vob2xkZXJTaW1wbGUsXHJcbiAgICBwaWNrUHJvbm91bkZvcm1BbmRHcm91cCxcclxuICAgIHBpY2tQcm9ub3VuR3JvdXAsXHJcbiAgICBjaG9vc2VQcm9ub3VuVGVtcFZhbHVlXHJcbn07ICJdLCJuYW1lcyI6WyJjYXRlZ29yeU9yZGVyIiwiYWxsUGxhY2Vob2xkZXJzIiwiVkVSQl9URU5TRVMiLCJpbnNlcnROb2RlQXRDYXJldCIsImVuc3VyZUVkaXRvckZvY3VzIiwiaW5zZXJ0UGxhY2Vob2xkZXJTcGFuIiwiZ2VuZXJhdGVMZWdhY3lUZXh0IiwiZHVwbGljYXRlUGxhY2Vob2xkZXIiLCJpbnNlcnRQbGFjZWhvbGRlciIsImFwcGx5UGxhY2Vob2xkZXJUb0FsbE9jY3VycmVuY2VzIiwiYWRkQ3VzdG9tUGxhY2Vob2xkZXIiLCJpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b20iLCJ1cGRhdGVWYXJpYWJsZXNMaXN0IiwidXBkYXRlVmFyaWFibGVzRnJvbUVkaXRvciIsInVwZGF0ZUV4aXN0aW5nUGxhY2Vob2xkZXIiLCJ1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbiIsImNyZWF0ZVBsYWNlaG9sZGVyQ2F0ZWdvcnlDYXJkIiwiY3JlYXRlQ3VzdG9tUGxhY2Vob2xkZXJDYXRlZ29yeUNhcmQiLCJjcmVhdGVDYXJkSGVhZGVyIiwiY3JlYXRlU2Vjb25kYXJ5UGxhY2Vob2xkZXJXcmFwcGVyIiwiY3JlYXRlU2hvd01vcmVUb2dnbGUiLCJ1cGRhdGVTaG93TW9yZVRvZ2dsZVZpc2liaWxpdHkiLCJhcHBlbmRQbGFjZWhvbGRlckl0ZW0iLCJzaG93UGVyc29uVHlwZVNlbGVjdGlvbiIsInNob3dOb3VuTnVtYmVyU2VsZWN0aW9uIiwic2hvd1ZlcmJUZW5zZVNlbGVjdGlvbiIsImluc2VydFByb25vdW5QbGFjZWhvbGRlclNpbXBsZSIsInBpY2tQcm9ub3VuRm9ybUFuZEdyb3VwIiwicGlja1Byb25vdW5Hcm91cCIsImNob29zZVByb25vdW5UZW1wVmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./public/js/core/placeholders.js\n");

/***/ }),

/***/ "./public/js/core/pronounFunctions.js":
/*!********************************************!*\
  !*** ./public/js/core/pronounFunctions.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   choosePronounTempValue: () => (/* binding */ choosePronounTempValue),\n/* harmony export */   insertPronounPlaceholderSimple: () => (/* binding */ insertPronounPlaceholderSimple),\n/* harmony export */   pickPronounFormAndGroup: () => (/* binding */ pickPronounFormAndGroup),\n/* harmony export */   pickPronounGroup: () => (/* binding */ pickPronounGroup)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./placeholderDOM.js */ \"./public/js/core/placeholderDOM.js\");\n/* harmony import */ var _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderManagement.js */ \"./public/js/core/placeholderManagement.js\");\n\n\n\n\n\n/**\r\n * Inserts a pronoun placeholder with a specified form\r\n * @param {string} groupId - The pronoun group ID\r\n * @param {string} form - The pronoun form (subject, object, etc.)\r\n * @param {string} tempValue - The temporary display value\r\n */\nvar insertPronounPlaceholderSimple = function insertPronounPlaceholderSimple(groupId, form, tempValue) {\n  var editor = document.getElementById(\"storyText\");\n  (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.ensureEditorFocus)();\n  var sel = window.getSelection();\n  var range = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange && editor.contains(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.commonAncestorContainer) ? _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange : sel.rangeCount ? sel.getRangeAt(0) : null;\n  var groupNum = groupId.replace('PronounGroup', '');\n  var formAbbrevMap = {\n    subject: 'SUB',\n    object: 'OBJ',\n    possAdj: 'PSA',\n    possPron: 'PSP',\n    reflexive: 'REF'\n  };\n  var abbrev = formAbbrevMap[form] || form.toUpperCase();\n  var placeholderId = \"PRP\".concat(groupNum).concat(abbrev);\n  if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.some(function (v) {\n    return v.id === placeholderId;\n  })) {\n    var displayType = \"Person (\".concat(form, \")\");\n    _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.push({\n      id: placeholderId,\n      internalType: \"PRONOUN|\".concat(groupId, \"|\").concat(form),\n      officialDisplay: displayType,\n      display: displayType,\n      isCustom: false,\n      order: _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter++,\n      displayOverride: tempValue\n    });\n    (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_2__.updateVariablesList)();\n  }\n  (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.insertPlaceholderSpan)(placeholderId, tempValue, range);\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = null;\n};\n\n/**\r\n * Shows a modal to pick a pronoun form and group\r\n */\nvar pickPronounFormAndGroup = function pickPronounFormAndGroup() {\n  var forms = [{\n    value: 'subject',\n    text: 'Subject (he, she, they)'\n  }, {\n    value: 'object',\n    text: 'Object (him, her, them)'\n  }, {\n    value: 'possAdj',\n    text: 'Possessive Adj. (his, her, their)'\n  }, {\n    value: 'possPron',\n    text: 'Possessive Pron. (his, hers)'\n  }, {\n    value: 'reflexive',\n    text: 'Reflexive (himself, herself)'\n  }];\n  var html = \"<div class='list-group mb-2'>\";\n  forms.forEach(function (f) {\n    html += \"<button class='list-group-item list-group-item-action pronoun-form-btn' data-form='\".concat(f.value, \"'>\").concat(f.text, \"</button>\");\n  });\n  html += \"</div>\";\n  Swal.fire({\n    title: 'Pick a Pronoun Form',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      $(container).find('.pronoun-form-btn').on('click', function () {\n        var chosenForm = $(this).data('form');\n        Swal.close();\n        pickPronounGroup(chosenForm);\n      });\n    }\n  });\n};\n\n/**\r\n * Shows a modal to pick a pronoun group\r\n * @param {string} form - The pronoun form\r\n */\nvar pickPronounGroup = function pickPronounGroup(form) {\n  var groupKeys = Object.keys(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups);\n  var html = '';\n  if (groupKeys.length > 0) {\n    html += \"<h5>Existing Pronoun Groups</h5><div class='list-group mb-2'>\";\n    groupKeys.forEach(function (g) {\n      html += \"<button class='list-group-item list-group-item-action pronoun-group-btn' data-group='\".concat(g, \"'>\").concat(g, \"</button>\");\n    });\n    html += \"</div><hr>\";\n  }\n  html += \"<button class='btn btn-sm btn-outline-primary' id='createNewPronounGroupBtn'>Create New Group</button>\";\n  Swal.fire({\n    title: 'Pick a Pronoun Group',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      $(container).find('.pronoun-group-btn').on('click', function () {\n        var grp = $(this).data('group');\n        Swal.close();\n        if (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[grp] && _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[grp][form]) {\n          insertPronounPlaceholderSimple(grp, form, _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[grp][form]);\n        } else {\n          choosePronounTempValue(form, grp).then(function (tempValue) {\n            _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[grp] = _state_js__WEBPACK_IMPORTED_MODULE_0__.pronounMapping[tempValue] || {\n              subject: tempValue,\n              object: tempValue,\n              possAdj: tempValue,\n              possPron: tempValue,\n              reflexive: tempValue\n            };\n            insertPronounPlaceholderSimple(grp, form, _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[grp][form]);\n          });\n        }\n      });\n      $(container).find('#createNewPronounGroupBtn').on('click', function () {\n        _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount++;\n        var newGroup = \"PronounGroup\".concat(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount);\n        _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[newGroup] = {};\n        Swal.close();\n        choosePronounTempValue(form, newGroup).then(function (tempValue) {\n          _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[newGroup] = _state_js__WEBPACK_IMPORTED_MODULE_0__.pronounMapping[tempValue] || {\n            subject: tempValue,\n            object: tempValue,\n            possAdj: tempValue,\n            possPron: tempValue,\n            reflexive: tempValue\n          };\n          insertPronounPlaceholderSimple(newGroup, form, _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[newGroup][form]);\n        });\n      });\n    }\n  });\n};\n\n/**\r\n * Prompts the user to choose a temporary pronoun value\r\n * @param {string} form - The pronoun form\r\n * @param {string} groupId - The pronoun group ID\r\n * @returns {Promise<string>} A promise that resolves with the chosen pronoun\r\n */\nvar choosePronounTempValue = function choosePronounTempValue(form, groupId) {\n  return Swal.fire({\n    title: 'Select Temporary Pronoun',\n    input: 'radio',\n    inputOptions: {\n      'He/Him': 'He/Him',\n      'She/Her': 'She/Her',\n      'They/Them': 'They/Them',\n      'Custom': 'Custom'\n    },\n    inputValidator: function inputValidator(value) {\n      if (!value) return 'You need to choose an option!';\n    }\n  }).then(function (result) {\n    if (result.value === 'Custom') {\n      return Swal.fire({\n        title: 'Enter custom temporary pronoun',\n        input: 'text',\n        inputLabel: 'Temporary pronoun',\n        inputValue: form,\n        showCancelButton: true\n      }).then(function (res) {\n        return res.value || form;\n      });\n    } else {\n      return result.value;\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/core/pronounFunctions.js\n");

/***/ }),

/***/ "./public/js/core/state.js":
/*!*********************************!*\
  !*** ./public/js/core/state.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   pronounMapping: () => (/* binding */ pronounMapping),\n/* harmony export */   resetState: () => (/* binding */ resetState)\n/* harmony export */ });\n// public/js/core/state.js\n\n// Create state singleton object\nvar state = {\n  variables: [],\n  variableCounts: {},\n  insertionCounter: 0,\n  storyText: '',\n  customPlaceholders: [],\n  fillValues: {},\n  pronounGroups: {},\n  pronounGroupCount: 0,\n  lastRange: null,\n  usageTracker: {},\n  placeholderInsertionInProgress: false,\n  storyHasUnsavedChanges: false,\n  fillOrder: 'alphabetical',\n  currentStoryId: null,\n  currentPlaceholderSearch: '',\n  currentModalPlaceholderSearch: '',\n  currentEditingVariable: null,\n  currentPlaceholderElement: null,\n  isEditingPlaceholder: false\n};\n\n// Export the state object as default export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (state);\n\n// Predefined pronoun mappings\nvar pronounMapping = {\n  \"He/Him\": {\n    subject: \"he\",\n    object: \"him\",\n    possAdj: \"his\",\n    possPron: \"his\",\n    reflexive: \"himself\"\n  },\n  \"She/Her\": {\n    subject: \"she\",\n    object: \"her\",\n    possAdj: \"her\",\n    possPron: \"hers\",\n    reflexive: \"herself\"\n  },\n  \"They/Them\": {\n    subject: \"they\",\n    object: \"them\",\n    possAdj: \"their\",\n    possPron: \"theirs\",\n    reflexive: \"themselves\"\n  }\n};\n\n// Function to reset state to initial values\nfunction resetState() {\n  state.variables = [];\n  state.variableCounts = {};\n  state.insertionCounter = 0;\n  state.storyText = '';\n  state.customPlaceholders = [];\n  state.fillValues = {};\n  state.pronounGroups = {};\n  state.pronounGroupCount = 0;\n  state.lastRange = null;\n  state.usageTracker = {};\n  state.placeholderInsertionInProgress = false;\n  state.storyHasUnsavedChanges = false;\n  state.fillOrder = 'alphabetical';\n  state.currentStoryId = null;\n  state.currentPlaceholderSearch = '';\n  state.currentModalPlaceholderSearch = '';\n  state.currentEditingVariable = null;\n  state.currentPlaceholderElement = null;\n  state.isEditingPlaceholder = false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvanMvY29yZS9zdGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFFQTtBQUNBLElBQU1BLEtBQUssR0FBRztFQUNaQyxTQUFTLEVBQUUsRUFBRTtFQUNiQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0VBQ2xCQyxnQkFBZ0IsRUFBRSxDQUFDO0VBQ25CQyxTQUFTLEVBQUUsRUFBRTtFQUNiQyxrQkFBa0IsRUFBRSxFQUFFO0VBQ3RCQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0VBQ2RDLGFBQWEsRUFBRSxDQUFDLENBQUM7RUFDakJDLGlCQUFpQixFQUFFLENBQUM7RUFDcEJDLFNBQVMsRUFBRSxJQUFJO0VBQ2ZDLFlBQVksRUFBRSxDQUFDLENBQUM7RUFDaEJDLDhCQUE4QixFQUFFLEtBQUs7RUFDckNDLHNCQUFzQixFQUFFLEtBQUs7RUFDN0JDLFNBQVMsRUFBRSxjQUFjO0VBQ3pCQyxjQUFjLEVBQUUsSUFBSTtFQUNwQkMsd0JBQXdCLEVBQUUsRUFBRTtFQUM1QkMsNkJBQTZCLEVBQUUsRUFBRTtFQUNqQ0Msc0JBQXNCLEVBQUUsSUFBSTtFQUM1QkMseUJBQXlCLEVBQUUsSUFBSTtFQUMvQkMsb0JBQW9CLEVBQUU7QUFDeEIsQ0FBQzs7QUFFRDtBQUNBLGlFQUFlbkIsS0FBSyxFQUFDOztBQUVyQjtBQUNPLElBQU1vQixjQUFjLEdBQUc7RUFDNUIsUUFBUSxFQUFFO0lBQUVDLE9BQU8sRUFBRSxJQUFJO0lBQUVDLE1BQU0sRUFBRSxLQUFLO0lBQUVDLE9BQU8sRUFBRSxLQUFLO0lBQUVDLFFBQVEsRUFBRSxLQUFLO0lBQUVDLFNBQVMsRUFBRTtFQUFVLENBQUM7RUFDakcsU0FBUyxFQUFFO0lBQUVKLE9BQU8sRUFBRSxLQUFLO0lBQUVDLE1BQU0sRUFBRSxLQUFLO0lBQUVDLE9BQU8sRUFBRSxLQUFLO0lBQUVDLFFBQVEsRUFBRSxNQUFNO0lBQUVDLFNBQVMsRUFBRTtFQUFVLENBQUM7RUFDcEcsV0FBVyxFQUFFO0lBQUVKLE9BQU8sRUFBRSxNQUFNO0lBQUVDLE1BQU0sRUFBRSxNQUFNO0lBQUVDLE9BQU8sRUFBRSxPQUFPO0lBQUVDLFFBQVEsRUFBRSxRQUFRO0lBQUVDLFNBQVMsRUFBRTtFQUFhO0FBQ2hILENBQUM7O0FBRUQ7QUFDTyxTQUFTQyxVQUFVQSxDQUFBLEVBQUc7RUFDM0IxQixLQUFLLENBQUNDLFNBQVMsR0FBRyxFQUFFO0VBQ3BCRCxLQUFLLENBQUNFLGNBQWMsR0FBRyxDQUFDLENBQUM7RUFDekJGLEtBQUssQ0FBQ0csZ0JBQWdCLEdBQUcsQ0FBQztFQUMxQkgsS0FBSyxDQUFDSSxTQUFTLEdBQUcsRUFBRTtFQUNwQkosS0FBSyxDQUFDSyxrQkFBa0IsR0FBRyxFQUFFO0VBQzdCTCxLQUFLLENBQUNNLFVBQVUsR0FBRyxDQUFDLENBQUM7RUFDckJOLEtBQUssQ0FBQ08sYUFBYSxHQUFHLENBQUMsQ0FBQztFQUN4QlAsS0FBSyxDQUFDUSxpQkFBaUIsR0FBRyxDQUFDO0VBQzNCUixLQUFLLENBQUNTLFNBQVMsR0FBRyxJQUFJO0VBQ3RCVCxLQUFLLENBQUNVLFlBQVksR0FBRyxDQUFDLENBQUM7RUFDdkJWLEtBQUssQ0FBQ1csOEJBQThCLEdBQUcsS0FBSztFQUM1Q1gsS0FBSyxDQUFDWSxzQkFBc0IsR0FBRyxLQUFLO0VBQ3BDWixLQUFLLENBQUNhLFNBQVMsR0FBRyxjQUFjO0VBQ2hDYixLQUFLLENBQUNjLGNBQWMsR0FBRyxJQUFJO0VBQzNCZCxLQUFLLENBQUNlLHdCQUF3QixHQUFHLEVBQUU7RUFDbkNmLEtBQUssQ0FBQ2dCLDZCQUE2QixHQUFHLEVBQUU7RUFDeENoQixLQUFLLENBQUNpQixzQkFBc0IsR0FBRyxJQUFJO0VBQ25DakIsS0FBSyxDQUFDa0IseUJBQXlCLEdBQUcsSUFBSTtFQUN0Q2xCLEtBQUssQ0FBQ21CLG9CQUFvQixHQUFHLEtBQUs7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFua2Jvb2svLi9wdWJsaWMvanMvY29yZS9zdGF0ZS5qcz8zMDEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHB1YmxpYy9qcy9jb3JlL3N0YXRlLmpzXHJcblxyXG4vLyBDcmVhdGUgc3RhdGUgc2luZ2xldG9uIG9iamVjdFxyXG5jb25zdCBzdGF0ZSA9IHtcclxuICB2YXJpYWJsZXM6IFtdLFxyXG4gIHZhcmlhYmxlQ291bnRzOiB7fSxcclxuICBpbnNlcnRpb25Db3VudGVyOiAwLFxyXG4gIHN0b3J5VGV4dDogJycsXHJcbiAgY3VzdG9tUGxhY2Vob2xkZXJzOiBbXSxcclxuICBmaWxsVmFsdWVzOiB7fSxcclxuICBwcm9ub3VuR3JvdXBzOiB7fSxcclxuICBwcm9ub3VuR3JvdXBDb3VudDogMCxcclxuICBsYXN0UmFuZ2U6IG51bGwsXHJcbiAgdXNhZ2VUcmFja2VyOiB7fSxcclxuICBwbGFjZWhvbGRlckluc2VydGlvbkluUHJvZ3Jlc3M6IGZhbHNlLFxyXG4gIHN0b3J5SGFzVW5zYXZlZENoYW5nZXM6IGZhbHNlLFxyXG4gIGZpbGxPcmRlcjogJ2FscGhhYmV0aWNhbCcsXHJcbiAgY3VycmVudFN0b3J5SWQ6IG51bGwsXHJcbiAgY3VycmVudFBsYWNlaG9sZGVyU2VhcmNoOiAnJyxcclxuICBjdXJyZW50TW9kYWxQbGFjZWhvbGRlclNlYXJjaDogJycsXHJcbiAgY3VycmVudEVkaXRpbmdWYXJpYWJsZTogbnVsbCxcclxuICBjdXJyZW50UGxhY2Vob2xkZXJFbGVtZW50OiBudWxsLFxyXG4gIGlzRWRpdGluZ1BsYWNlaG9sZGVyOiBmYWxzZSxcclxufTtcclxuXHJcbi8vIEV4cG9ydCB0aGUgc3RhdGUgb2JqZWN0IGFzIGRlZmF1bHQgZXhwb3J0XHJcbmV4cG9ydCBkZWZhdWx0IHN0YXRlO1xyXG5cclxuLy8gUHJlZGVmaW5lZCBwcm9ub3VuIG1hcHBpbmdzXHJcbmV4cG9ydCBjb25zdCBwcm9ub3VuTWFwcGluZyA9IHtcclxuICBcIkhlL0hpbVwiOiB7IHN1YmplY3Q6IFwiaGVcIiwgb2JqZWN0OiBcImhpbVwiLCBwb3NzQWRqOiBcImhpc1wiLCBwb3NzUHJvbjogXCJoaXNcIiwgcmVmbGV4aXZlOiBcImhpbXNlbGZcIiB9LFxyXG4gIFwiU2hlL0hlclwiOiB7IHN1YmplY3Q6IFwic2hlXCIsIG9iamVjdDogXCJoZXJcIiwgcG9zc0FkajogXCJoZXJcIiwgcG9zc1Byb246IFwiaGVyc1wiLCByZWZsZXhpdmU6IFwiaGVyc2VsZlwiIH0sXHJcbiAgXCJUaGV5L1RoZW1cIjogeyBzdWJqZWN0OiBcInRoZXlcIiwgb2JqZWN0OiBcInRoZW1cIiwgcG9zc0FkajogXCJ0aGVpclwiLCBwb3NzUHJvbjogXCJ0aGVpcnNcIiwgcmVmbGV4aXZlOiBcInRoZW1zZWx2ZXNcIiB9XHJcbn07XHJcblxyXG4vLyBGdW5jdGlvbiB0byByZXNldCBzdGF0ZSB0byBpbml0aWFsIHZhbHVlc1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRTdGF0ZSgpIHtcclxuICBzdGF0ZS52YXJpYWJsZXMgPSBbXTtcclxuICBzdGF0ZS52YXJpYWJsZUNvdW50cyA9IHt9O1xyXG4gIHN0YXRlLmluc2VydGlvbkNvdW50ZXIgPSAwO1xyXG4gIHN0YXRlLnN0b3J5VGV4dCA9ICcnO1xyXG4gIHN0YXRlLmN1c3RvbVBsYWNlaG9sZGVycyA9IFtdO1xyXG4gIHN0YXRlLmZpbGxWYWx1ZXMgPSB7fTtcclxuICBzdGF0ZS5wcm9ub3VuR3JvdXBzID0ge307XHJcbiAgc3RhdGUucHJvbm91bkdyb3VwQ291bnQgPSAwO1xyXG4gIHN0YXRlLmxhc3RSYW5nZSA9IG51bGw7XHJcbiAgc3RhdGUudXNhZ2VUcmFja2VyID0ge307XHJcbiAgc3RhdGUucGxhY2Vob2xkZXJJbnNlcnRpb25JblByb2dyZXNzID0gZmFsc2U7XHJcbiAgc3RhdGUuc3RvcnlIYXNVbnNhdmVkQ2hhbmdlcyA9IGZhbHNlO1xyXG4gIHN0YXRlLmZpbGxPcmRlciA9ICdhbHBoYWJldGljYWwnO1xyXG4gIHN0YXRlLmN1cnJlbnRTdG9yeUlkID0gbnVsbDtcclxuICBzdGF0ZS5jdXJyZW50UGxhY2Vob2xkZXJTZWFyY2ggPSAnJztcclxuICBzdGF0ZS5jdXJyZW50TW9kYWxQbGFjZWhvbGRlclNlYXJjaCA9ICcnO1xyXG4gIHN0YXRlLmN1cnJlbnRFZGl0aW5nVmFyaWFibGUgPSBudWxsO1xyXG4gIHN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlckVsZW1lbnQgPSBudWxsO1xyXG4gIHN0YXRlLmlzRWRpdGluZ1BsYWNlaG9sZGVyID0gZmFsc2U7XHJcbn0iXSwibmFtZXMiOlsic3RhdGUiLCJ2YXJpYWJsZXMiLCJ2YXJpYWJsZUNvdW50cyIsImluc2VydGlvbkNvdW50ZXIiLCJzdG9yeVRleHQiLCJjdXN0b21QbGFjZWhvbGRlcnMiLCJmaWxsVmFsdWVzIiwicHJvbm91bkdyb3VwcyIsInByb25vdW5Hcm91cENvdW50IiwibGFzdFJhbmdlIiwidXNhZ2VUcmFja2VyIiwicGxhY2Vob2xkZXJJbnNlcnRpb25JblByb2dyZXNzIiwic3RvcnlIYXNVbnNhdmVkQ2hhbmdlcyIsImZpbGxPcmRlciIsImN1cnJlbnRTdG9yeUlkIiwiY3VycmVudFBsYWNlaG9sZGVyU2VhcmNoIiwiY3VycmVudE1vZGFsUGxhY2Vob2xkZXJTZWFyY2giLCJjdXJyZW50RWRpdGluZ1ZhcmlhYmxlIiwiY3VycmVudFBsYWNlaG9sZGVyRWxlbWVudCIsImlzRWRpdGluZ1BsYWNlaG9sZGVyIiwicHJvbm91bk1hcHBpbmciLCJzdWJqZWN0Iiwib2JqZWN0IiwicG9zc0FkaiIsInBvc3NQcm9uIiwicmVmbGV4aXZlIiwicmVzZXRTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./public/js/core/state.js\n");

/***/ }),

/***/ "./public/js/core/storyProcessor.js":
/*!******************************************!*\
  !*** ./public/js/core/storyProcessor.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFilenameFromTitle: () => (/* binding */ createFilenameFromTitle),\n/* harmony export */   fillPlaceholders: () => (/* binding */ fillPlaceholders),\n/* harmony export */   formatStoryForExport: () => (/* binding */ formatStoryForExport),\n/* harmony export */   loadStoryIntoEditor: () => (/* binding */ loadStoryIntoEditor),\n/* harmony export */   parseStoryFile: () => (/* binding */ parseStoryFile),\n/* harmony export */   resetStoryState: () => (/* binding */ resetStoryState)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _placeholders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./placeholders.js */ \"./public/js/core/placeholders.js\");\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// public/js/core/storyProcessor.js\n\n\n\n/**\r\n * Functions for processing and manipulating story text\r\n */\n\n// Fill in placeholders with user-provided values\nvar fillPlaceholders = function fillPlaceholders(templateText, variables, fillValues, pronounGroups) {\n  console.log(\"========== FILLING PLACEHOLDERS ==========\");\n  console.log(\"Input templateText length:\", (templateText === null || templateText === void 0 ? void 0 : templateText.length) || 0);\n  console.log(\"Available variables:\", (variables === null || variables === void 0 ? void 0 : variables.length) || 0);\n  console.log(\"Fill values:\", fillValues);\n  console.log(\"Placeholder text:\", templateText);\n  if (!templateText) return '';\n\n  // Extract all placeholders from the text\n  var placeholderRegex = /\\{([^}]+)\\}/g;\n  var placeholders = [];\n  var match;\n  while ((match = placeholderRegex.exec(templateText)) !== null) {\n    placeholders.push({\n      fullMatch: match[0],\n      id: match[1]\n    });\n  }\n  console.log(\"Extracted placeholders:\", placeholders.length);\n  placeholders.forEach(function (p) {\n    return console.log(\"- \".concat(p.fullMatch, \" (ID: \").concat(p.id, \")\"));\n  });\n  var result = templateText;\n\n  // First pass: process placeholders with explicit variables\n  var _iterator = _createForOfIteratorHelper(variables),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var variable = _step.value;\n      var placeholder = \"{\".concat(variable.id, \"}\");\n      if (result.includes(placeholder)) {\n        console.log(\"Processing \".concat(placeholder, \"...\"));\n\n        // Handle pronouns specially\n        if (variable.internalType.startsWith('PRONOUN|')) {\n          var parts = variable.internalType.split('|');\n          var groupId = parts[1];\n          var form = parts[2];\n          console.log(\"  Handling pronoun: groupId=\".concat(groupId, \", form=\").concat(form));\n          if (pronounGroups && pronounGroups[groupId] && pronounGroups[groupId][form]) {\n            var pronounValue = pronounGroups[groupId][form];\n            console.log(\"  Found pronoun value: \\\"\".concat(pronounValue, \"\\\"\"));\n            result = result.replace(new RegExp(placeholder, 'g'), pronounValue);\n          } else {\n            console.warn(\"  WARNING: No pronoun value found for group \".concat(groupId, \" form \").concat(form));\n            result = result.replace(new RegExp(placeholder, 'g'), variable.displayOverride || variable.display || '[MISSING PRONOUN]');\n          }\n        }\n        // Handle regular variables\n        else if (fillValues && fillValues[variable.id]) {\n          console.log(\"  Replacing with user-provided value: \\\"\".concat(fillValues[variable.id], \"\\\"\"));\n          result = result.replace(new RegExp(placeholder, 'g'), fillValues[variable.id]);\n        } else {\n          console.warn(\"  WARNING: No fill value for \".concat(variable.id));\n          result = result.replace(new RegExp(placeholder, 'g'), variable.displayOverride || '[MISSING VALUE]');\n        }\n      } else {\n        console.log(\"Placeholder {\".concat(variable.id, \"} not found in text\"));\n      }\n    }\n\n    // Second pass: Check for any remaining placeholders not in the variables list\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var remainingMatch;\n  var remainingRegex = /\\{([^}]+)\\}/g;\n  while ((remainingMatch = remainingRegex.exec(result)) !== null) {\n    var missingId = remainingMatch[1];\n    console.warn(\"WARNING: Found placeholder {\".concat(missingId, \"} that wasn't in the variables list!\"));\n\n    // Try to directly replace from fillValues as a last resort\n    if (fillValues && fillValues[missingId]) {\n      console.log(\"  Replacing directly from fillValues with: \\\"\".concat(fillValues[missingId], \"\\\"\"));\n      result = result.replace(new RegExp(\"\\\\{\".concat(missingId, \"\\\\}\"), 'g'), fillValues[missingId]);\n    } else {\n      console.error(\"  ERROR: No value available for placeholder {\".concat(missingId, \"}\"));\n    }\n  }\n  console.log(\"Final text after replacements:\", result);\n  return result;\n};\n\n// Parse uploaded story text file\nvar parseStoryFile = function parseStoryFile(content) {\n  var titleMatch = content.match(/^Title:\\s*(.*)$/m);\n  var authorMatch = content.match(/^Author:\\s*(.*)$/m);\n  var storyStartIndex = content.indexOf('\\n\\n');\n  var storyContent = storyStartIndex !== -1 ? content.substring(storyStartIndex + 2) : content;\n  return {\n    title: titleMatch ? titleMatch[1] : '',\n    author: authorMatch ? authorMatch[1] : '',\n    content: storyContent\n  };\n};\n\n// Format story for export/download\nvar formatStoryForExport = function formatStoryForExport(title, author, content) {\n  return \"Title: \".concat(title, \"\\nAuthor: \").concat(author, \"\\n\\n\").concat(content);\n};\n\n// Create download filename from title\nvar createFilenameFromTitle = function createFilenameFromTitle(title) {\n  return title ? title.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '.txt' : 'story.txt';\n};\n\n// Reset story state for a new story\nvar resetStoryState = function resetStoryState() {\n  // Clear DOM fields\n  $('#storyTitle').val('');\n  $('#storyAuthor').val('');\n  $('#storyText').html('');\n  $('#storyTags').val('');\n\n  // Reset state variables\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = [];\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter = 0;\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders = [];\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups = {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount = 0;\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges = false;\n\n  // Show editor view\n  $('#editor').removeClass('d-none');\n  $('#inputs, #result').addClass('d-none');\n\n  // Update UI\n  (0,_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesFromEditor)();\n};\n\n// Load story data into the editor\nvar loadStoryIntoEditor = function loadStoryIntoEditor(storyData) {\n  $('#storyTitle').val(storyData.title || '');\n  $('#storyAuthor').val(storyData.author || '');\n  $('#storyText').html(storyData.content || '');\n  $('#storyTags').val(storyData.tags ? storyData.tags.join(', ') : '');\n\n  // Reset state with the loaded story's data\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = storyData.variables || [];\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = storyData.variableCounts || {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter = 0;\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders = storyData.customPlaceholders || [];\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = storyData.fillValues || {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups = storyData.pronounGroups || {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount = storyData.pronounGroupCount || 0;\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges = false;\n\n  // Update UI based on the loaded story\n  (0,_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesFromEditor)();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/core/storyProcessor.js\n");

/***/ }),

/***/ "./public/js/core/typeSelectionModals.js":
/*!***********************************************!*\
  !*** ./public/js/core/typeSelectionModals.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   showNounNumberSelection: () => (/* binding */ showNounNumberSelection),\n/* harmony export */   showPersonTypeSelection: () => (/* binding */ showPersonTypeSelection),\n/* harmony export */   showVerbTenseSelection: () => (/* binding */ showVerbTenseSelection)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/typeHelpers.js */ \"./public/js/utils/typeHelpers.js\");\n/* harmony import */ var _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderDefinitions.js */ \"./public/js/core/placeholderDefinitions.js\");\n/* harmony import */ var _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./placeholderCreation.js */ \"./public/js/core/placeholderCreation.js\");\n/* harmony import */ var _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./placeholderManagement.js */ \"./public/js/core/placeholderManagement.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n\n/**\r\n * Shows a modal for selecting person type\r\n * @param {string} baseInternal - The base internal type\r\n * @param {string} baseDisplay - The base display name\r\n */\nvar showPersonTypeSelection = function showPersonTypeSelection(baseInternal, baseDisplay) {\n  var html = \"<div class='list-group'>\\n  <button class='list-group-item list-group-item-action person-type-btn' data-type='common'>\\n    Common (e.g., doctor)\\n  </button>\\n  <button class='list-group-item list-group-item-action person-type-btn' data-type='proper'>\\n    Proper (e.g., Donald Trump)\\n  </button>\\n</div>\";\n  Swal.fire({\n    title: 'Select Person Type',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    allowOutsideClick: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      $(container).find('.person-type-btn').on('click', function () {\n        var selectedType = $(this).data('type'); // \"common\" or \"proper\"\n        var updatedBaseInternal, updatedBaseDisplay;\n        if (selectedType === \"proper\") {\n          updatedBaseInternal = \"NNP_Person\";\n          updatedBaseDisplay = \"Proper \" + baseDisplay;\n        } else {\n          updatedBaseInternal = \"NN_Person\";\n          updatedBaseDisplay = \"Common \" + baseDisplay;\n        }\n        // Close the current modal...\n        Swal.close();\n        // ...and use a small timeout to ensure it's fully closed before showing the next modal.\n        setTimeout(function () {\n          showNounNumberSelection(updatedBaseInternal, updatedBaseDisplay);\n        }, 100);\n      });\n    }\n  });\n};\n\n/**\r\n * Shows a modal for selecting noun number\r\n * @param {string} baseInternal - The base internal type\r\n * @param {string} baseDisplay - The base display name\r\n */\nvar showNounNumberSelection = function showNounNumberSelection(baseInternal, baseDisplay) {\n  var html = \"<div class='list-group'>\";\n  ['Singular', 'Plural'].forEach(function (f) {\n    html += \"<button class='list-group-item list-group-item-action noun-number-btn' data-form='\".concat(f, \"'>\").concat(f, \"</button>\");\n  });\n  html += \"</div>\";\n  Swal.fire({\n    title: 'Select Number',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      $(container).find('.noun-number-btn').on('click', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var selected, finalInternal, finalDisplay;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              selected = $(this).data('form');\n              finalInternal = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.getNounFinalType(baseInternal, selected);\n              finalDisplay = \"\".concat(baseDisplay, \" (\").concat(selected, \")\");\n              if (!(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder && _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable)) {\n                _context.next = 10;\n                break;\n              }\n              (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_4__.updateExistingPlaceholder)(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable, finalInternal, finalDisplay);\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder = false;\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = null;\n              Swal.close();\n              _context.next = 13;\n              break;\n            case 10:\n              _context.next = 12;\n              return (0,_placeholderCreation_js__WEBPACK_IMPORTED_MODULE_3__.insertPlaceholder)(finalInternal, finalDisplay, false);\n            case 12:\n              Swal.close();\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      })));\n    }\n  });\n};\n\n/**\r\n * Shows a modal for selecting verb tense\r\n * @param {string} baseInternal - The base internal type\r\n * @param {string} baseDisplay - The base display name\r\n */\nvar showVerbTenseSelection = function showVerbTenseSelection(baseInternal, baseDisplay) {\n  var html = \"<div class='list-group'>\";\n  _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.VERB_TENSES.forEach(function (t) {\n    html += \"<button class='list-group-item list-group-item-action verb-tense-btn' data-tense='\".concat(t.value, \"' data-text='\").concat(t.text, \"'>\").concat(t.text, \"</button>\");\n  });\n  html += \"</div>\";\n  Swal.fire({\n    title: 'Select Verb Tense',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      $(container).find('.verb-tense-btn').on('click', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var selectedTense, tenseText, finalInternal, finalDisplay;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              selectedTense = $(this).data('tense');\n              tenseText = $(this).data('text');\n              finalInternal = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.computeFinalVerbType(baseInternal, selectedTense);\n              finalDisplay = \"\".concat(baseDisplay, \" (\").concat(tenseText, \")\");\n              if (!(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder && _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable)) {\n                _context2.next = 11;\n                break;\n              }\n              (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_4__.updateExistingPlaceholder)(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable, finalInternal, finalDisplay);\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder = false;\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = null;\n              Swal.close();\n              _context2.next = 14;\n              break;\n            case 11:\n              _context2.next = 13;\n              return (0,_placeholderCreation_js__WEBPACK_IMPORTED_MODULE_3__.insertPlaceholder)(finalInternal, finalDisplay, false);\n            case 13:\n              Swal.close();\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      })));\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/core/typeSelectionModals.js\n");

/***/ }),

/***/ "./public/js/data/storage.js":
/*!***********************************!*\
  !*** ./public/js/data/storage.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Storage: () => (/* binding */ Storage)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/placeholders.js */ \"./public/js/core/placeholders.js\");\n/* harmony import */ var _ui_forms_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/forms.js */ \"./public/js/ui/forms.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.js */ \"./public/js/utils/utils.js\");\n// public/js/data/storage.js\n\n\n\n\n\n// Define the base URL for all API calls - UPDATED to be dynamic\nvar API_BASE_URL = function () {\n  // If we're running on localhost with a specific port, use it with port 3000\n  if (window.location.hostname === 'localhost') {\n    return 'http://localhost:3000';\n  }\n  // For all other cases (production), use the same origin with correct port\n  return \"\".concat(window.location.protocol, \"//\").concat(window.location.hostname, \":3000\");\n}();\nconsole.log(\"Using API base URL: \".concat(API_BASE_URL));\nvar Storage = {\n  handleAjaxError: function handleAjaxError(xhr, statusText, errorThrown, customErrorMessage) {\n    var errorMessage = customErrorMessage || 'Failed to perform action';\n    if (xhr.status) {\n      errorMessage += \". Server responded with status: \".concat(xhr.status, \" \").concat(xhr.statusText);\n    } else if (statusText) {\n      errorMessage += \". Status text: \".concat(statusText);\n    } else if (errorThrown) {\n      errorMessage += \". Error: \".concat(errorThrown);\n    }\n    Swal.fire('Error', errorMessage, 'error');\n    console.error(\"AJAX Error:\", errorMessage, xhr);\n  },\n  addCurrentStoryToSavedStories: function addCurrentStoryToSavedStories() {\n    Swal.fire({\n      title: 'Save Story',\n      html: \"\\n              <input type=\\\"text\\\" id=\\\"swalTitle\\\" class=\\\"swal2-input\\\" placeholder=\\\"Story Title\\\" value=\\\"\".concat($('#storyTitle').val(), \"\\\">\\n              <input type=\\\"text\\\" id=\\\"swalAuthor\\\" class=\\\"swal2-input\\\" placeholder=\\\"Author\\\" value=\\\"\").concat($('#storyAuthor').val(), \"\\\">\\n              <input type=\\\"text\\\" id=\\\"swalTags\\\" class=\\\"swal2-input\\\" placeholder=\\\"Tags (comma separated)\\\" value=\\\"\").concat($('#storyTags').val(), \"\\\">\\n              <input type=\\\"password\\\" id=\\\"swalPassword\\\" class=\\\"swal2-input\\\" placeholder=\\\"Password (optional)\\\">\\n              <div id=\\\"preexistingTagsContainer\\\" style=\\\"text-align:left; margin-top:10px;\\\"></div>\\n            \"),\n      didOpen: function didOpen() {\n        // We need to import and call loadPreexistingTags from events.js\n        // This requires proper module handling\n        var container = $('#preexistingTagsContainer');\n        $.ajax({\n          url: \"\".concat(API_BASE_URL, \"/api/gettags\"),\n          method: 'GET',\n          success: function success(tags) {\n            container.empty();\n            if (tags.length > 0) {\n              container.append('<p>Select a tag:</p>');\n              tags.forEach(function (tag) {\n                var btn = $('<button type=\"button\" class=\"btn btn-sm btn-outline-secondary m-1 preexisting-tag-btn\"></button>');\n                btn.text(tag);\n                btn.on('click', function () {\n                  var current = $('#swalTags').val();\n                  var tagsArr = current ? current.split(',').map(function (t) {\n                    return t.trim();\n                  }).filter(Boolean) : [];\n                  if (!tagsArr.includes(tag)) {\n                    tagsArr.push(tag);\n                    $('#swalTags').val(tagsArr.join(', '));\n                  }\n                });\n                container.append(btn);\n              });\n            }\n          },\n          error: function error(err) {\n            console.error('Failed to load preexisting tags', err);\n          }\n        });\n      },\n      showCancelButton: true,\n      confirmButtonText: 'Save',\n      preConfirm: function preConfirm() {\n        return {\n          title: document.getElementById('swalTitle').value,\n          author: document.getElementById('swalAuthor').value,\n          tags: document.getElementById('swalTags').value,\n          password: document.getElementById('swalPassword').value\n        };\n      }\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        var data = result.value;\n        // Update fields in the editor\n        $('#storyTitle').val(data.title);\n        $('#storyAuthor').val(data.author);\n        $('#storyTags').val(data.tags);\n        var story = {\n          storyTitle: data.title,\n          storyAuthor: data.author,\n          storyText: $('#storyText').html(),\n          variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n          pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups,\n          variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts,\n          pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount,\n          customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders,\n          tags: data.tags ? data.tags.split(',').map(function (s) {\n            return s.trim();\n          }) : [],\n          savedAt: new Date().toISOString(),\n          password: data.password && data.password.trim() !== '' ? data.password : null\n        };\n        $.ajax({\n          url: \"\".concat(API_BASE_URL, \"/api/savestory\"),\n          method: 'POST',\n          contentType: 'application/json',\n          data: JSON.stringify(story),\n          success: function success() {\n            Swal.fire({\n              toast: true,\n              position: 'top-end',\n              icon: 'success',\n              title: 'Story saved to site!',\n              showConfirmButton: false,\n              timer: 1500\n            });\n          },\n          error: function error(xhr, statusText, errorThrown) {\n            if (xhr.status === 409) {\n              Swal.fire({\n                title: 'Story exists',\n                text: 'A story with this title already exists. Overwrite?',\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'Yes, overwrite',\n                cancelButtonText: 'No'\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  // Create a new story object with the overwrite flag\n                  var storyWithOverwrite = {\n                    storyTitle: $('#storyTitle').val(),\n                    storyAuthor: $('#storyAuthor').val(),\n                    storyText: $('#storyText').html(),\n                    variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n                    pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups,\n                    variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts,\n                    pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount,\n                    customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders,\n                    tags: $('#storyTags').val() ? $('#storyTags').val().split(',').map(function (s) {\n                      return s.trim();\n                    }) : [],\n                    savedAt: new Date().toISOString(),\n                    password: null,\n                    overwrite: true // Add the overwrite flag\n                  };\n                  $.ajax({\n                    url: \"\".concat(API_BASE_URL, \"/api/savestory\"),\n                    method: 'POST',\n                    contentType: 'application/json',\n                    data: JSON.stringify(storyWithOverwrite),\n                    success: function success() {\n                      Swal.fire({\n                        toast: true,\n                        position: 'top-end',\n                        icon: 'success',\n                        title: 'Story overwritten!',\n                        showConfirmButton: false,\n                        timer: 1500\n                      });\n                    },\n                    error: function error(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite) {\n                      Storage.handleAjaxError(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite, 'Failed to overwrite story');\n                    }\n                  });\n                }\n              });\n            } else {\n              Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to save story');\n            }\n          }\n        });\n      }\n    });\n  },\n  addCompletedStoryToSavedStories: function addCompletedStoryToSavedStories() {\n    Swal.fire({\n      title: 'Save Completed Story',\n      html: \"\\n              <input type=\\\"text\\\" id=\\\"swalTitle\\\" class=\\\"swal2-input\\\" placeholder=\\\"Story Title\\\" value=\\\"\".concat($('#displayTitle').text(), \"\\\">\\n              <input type=\\\"text\\\" id=\\\"swalAuthor\\\" class=\\\"swal2-input\\\" placeholder=\\\"Author\\\" value=\\\"\").concat($('#displayAuthor').text(), \"\\\">\\n              <input type=\\\"text\\\" id=\\\"swalTags\\\" class=\\\"swal2-input\\\" placeholder=\\\"Tags (comma separated)\\\" value=\\\"\").concat($('#displayTags').text(), \"\\\">\\n              <input type=\\\"password\\\" id=\\\"swalPassword\\\" class=\\\"swal2-input\\\" placeholder=\\\"Password (optional)\\\">\\n              <div id=\\\"preexistingTagsContainer\\\" style=\\\"text-align:left; margin-top:10px;\\\"></div>\\n            \"),\n      didOpen: function didOpen() {\n        // We need to import and call loadPreexistingTags from events.js\n        // This requires proper module handling\n        var container = $('#preexistingTagsContainer');\n        $.ajax({\n          url: \"\".concat(API_BASE_URL, \"/api/gettags\"),\n          method: 'GET',\n          success: function success(tags) {\n            container.empty();\n            if (tags.length > 0) {\n              container.append('<p>Select a tag:</p>');\n              tags.forEach(function (tag) {\n                var btn = $('<button type=\"button\" class=\"btn btn-sm btn-outline-secondary m-1 preexisting-tag-btn\"></button>');\n                btn.text(tag);\n                btn.on('click', function () {\n                  var current = $('#swalTags').val();\n                  var tagsArr = current ? current.split(',').map(function (t) {\n                    return t.trim();\n                  }).filter(Boolean) : [];\n                  if (!tagsArr.includes(tag)) {\n                    tagsArr.push(tag);\n                    $('#swalTags').val(tagsArr.join(', '));\n                  }\n                });\n                container.append(btn);\n              });\n            }\n          },\n          error: function error(err) {\n            console.error('Failed to load preexisting tags', err);\n          }\n        });\n      },\n      showCancelButton: true,\n      confirmButtonText: 'Save',\n      preConfirm: function preConfirm() {\n        return {\n          title: document.getElementById('swalTitle').value,\n          author: document.getElementById('swalAuthor').value,\n          tags: document.getElementById('swalTags').value,\n          password: document.getElementById('swalPassword').value\n        };\n      }\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        var data = result.value;\n        // Update display in the result section\n        $('#displayTitle').text(data.title);\n        $('#displayAuthor').text(data.author);\n        $('#displayTags').text(data.tags);\n        var story = {\n          storyTitle: data.title,\n          storyAuthor: data.author,\n          storyText: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyText,\n          variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n          pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups,\n          variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts,\n          pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount,\n          customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders,\n          tags: data.tags ? data.tags.split(',').map(function (s) {\n            return s.trim();\n          }) : [],\n          savedAt: new Date().toISOString(),\n          password: data.password && data.password.trim() !== '' ? data.password : null\n        };\n        $.ajax({\n          url: \"\".concat(API_BASE_URL, \"/api/savestory\"),\n          method: 'POST',\n          contentType: 'application/json',\n          data: JSON.stringify(story),\n          success: function success() {\n            Swal.fire({\n              toast: true,\n              position: 'top-end',\n              icon: 'success',\n              title: 'Completed story saved to site!',\n              showConfirmButton: false,\n              timer: 1500\n            });\n          },\n          error: function error(xhr, statusText, errorThrown) {\n            if (xhr.status === 409) {\n              Swal.fire({\n                title: 'Story exists',\n                text: 'A story with this title already exists. Overwrite?',\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'Yes, overwrite',\n                cancelButtonText: 'No'\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  story.overwrite = true;\n                  $.ajax({\n                    url: \"\".concat(API_BASE_URL, \"/api/savestory\"),\n                    method: 'POST',\n                    contentType: 'application/json',\n                    data: JSON.stringify(story),\n                    success: function success() {\n                      Swal.fire({\n                        toast: true,\n                        position: 'top-end',\n                        icon: 'success',\n                        title: 'Completed story overwritten!',\n                        showConfirmButton: false,\n                        timer: 1500\n                      });\n                    },\n                    error: function error(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite) {\n                      Storage.handleAjaxError(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite, 'Failed to overwrite completed story');\n                    }\n                  });\n                }\n              });\n            } else {\n              Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to save completed story');\n            }\n          }\n        });\n      }\n    });\n  },\n  loadSavedStoriesList: function loadSavedStoriesList() {\n    var tag = $('#filterTag').val();\n    var sort = $('#sortOption').val();\n    $.ajax({\n      url: \"\".concat(API_BASE_URL, \"/api/getstories?tag=\").concat(encodeURIComponent(tag || ''), \"&sort=\").concat(encodeURIComponent(sort || 'date_desc')),\n      method: 'GET',\n      success: function success(stories) {\n        // Store the fetched stories globally for later reference\n        window.savedStories = stories;\n        var $listContainer = $('#savedStoriesList').empty();\n        if (!stories.length) {\n          $listContainer.append('<p>No stories saved yet.</p>');\n          return;\n        }\n        stories.forEach(function (story, index) {\n          var dateObj = new Date(story.savedAt);\n          var dateStr = dateObj.toLocaleDateString() + \" \" + dateObj.toLocaleTimeString();\n          var tags = story.tags && story.tags.length ? story.tags.join(', ') : 'No tags';\n          var ratingDisplay = story.ratingCount ? \"Rating: \".concat(story.rating.toFixed(1), \" (\").concat(story.ratingCount, \" votes)\") : 'No ratings';\n          var lockIndicator = story.locked ? \"<i class=\\\"fas fa-lock\\\" title=\\\"Password Protected\\\"></i> \" : '';\n          var item = $(\"\\n                      <div class=\\\"list-group-item p-2\\\">\\n                        <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                          <div>\\n                            <strong>\".concat(lockIndicator).concat(story.storyTitle || 'Untitled', \"</strong><br>\\n                            <small>\").concat(story.storyAuthor || 'Unknown', \" | \").concat(dateStr, \"</small><br>\\n                            <small>\").concat(tags, \" | \").concat(ratingDisplay, \"</small>\\n                          </div>\\n                          <div>\\n                            <button class=\\\"btn btn-sm btn-secondary editSavedStoryBtn\\\" data-index=\\\"\").concat(index, \"\\\" aria-label=\\\"Edit Story\\\">\\n                              <i class=\\\"fas fa-edit\\\"></i>\\n                            </button>\\n                            <button class=\\\"btn btn-sm btn-success loadSavedStoryBtn\\\" data-index=\\\"\").concat(index, \"\\\" aria-label=\\\"Play Story\\\">\\n                              <i class=\\\"fas fa-play\\\"></i>\\n                            </button>\\n                            <button class=\\\"btn btn-sm btn-danger deleteSavedStoryBtn\\\" data-title=\\\"\").concat(story.storyTitle, \"\\\" aria-label=\\\"Delete Story\\\">\\n                              <i class=\\\"fas fa-trash-alt\\\"></i>\\n                            </button>\\n                          </div>\\n                        </div>\\n                      </div>\\n                    \"));\n          $listContainer.append(item);\n        });\n      },\n      error: function error(xhr, statusText, errorThrown) {\n        Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to load saved stories list');\n      }\n    });\n  },\n  createSavedStoryListItem: function createSavedStoryListItem(story, index, dateStr) {\n    return $(\"\\n            <div class=\\\"list-group-item p-2\\\">\\n              <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                <div>\\n                  <strong>\".concat(story.storyTitle || 'Untitled', \"</strong><br>\\n                  <small>\").concat(story.storyAuthor || 'Unknown', \" | \").concat(dateStr, \"</small>\\n                </div>\\n                <div>\\n                  <button class=\\\"btn btn-sm btn-secondary editSavedStoryBtn\\\" data-index=\\\"\").concat(index, \"\\\" aria-label=\\\"Edit Story\\\">\\n                    <i class=\\\"fas fa-edit\\\"></i>\\n                  </button>\\n                  <button class=\\\"btn btn-sm btn-success loadSavedStoryBtn\\\" data-index=\\\"\").concat(index, \"\\\" aria-label=\\\"Play Story\\\">\\n                    <i class=\\\"fas fa-play\\\"></i>\\n                  </button>\\n                  <button class=\\\"btn btn-sm btn-danger deleteSavedStoryBtn\\\" data-title=\\\"\").concat(story.storyTitle, \"\\\" aria-label=\\\"Delete Story\\\">\\n                    <i class=\\\"fas fa-trash-alt\\\"></i>\\n                  </button>\\n                </div>\\n              </div>\\n            </div>\\n        \"));\n  },\n  loadSavedStory: function loadSavedStory(index) {\n    var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"edit\";\n    var stories = window.savedStories || [];\n    var story = stories[index];\n    if (!story) {\n      Swal.fire('Error', 'Story not found.', 'error');\n      return;\n    }\n    // NEW: If the story is locked, prompt for the password.\n    if (story.locked) {\n      Swal.fire({\n        title: 'Enter Password',\n        input: 'password',\n        inputPlaceholder: 'Password',\n        showCancelButton: true,\n        inputAttributes: {\n          autocapitalize: 'off',\n          autocorrect: 'off'\n        }\n      }).then(function (result) {\n        if (result.value) {\n          $.ajax({\n            url: \"\".concat(API_BASE_URL, \"/api/unlockstory\"),\n            method: 'POST',\n            contentType: 'application/json',\n            data: JSON.stringify({\n              storyId: story._id,\n              password: result.value\n            }),\n            success: function success(unlockedStory) {\n              Storage.populateEditorWithStory(unlockedStory, mode);\n              _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId = unlockedStory._id || null;\n              $('#displayStoryId').text(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId);\n              Swal.fire({\n                toast: true,\n                position: 'top-end',\n                icon: 'success',\n                title: 'Story loaded!',\n                showConfirmButton: false,\n                timer: 1500\n              });\n            },\n            error: function error(xhr, statusText, errorThrown) {\n              Storage.handleAjaxError(xhr, statusText, errorThrown, 'Incorrect password or failed to unlock story');\n            }\n          });\n        }\n      });\n    } else {\n      Storage.populateEditorWithStory(story, mode);\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId = story._id || null;\n      $('#displayStoryId').text(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId);\n      Swal.fire({\n        toast: true,\n        position: 'top-end',\n        icon: 'success',\n        title: 'Story loaded!',\n        showConfirmButton: false,\n        timer: 1500\n      });\n    }\n  },\n  populateEditorWithStory: function populateEditorWithStory(story, mode) {\n    $('#storyTitle').val(story.storyTitle);\n    $('#storyAuthor').val(story.storyAuthor);\n    $('#storyText').html((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.decodeHTMLEntities)(story.storyText));\n    // NEW: Populate tags input if editing a story.\n    if (story.tags && story.tags.length) {\n      $('#storyTags').val(story.tags.join(', '));\n    }\n    // Also store rating info in a display area (if desired)\n    if (mode === \"play\" && story.ratingCount) {\n      $('#ratingSection').show();\n    } else {\n      $('#ratingSection').hide();\n    }\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = [];\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = {};\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter = 0;\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = story.fillValues || {};\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups = story.pronounGroups || {};\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount = story.pronounGroupCount || 0;\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders = story.customPlaceholders || [];\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesFromEditor)();\n    if (mode === \"edit\") {\n      $('#editor').removeClass('d-none');\n      $('#inputs, #result').addClass('d-none');\n    } else if (mode === \"play\") {\n      (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_2__.buildFillForm)();\n      $('#inputs').removeClass('d-none');\n      $('#editor, #result').addClass('d-none');\n    }\n  },\n  deleteSavedStory: function deleteSavedStory(title) {\n    $.ajax({\n      url: \"\".concat(API_BASE_URL, \"/api/deletestory\"),\n      method: 'DELETE',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        storyTitle: title\n      }),\n      success: function success() {\n        Swal.fire({\n          toast: true,\n          position: 'top-end',\n          icon: 'success',\n          title: 'Story deleted!',\n          showConfirmButton: false,\n          timer: 1500\n        });\n        Storage.loadSavedStoriesList();\n      },\n      error: function error(xhr, statusText, errorThrown) {\n        Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to delete story');\n      }\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQUcsRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEVBQUs7UUFDckNKLE9BQU8sQ0FBQ0MsZUFBZSxDQUFDQyxHQUFHLEVBQUVDLFVBQVUsRUFBRUMsV0FBVyxFQUFFLHdCQUF3QixDQUFDO01BQ25GO0lBQ0osQ0FBQyxDQUFDO0VBQ047QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmtib29rLy4vcHVibGljL2pzL2RhdGEvc3RvcmFnZS5qcz9hMWE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHB1YmxpYy9qcy9kYXRhL3N0b3JhZ2UuanNcclxuaW1wb3J0IHN0YXRlIGZyb20gJy4uL2NvcmUvc3RhdGUuanMnO1xyXG5pbXBvcnQgeyB1cGRhdGVWYXJpYWJsZXNGcm9tRWRpdG9yIH0gZnJvbSAnLi4vY29yZS9wbGFjZWhvbGRlcnMuanMnO1xyXG5pbXBvcnQgeyBidWlsZEZpbGxGb3JtIH0gZnJvbSAnLi4vdWkvZm9ybXMuanMnO1xyXG5pbXBvcnQgeyBVdGlscywgZGVjb2RlSFRNTEVudGl0aWVzIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMuanMnO1xyXG5cclxuLy8gRGVmaW5lIHRoZSBiYXNlIFVSTCBmb3IgYWxsIEFQSSBjYWxscyAtIFVQREFURUQgdG8gYmUgZHluYW1pY1xyXG5jb25zdCBBUElfQkFTRV9VUkwgPSAoKCkgPT4ge1xyXG4gICAgLy8gSWYgd2UncmUgcnVubmluZyBvbiBsb2NhbGhvc3Qgd2l0aCBhIHNwZWNpZmljIHBvcnQsIHVzZSBpdCB3aXRoIHBvcnQgMzAwMFxyXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCcpIHtcclxuICAgICAgICByZXR1cm4gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCc7XHJcbiAgICB9XHJcbiAgICAvLyBGb3IgYWxsIG90aGVyIGNhc2VzIChwcm9kdWN0aW9uKSwgdXNlIHRoZSBzYW1lIG9yaWdpbiB3aXRoIGNvcnJlY3QgcG9ydFxyXG4gICAgcmV0dXJuIGAke3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbH0vLyR7d2luZG93LmxvY2F0aW9uLmhvc3RuYW1lfTozMDAwYDtcclxufSkoKTtcclxuXHJcbmNvbnNvbGUubG9nKGBVc2luZyBBUEkgYmFzZSBVUkw6ICR7QVBJX0JBU0VfVVJMfWApO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0b3JhZ2UgPSB7XHJcbiAgICBoYW5kbGVBamF4RXJyb3I6ICh4aHIsIHN0YXR1c1RleHQsIGVycm9yVGhyb3duLCBjdXN0b21FcnJvck1lc3NhZ2UpID0+IHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gY3VzdG9tRXJyb3JNZXNzYWdlIHx8ICdGYWlsZWQgdG8gcGVyZm9ybSBhY3Rpb24nO1xyXG4gICAgICAgIGlmICh4aHIuc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSArPSBgLiBTZXJ2ZXIgcmVzcG9uZGVkIHdpdGggc3RhdHVzOiAke3hoci5zdGF0dXN9ICR7eGhyLnN0YXR1c1RleHR9YDtcclxuICAgICAgICB9IGVsc2UgaWYgKHN0YXR1c1RleHQpIHtcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlICs9IGAuIFN0YXR1cyB0ZXh0OiAke3N0YXR1c1RleHR9YDtcclxuICAgICAgICB9IGVsc2UgaWYgKGVycm9yVGhyb3duKSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSArPSBgLiBFcnJvcjogJHtlcnJvclRocm93bn1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBTd2FsLmZpcmUoJ0Vycm9yJywgZXJyb3JNZXNzYWdlLCAnZXJyb3InKTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiQUpBWCBFcnJvcjpcIiwgZXJyb3JNZXNzYWdlLCB4aHIpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgYWRkQ3VycmVudFN0b3J5VG9TYXZlZFN0b3JpZXM6ICgpID0+IHtcclxuICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICB0aXRsZTogJ1NhdmUgU3RvcnknLFxyXG4gICAgICAgICAgICBodG1sOiBgXHJcbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJzd2FsVGl0bGVcIiBjbGFzcz1cInN3YWwyLWlucHV0XCIgcGxhY2Vob2xkZXI9XCJTdG9yeSBUaXRsZVwiIHZhbHVlPVwiJHskKCcjc3RvcnlUaXRsZScpLnZhbCgpfVwiPlxyXG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwic3dhbEF1dGhvclwiIGNsYXNzPVwic3dhbDItaW5wdXRcIiBwbGFjZWhvbGRlcj1cIkF1dGhvclwiIHZhbHVlPVwiJHskKCcjc3RvcnlBdXRob3InKS52YWwoKX1cIj5cclxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cInN3YWxUYWdzXCIgY2xhc3M9XCJzd2FsMi1pbnB1dFwiIHBsYWNlaG9sZGVyPVwiVGFncyAoY29tbWEgc2VwYXJhdGVkKVwiIHZhbHVlPVwiJHskKCcjc3RvcnlUYWdzJykudmFsKCl9XCI+XHJcbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGlkPVwic3dhbFBhc3N3b3JkXCIgY2xhc3M9XCJzd2FsMi1pbnB1dFwiIHBsYWNlaG9sZGVyPVwiUGFzc3dvcmQgKG9wdGlvbmFsKVwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJwcmVleGlzdGluZ1RhZ3NDb250YWluZXJcIiBzdHlsZT1cInRleHQtYWxpZ246bGVmdDsgbWFyZ2luLXRvcDoxMHB4O1wiPjwvZGl2PlxyXG4gICAgICAgICAgICBgLFxyXG4gICAgICAgICAgICBkaWRPcGVuOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGltcG9ydCBhbmQgY2FsbCBsb2FkUHJlZXhpc3RpbmdUYWdzIGZyb20gZXZlbnRzLmpzXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHJlcXVpcmVzIHByb3BlciBtb2R1bGUgaGFuZGxpbmdcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9ICQoJyNwcmVleGlzdGluZ1RhZ3NDb250YWluZXInKTtcclxuICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBgJHtBUElfQkFTRV9VUkx9L2FwaS9nZXR0YWdzYCxcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICh0YWdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKCc8cD5TZWxlY3QgYSB0YWc6PC9wPicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFncy5mb3JFYWNoKHRhZyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnRuID0gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBtLTEgcHJlZXhpc3RpbmctdGFnLWJ0blwiPjwvYnV0dG9uPicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi50ZXh0KHRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSAkKCcjc3dhbFRhZ3MnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRhZ3NBcnIgPSBjdXJyZW50ID8gY3VycmVudC5zcGxpdCgnLCcpLm1hcCh0ID0+IHQudHJpbSgpKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YWdzQXJyLmluY2x1ZGVzKHRhZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3NBcnIucHVzaCh0YWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3N3YWxUYWdzJykudmFsKHRhZ3NBcnIuam9pbignLCAnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKGJ0bik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgcHJlZXhpc3RpbmcgdGFncycsIGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnU2F2ZScsXHJcbiAgICAgICAgICAgIHByZUNvbmZpcm06ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2FsVGl0bGUnKS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2FsQXV0aG9yJykudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFnczogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N3YWxUYWdzJykudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2FsUGFzc3dvcmQnKS52YWx1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzdWx0LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGZpZWxkcyBpbiB0aGUgZWRpdG9yXHJcbiAgICAgICAgICAgICAgICAkKCcjc3RvcnlUaXRsZScpLnZhbChkYXRhLnRpdGxlKTtcclxuICAgICAgICAgICAgICAgICQoJyNzdG9yeUF1dGhvcicpLnZhbChkYXRhLmF1dGhvcik7XHJcbiAgICAgICAgICAgICAgICAkKCcjc3RvcnlUYWdzJykudmFsKGRhdGEudGFncyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3J5ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3J5VGl0bGU6IGRhdGEudGl0bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RvcnlBdXRob3I6IGRhdGEuYXV0aG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0b3J5VGV4dDogJCgnI3N0b3J5VGV4dCcpLmh0bWwoKSxcclxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHN0YXRlLnZhcmlhYmxlcyxcclxuICAgICAgICAgICAgICAgICAgICBwcm9ub3VuR3JvdXBzOiBzdGF0ZS5wcm9ub3VuR3JvdXBzLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlQ291bnRzOiBzdGF0ZS52YXJpYWJsZUNvdW50cywgICBcclxuICAgICAgICAgICAgICAgICAgICBwcm9ub3VuR3JvdXBDb3VudDogc3RhdGUucHJvbm91bkdyb3VwQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tUGxhY2Vob2xkZXJzOiBzdGF0ZS5jdXN0b21QbGFjZWhvbGRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFnczogZGF0YS50YWdzID8gZGF0YS50YWdzLnNwbGl0KCcsJykubWFwKHMgPT4gcy50cmltKCkpIDogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBkYXRhLnBhc3N3b3JkICYmIGRhdGEucGFzc3dvcmQudHJpbSgpICE9PSAnJyA/IGRhdGEucGFzc3dvcmQgOiBudWxsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogYCR7QVBJX0JBU0VfVVJMfS9hcGkvc2F2ZXN0b3J5YCxcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHN0b3J5KSxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wLWVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnc3VjY2VzcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1N0b3J5IHNhdmVkIHRvIHNpdGUhJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyOiAxNTAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICh4aHIsIHN0YXR1c1RleHQsIGVycm9yVGhyb3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSA0MDkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTdG9yeSBleGlzdHMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdBIHN0b3J5IHdpdGggdGhpcyB0aXRsZSBhbHJlYWR5IGV4aXN0cy4gT3ZlcndyaXRlPycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogJ3dhcm5pbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMsIG92ZXJ3cml0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05vJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgc3Rvcnkgb2JqZWN0IHdpdGggdGhlIG92ZXJ3cml0ZSBmbGFnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdG9yeVdpdGhPdmVyd3JpdGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yeVRpdGxlOiAkKCcjc3RvcnlUaXRsZScpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcnlBdXRob3I6ICQoJyNzdG9yeUF1dGhvcicpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcnlUZXh0OiAkKCcjc3RvcnlUZXh0JykuaHRtbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiBzdGF0ZS52YXJpYWJsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ub3VuR3JvdXBzOiBzdGF0ZS5wcm9ub3VuR3JvdXBzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVDb3VudHM6IHN0YXRlLnZhcmlhYmxlQ291bnRzLCAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbm91bkdyb3VwQ291bnQ6IHN0YXRlLnByb25vdW5Hcm91cENvdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tUGxhY2Vob2xkZXJzOiBzdGF0ZS5jdXN0b21QbGFjZWhvbGRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdzOiAkKCcjc3RvcnlUYWdzJykudmFsKCkgPyAkKCcjc3RvcnlUYWdzJykudmFsKCkuc3BsaXQoJywnKS5tYXAocyA9PiBzLnRyaW0oKSkgOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXRlOiB0cnVlICAvLyBBZGQgdGhlIG92ZXJ3cml0ZSBmbGFnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBgJHtBUElfQkFTRV9VUkx9L2FwaS9zYXZlc3RvcnlgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoc3RvcnlXaXRoT3ZlcndyaXRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3AtZW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1N0b3J5IG92ZXJ3cml0dGVuIScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXI6IDE1MDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogKHhock92ZXJ3cml0ZSwgc3RhdHVzVGV4dE92ZXJ3cml0ZSwgZXJyb3JUaHJvd25PdmVyd3JpdGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlLmhhbmRsZUFqYXhFcnJvcih4aHJPdmVyd3JpdGUsIHN0YXR1c1RleHRPdmVyd3JpdGUsIGVycm9yVGhyb3duT3ZlcndyaXRlLCAnRmFpbGVkIHRvIG92ZXJ3cml0ZSBzdG9yeScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0b3JhZ2UuaGFuZGxlQWpheEVycm9yKHhociwgc3RhdHVzVGV4dCwgZXJyb3JUaHJvd24sICdGYWlsZWQgdG8gc2F2ZSBzdG9yeScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGFkZENvbXBsZXRlZFN0b3J5VG9TYXZlZFN0b3JpZXM6ICgpID0+IHtcclxuICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICB0aXRsZTogJ1NhdmUgQ29tcGxldGVkIFN0b3J5JyxcclxuICAgICAgICAgICAgaHRtbDogYFxyXG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwic3dhbFRpdGxlXCIgY2xhc3M9XCJzd2FsMi1pbnB1dFwiIHBsYWNlaG9sZGVyPVwiU3RvcnkgVGl0bGVcIiB2YWx1ZT1cIiR7JCgnI2Rpc3BsYXlUaXRsZScpLnRleHQoKX1cIj5cclxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cInN3YWxBdXRob3JcIiBjbGFzcz1cInN3YWwyLWlucHV0XCIgcGxhY2Vob2xkZXI9XCJBdXRob3JcIiB2YWx1ZT1cIiR7JCgnI2Rpc3BsYXlBdXRob3InKS50ZXh0KCl9XCI+XHJcbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJzd2FsVGFnc1wiIGNsYXNzPVwic3dhbDItaW5wdXRcIiBwbGFjZWhvbGRlcj1cIlRhZ3MgKGNvbW1hIHNlcGFyYXRlZClcIiB2YWx1ZT1cIiR7JCgnI2Rpc3BsYXlUYWdzJykudGV4dCgpfVwiPlxyXG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBpZD1cInN3YWxQYXNzd29yZFwiIGNsYXNzPVwic3dhbDItaW5wdXRcIiBwbGFjZWhvbGRlcj1cIlBhc3N3b3JkIChvcHRpb25hbClcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGlkPVwicHJlZXhpc3RpbmdUYWdzQ29udGFpbmVyXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnQ7IG1hcmdpbi10b3A6MTBweDtcIj48L2Rpdj5cclxuICAgICAgICAgICAgYCxcclxuICAgICAgICAgICAgZGlkT3BlbjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBpbXBvcnQgYW5kIGNhbGwgbG9hZFByZWV4aXN0aW5nVGFncyBmcm9tIGV2ZW50cy5qc1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyByZXF1aXJlcyBwcm9wZXIgbW9kdWxlIGhhbmRsaW5nXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSAkKCcjcHJlZXhpc3RpbmdUYWdzQ29udGFpbmVyJyk7XHJcbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogYCR7QVBJX0JBU0VfVVJMfS9hcGkvZ2V0dGFnc2AsXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiAodGFncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZCgnPHA+U2VsZWN0IGEgdGFnOjwvcD4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3MuZm9yRWFjaCh0YWcgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ0biA9ICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tb3V0bGluZS1zZWNvbmRhcnkgbS0xIHByZWV4aXN0aW5nLXRhZy1idG5cIj48L2J1dHRvbj4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4udGV4dCh0YWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjdXJyZW50ID0gJCgnI3N3YWxUYWdzJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YWdzQXJyID0gY3VycmVudCA/IGN1cnJlbnQuc3BsaXQoJywnKS5tYXAodCA9PiB0LnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFnc0Fyci5pbmNsdWRlcyh0YWcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdzQXJyLnB1c2godGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNzd2FsVGFncycpLnZhbCh0YWdzQXJyLmpvaW4oJywgJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChidG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHByZWV4aXN0aW5nIHRhZ3MnLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1NhdmUnLFxyXG4gICAgICAgICAgICBwcmVDb25maXJtOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dhbFRpdGxlJykudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dhbEF1dGhvcicpLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhZ3M6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2FsVGFncycpLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dhbFBhc3N3b3JkJykudmFsdWVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3VsdC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBkaXNwbGF5IGluIHRoZSByZXN1bHQgc2VjdGlvblxyXG4gICAgICAgICAgICAgICAgJCgnI2Rpc3BsYXlUaXRsZScpLnRleHQoZGF0YS50aXRsZSk7XHJcbiAgICAgICAgICAgICAgICAkKCcjZGlzcGxheUF1dGhvcicpLnRleHQoZGF0YS5hdXRob3IpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2Rpc3BsYXlUYWdzJykudGV4dChkYXRhLnRhZ3MpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdG9yeSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdG9yeVRpdGxlOiBkYXRhLnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0b3J5QXV0aG9yOiBkYXRhLmF1dGhvcixcclxuICAgICAgICAgICAgICAgICAgICBzdG9yeVRleHQ6IHN0YXRlLnN0b3J5VGV4dCxcclxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHN0YXRlLnZhcmlhYmxlcyxcclxuICAgICAgICAgICAgICAgICAgICBwcm9ub3VuR3JvdXBzOiBzdGF0ZS5wcm9ub3VuR3JvdXBzLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlQ291bnRzOiBzdGF0ZS52YXJpYWJsZUNvdW50cyxcclxuICAgICAgICAgICAgICAgICAgICBwcm9ub3VuR3JvdXBDb3VudDogc3RhdGUucHJvbm91bkdyb3VwQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tUGxhY2Vob2xkZXJzOiBzdGF0ZS5jdXN0b21QbGFjZWhvbGRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFnczogZGF0YS50YWdzID8gZGF0YS50YWdzLnNwbGl0KCcsJykubWFwKHMgPT4gcy50cmltKCkpIDogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBkYXRhLnBhc3N3b3JkICYmIGRhdGEucGFzc3dvcmQudHJpbSgpICE9PSAnJyA/IGRhdGEucGFzc3dvcmQgOiBudWxsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogYCR7QVBJX0JBU0VfVVJMfS9hcGkvc2F2ZXN0b3J5YCxcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHN0b3J5KSxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wLWVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnc3VjY2VzcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NvbXBsZXRlZCBzdG9yeSBzYXZlZCB0byBzaXRlIScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lcjogMTUwMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAoeGhyLCBzdGF0dXNUZXh0LCBlcnJvclRocm93bikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gNDA5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU3RvcnkgZXhpc3RzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnQSBzdG9yeSB3aXRoIHRoaXMgdGl0bGUgYWxyZWFkeSBleGlzdHMuIE92ZXJ3cml0ZT8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICd3YXJuaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnWWVzLCBvdmVyd3JpdGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICdObydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rvcnkub3ZlcndyaXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYCR7QVBJX0JBU0VfVVJMfS9hcGkvc2F2ZXN0b3J5YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHN0b3J5KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3AtZW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NvbXBsZXRlZCBzdG9yeSBvdmVyd3JpdHRlbiEnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyOiAxNTAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICh4aHJPdmVyd3JpdGUsIHN0YXR1c1RleHRPdmVyd3JpdGUsIGVycm9yVGhyb3duT3ZlcndyaXRlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZS5oYW5kbGVBamF4RXJyb3IoeGhyT3ZlcndyaXRlLCBzdGF0dXNUZXh0T3ZlcndyaXRlLCBlcnJvclRocm93bk92ZXJ3cml0ZSwgJ0ZhaWxlZCB0byBvdmVyd3JpdGUgY29tcGxldGVkIHN0b3J5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZS5oYW5kbGVBamF4RXJyb3IoeGhyLCBzdGF0dXNUZXh0LCBlcnJvclRocm93biwgJ0ZhaWxlZCB0byBzYXZlIGNvbXBsZXRlZCBzdG9yeScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGxvYWRTYXZlZFN0b3JpZXNMaXN0OiAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFnID0gJCgnI2ZpbHRlclRhZycpLnZhbCgpO1xyXG4gICAgICAgIGNvbnN0IHNvcnQgPSAkKCcjc29ydE9wdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYCR7QVBJX0JBU0VfVVJMfS9hcGkvZ2V0c3Rvcmllcz90YWc9JHtlbmNvZGVVUklDb21wb25lbnQodGFnIHx8ICcnKX0mc29ydD0ke2VuY29kZVVSSUNvbXBvbmVudChzb3J0IHx8ICdkYXRlX2Rlc2MnKX1gLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiAoc3RvcmllcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGZldGNoZWQgc3RvcmllcyBnbG9iYWxseSBmb3IgbGF0ZXIgcmVmZXJlbmNlXHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2F2ZWRTdG9yaWVzID0gc3RvcmllcztcclxuICAgICAgICAgICAgICAgIGNvbnN0ICRsaXN0Q29udGFpbmVyID0gJCgnI3NhdmVkU3Rvcmllc0xpc3QnKS5lbXB0eSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdG9yaWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRsaXN0Q29udGFpbmVyLmFwcGVuZCgnPHA+Tm8gc3RvcmllcyBzYXZlZCB5ZXQuPC9wPicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN0b3JpZXMuZm9yRWFjaCgoc3RvcnksIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZU9iaiA9IG5ldyBEYXRlKHN0b3J5LnNhdmVkQXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVTdHIgPSBkYXRlT2JqLnRvTG9jYWxlRGF0ZVN0cmluZygpICsgXCIgXCIgKyBkYXRlT2JqLnRvTG9jYWxlVGltZVN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZ3MgPSBzdG9yeS50YWdzICYmIHN0b3J5LnRhZ3MubGVuZ3RoID8gc3RvcnkudGFncy5qb2luKCcsICcpIDogJ05vIHRhZ3MnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhdGluZ0Rpc3BsYXkgPSBzdG9yeS5yYXRpbmdDb3VudCA/IGBSYXRpbmc6ICR7c3RvcnkucmF0aW5nLnRvRml4ZWQoMSl9ICgke3N0b3J5LnJhdGluZ0NvdW50fSB2b3RlcylgIDogJ05vIHJhdGluZ3MnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2tJbmRpY2F0b3IgPSBzdG9yeS5sb2NrZWQgPyBgPGkgY2xhc3M9XCJmYXMgZmEtbG9ja1wiIHRpdGxlPVwiUGFzc3dvcmQgUHJvdGVjdGVkXCI+PC9pPiBgIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9ICQoYFxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbSBwLTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4ke2xvY2tJbmRpY2F0b3J9JHtzdG9yeS5zdG9yeVRpdGxlIHx8ICdVbnRpdGxlZCd9PC9zdHJvbmc+PGJyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsPiR7c3Rvcnkuc3RvcnlBdXRob3IgfHwgJ1Vua25vd24nfSB8ICR7ZGF0ZVN0cn08L3NtYWxsPjxicj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbD4ke3RhZ3N9IHwgJHtyYXRpbmdEaXNwbGF5fTwvc21hbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnkgZWRpdFNhdmVkU3RvcnlCdG5cIiBkYXRhLWluZGV4PVwiJHtpbmRleH1cIiBhcmlhLWxhYmVsPVwiRWRpdCBTdG9yeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1lZGl0XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc3VjY2VzcyBsb2FkU2F2ZWRTdG9yeUJ0blwiIGRhdGEtaW5kZXg9XCIke2luZGV4fVwiIGFyaWEtbGFiZWw9XCJQbGF5IFN0b3J5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXBsYXlcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1kYW5nZXIgZGVsZXRlU2F2ZWRTdG9yeUJ0blwiIGRhdGEtdGl0bGU9XCIke3N0b3J5LnN0b3J5VGl0bGV9XCIgYXJpYS1sYWJlbD1cIkRlbGV0ZSBTdG9yeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS10cmFzaC1hbHRcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICBgKTtcclxuICAgICAgICAgICAgICAgICAgICAkbGlzdENvbnRhaW5lci5hcHBlbmQoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6ICh4aHIsIHN0YXR1c1RleHQsIGVycm9yVGhyb3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBTdG9yYWdlLmhhbmRsZUFqYXhFcnJvcih4aHIsIHN0YXR1c1RleHQsIGVycm9yVGhyb3duLCAnRmFpbGVkIHRvIGxvYWQgc2F2ZWQgc3RvcmllcyBsaXN0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGNyZWF0ZVNhdmVkU3RvcnlMaXN0SXRlbTogKHN0b3J5LCBpbmRleCwgZGF0ZVN0cikgPT4ge1xyXG4gICAgICAgIHJldHVybiAkKGBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbSBwLTJcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgPHN0cm9uZz4ke3N0b3J5LnN0b3J5VGl0bGUgfHwgJ1VudGl0bGVkJ308L3N0cm9uZz48YnI+XHJcbiAgICAgICAgICAgICAgICAgIDxzbWFsbD4ke3N0b3J5LnN0b3J5QXV0aG9yIHx8ICdVbmtub3duJ30gfCAke2RhdGVTdHJ9PC9zbWFsbD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeSBlZGl0U2F2ZWRTdG9yeUJ0blwiIGRhdGEtaW5kZXg9XCIke2luZGV4fVwiIGFyaWEtbGFiZWw9XCJFZGl0IFN0b3J5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZWRpdFwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zdWNjZXNzIGxvYWRTYXZlZFN0b3J5QnRuXCIgZGF0YS1pbmRleD1cIiR7aW5kZXh9XCIgYXJpYS1sYWJlbD1cIlBsYXkgU3RvcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1wbGF5XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWRhbmdlciBkZWxldGVTYXZlZFN0b3J5QnRuXCIgZGF0YS10aXRsZT1cIiR7c3Rvcnkuc3RvcnlUaXRsZX1cIiBhcmlhLWxhYmVsPVwiRGVsZXRlIFN0b3J5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdHJhc2gtYWx0XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGxvYWRTYXZlZFN0b3J5OiAoaW5kZXgsIG1vZGUgPSBcImVkaXRcIikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0b3JpZXMgPSB3aW5kb3cuc2F2ZWRTdG9yaWVzIHx8IFtdO1xyXG4gICAgICAgIGNvbnN0IHN0b3J5ID0gc3Rvcmllc1tpbmRleF07XHJcbiAgICAgICAgaWYgKCFzdG9yeSkge1xyXG4gICAgICAgICAgICBTd2FsLmZpcmUoJ0Vycm9yJywgJ1N0b3J5IG5vdCBmb3VuZC4nLCAnZXJyb3InKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBORVc6IElmIHRoZSBzdG9yeSBpcyBsb2NrZWQsIHByb21wdCBmb3IgdGhlIHBhc3N3b3JkLlxyXG4gICAgICAgIGlmIChzdG9yeS5sb2NrZWQpIHtcclxuICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnRW50ZXIgUGFzc3dvcmQnLFxyXG4gICAgICAgICAgICAgICAgaW5wdXQ6ICdwYXNzd29yZCcsXHJcbiAgICAgICAgICAgICAgICBpbnB1dFBsYWNlaG9sZGVyOiAnUGFzc3dvcmQnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGlucHV0QXR0cmlidXRlczogeyBhdXRvY2FwaXRhbGl6ZTogJ29mZicsIGF1dG9jb3JyZWN0OiAnb2ZmJyB9XHJcbiAgICAgICAgICAgIH0pLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGAke0FQSV9CQVNFX1VSTH0vYXBpL3VubG9ja3N0b3J5YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsgc3RvcnlJZDogc3RvcnkuX2lkLCBwYXNzd29yZDogcmVzdWx0LnZhbHVlIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiAodW5sb2NrZWRTdG9yeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZS5wb3B1bGF0ZUVkaXRvcldpdGhTdG9yeSh1bmxvY2tlZFN0b3J5LCBtb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmN1cnJlbnRTdG9yeUlkID0gdW5sb2NrZWRTdG9yeS5faWQgfHwgbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNkaXNwbGF5U3RvcnlJZCcpLnRleHQoc3RhdGUuY3VycmVudFN0b3J5SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHsgdG9hc3Q6IHRydWUsIHBvc2l0aW9uOiAndG9wLWVuZCcsIGljb246ICdzdWNjZXNzJywgdGl0bGU6ICdTdG9yeSBsb2FkZWQhJywgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLCB0aW1lcjogMTUwMCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICh4aHIsIHN0YXR1c1RleHQsIGVycm9yVGhyb3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlLmhhbmRsZUFqYXhFcnJvcih4aHIsIHN0YXR1c1RleHQsIGVycm9yVGhyb3duLCAnSW5jb3JyZWN0IHBhc3N3b3JkIG9yIGZhaWxlZCB0byB1bmxvY2sgc3RvcnknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBTdG9yYWdlLnBvcHVsYXRlRWRpdG9yV2l0aFN0b3J5KHN0b3J5LCBtb2RlKTtcclxuICAgICAgICAgICAgc3RhdGUuY3VycmVudFN0b3J5SWQgPSBzdG9yeS5faWQgfHwgbnVsbDtcclxuICAgICAgICAgICAgJCgnI2Rpc3BsYXlTdG9yeUlkJykudGV4dChzdGF0ZS5jdXJyZW50U3RvcnlJZCk7XHJcbiAgICAgICAgICAgIFN3YWwuZmlyZSh7IHRvYXN0OiB0cnVlLCBwb3NpdGlvbjogJ3RvcC1lbmQnLCBpY29uOiAnc3VjY2VzcycsIHRpdGxlOiAnU3RvcnkgbG9hZGVkIScsIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwgdGltZXI6IDE1MDAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBwb3B1bGF0ZUVkaXRvcldpdGhTdG9yeTogKHN0b3J5LCBtb2RlKSA9PiB7XHJcbiAgICAgICAgJCgnI3N0b3J5VGl0bGUnKS52YWwoc3Rvcnkuc3RvcnlUaXRsZSk7XHJcbiAgICAgICAgJCgnI3N0b3J5QXV0aG9yJykudmFsKHN0b3J5LnN0b3J5QXV0aG9yKTtcclxuICAgICAgICAkKCcjc3RvcnlUZXh0JykuaHRtbChkZWNvZGVIVE1MRW50aXRpZXMoc3Rvcnkuc3RvcnlUZXh0KSk7XHJcbiAgICAgICAgLy8gTkVXOiBQb3B1bGF0ZSB0YWdzIGlucHV0IGlmIGVkaXRpbmcgYSBzdG9yeS5cclxuICAgICAgICBpZiAoc3RvcnkudGFncyAmJiBzdG9yeS50YWdzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAkKCcjc3RvcnlUYWdzJykudmFsKHN0b3J5LnRhZ3Muam9pbignLCAnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFsc28gc3RvcmUgcmF0aW5nIGluZm8gaW4gYSBkaXNwbGF5IGFyZWEgKGlmIGRlc2lyZWQpXHJcbiAgICAgICAgaWYgKG1vZGUgPT09IFwicGxheVwiICYmIHN0b3J5LnJhdGluZ0NvdW50KSB7XHJcbiAgICAgICAgICAgICQoJyNyYXRpbmdTZWN0aW9uJykuc2hvdygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoJyNyYXRpbmdTZWN0aW9uJykuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS52YXJpYWJsZXMgPSBbXTtcclxuICAgICAgICBzdGF0ZS52YXJpYWJsZUNvdW50cyA9IHt9O1xyXG4gICAgICAgIHN0YXRlLmluc2VydGlvbkNvdW50ZXIgPSAwO1xyXG4gICAgICAgIHN0YXRlLmZpbGxWYWx1ZXMgPSBzdG9yeS5maWxsVmFsdWVzIHx8IHt9O1xyXG4gICAgICAgIHN0YXRlLnByb25vdW5Hcm91cHMgPSBzdG9yeS5wcm9ub3VuR3JvdXBzIHx8IHt9O1xyXG4gICAgICAgIHN0YXRlLnByb25vdW5Hcm91cENvdW50ID0gc3RvcnkucHJvbm91bkdyb3VwQ291bnQgfHwgMDtcclxuICAgICAgICBzdGF0ZS5jdXN0b21QbGFjZWhvbGRlcnMgPSBzdG9yeS5jdXN0b21QbGFjZWhvbGRlcnMgfHwgW107XHJcbiAgICAgICAgdXBkYXRlVmFyaWFibGVzRnJvbUVkaXRvcigpO1xyXG4gICAgICAgIGlmIChtb2RlID09PSBcImVkaXRcIikge1xyXG4gICAgICAgICAgICAkKCcjZWRpdG9yJykucmVtb3ZlQ2xhc3MoJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICAkKCcjaW5wdXRzLCAjcmVzdWx0JykuYWRkQ2xhc3MoJ2Qtbm9uZScpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJwbGF5XCIpIHtcclxuICAgICAgICAgICAgYnVpbGRGaWxsRm9ybSgpO1xyXG4gICAgICAgICAgICAkKCcjaW5wdXRzJykucmVtb3ZlQ2xhc3MoJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICAkKCcjZWRpdG9yLCAjcmVzdWx0JykuYWRkQ2xhc3MoJ2Qtbm9uZScpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIGRlbGV0ZVNhdmVkU3Rvcnk6ICh0aXRsZSkgPT4ge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYCR7QVBJX0JBU0VfVVJMfS9hcGkvZGVsZXRlc3RvcnlgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7IHN0b3J5VGl0bGU6IHRpdGxlIH0pLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wLWVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU3RvcnkgZGVsZXRlZCEnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lcjogMTUwMFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBTdG9yYWdlLmxvYWRTYXZlZFN0b3JpZXNMaXN0KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiAoeGhyLCBzdGF0dXNUZXh0LCBlcnJvclRocm93bikgPT4ge1xyXG4gICAgICAgICAgICAgICAgU3RvcmFnZS5oYW5kbGVBamF4RXJyb3IoeGhyLCBzdGF0dXNUZXh0LCBlcnJvclRocm93biwgJ0ZhaWxlZCB0byBkZWxldGUgc3RvcnknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59OyJdLCJuYW1lcyI6WyJzdGF0ZSIsInVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IiLCJidWlsZEZpbGxGb3JtIiwiVXRpbHMiLCJkZWNvZGVIVE1MRW50aXRpZXMiLCJBUElfQkFTRV9VUkwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwiY29uY2F0IiwicHJvdG9jb2wiLCJjb25zb2xlIiwibG9nIiwiU3RvcmFnZSIsImhhbmRsZUFqYXhFcnJvciIsInhociIsInN0YXR1c1RleHQiLCJlcnJvclRocm93biIsImN1c3RvbUVycm9yTWVzc2FnZSIsImVycm9yTWVzc2FnZSIsInN0YXR1cyIsIlN3YWwiLCJmaXJlIiwiZXJyb3IiLCJhZGRDdXJyZW50U3RvcnlUb1NhdmVkU3RvcmllcyIsInRpdGxlIiwiaHRtbCIsIiQiLCJ2YWwiLCJkaWRPcGVuIiwiY29udGFpbmVyIiwiYWpheCIsInVybCIsIm1ldGhvZCIsInN1Y2Nlc3MiLCJ0YWdzIiwiZW1wdHkiLCJsZW5ndGgiLCJhcHBlbmQiLCJmb3JFYWNoIiwidGFnIiwiYnRuIiwidGV4dCIsIm9uIiwiY3VycmVudCIsInRhZ3NBcnIiLCJzcGxpdCIsIm1hcCIsInQiLCJ0cmltIiwiZmlsdGVyIiwiQm9vbGVhbiIsImluY2x1ZGVzIiwicHVzaCIsImpvaW4iLCJlcnIiLCJzaG93Q2FuY2VsQnV0dG9uIiwiY29uZmlybUJ1dHRvblRleHQiLCJwcmVDb25maXJtIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInZhbHVlIiwiYXV0aG9yIiwicGFzc3dvcmQiLCJ0aGVuIiwicmVzdWx0IiwiaXNDb25maXJtZWQiLCJkYXRhIiwic3RvcnkiLCJzdG9yeVRpdGxlIiwic3RvcnlBdXRob3IiLCJzdG9yeVRleHQiLCJ2YXJpYWJsZXMiLCJwcm9ub3VuR3JvdXBzIiwidmFyaWFibGVDb3VudHMiLCJwcm9ub3VuR3JvdXBDb3VudCIsImN1c3RvbVBsYWNlaG9sZGVycyIsInMiLCJzYXZlZEF0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiY29udGVudFR5cGUiLCJKU09OIiwic3RyaW5naWZ5IiwidG9hc3QiLCJwb3NpdGlvbiIsImljb24iLCJzaG93Q29uZmlybUJ1dHRvbiIsInRpbWVyIiwiY2FuY2VsQnV0dG9uVGV4dCIsInN0b3J5V2l0aE92ZXJ3cml0ZSIsIm92ZXJ3cml0ZSIsInhock92ZXJ3cml0ZSIsInN0YXR1c1RleHRPdmVyd3JpdGUiLCJlcnJvclRocm93bk92ZXJ3cml0ZSIsImFkZENvbXBsZXRlZFN0b3J5VG9TYXZlZFN0b3JpZXMiLCJsb2FkU2F2ZWRTdG9yaWVzTGlzdCIsInNvcnQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzdG9yaWVzIiwic2F2ZWRTdG9yaWVzIiwiJGxpc3RDb250YWluZXIiLCJpbmRleCIsImRhdGVPYmoiLCJkYXRlU3RyIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwicmF0aW5nRGlzcGxheSIsInJhdGluZ0NvdW50IiwicmF0aW5nIiwidG9GaXhlZCIsImxvY2tJbmRpY2F0b3IiLCJsb2NrZWQiLCJpdGVtIiwiY3JlYXRlU2F2ZWRTdG9yeUxpc3RJdGVtIiwibG9hZFNhdmVkU3RvcnkiLCJtb2RlIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiaW5wdXQiLCJpbnB1dFBsYWNlaG9sZGVyIiwiaW5wdXRBdHRyaWJ1dGVzIiwiYXV0b2NhcGl0YWxpemUiLCJhdXRvY29ycmVjdCIsInN0b3J5SWQiLCJfaWQiLCJ1bmxvY2tlZFN0b3J5IiwicG9wdWxhdGVFZGl0b3JXaXRoU3RvcnkiLCJjdXJyZW50U3RvcnlJZCIsInNob3ciLCJoaWRlIiwiaW5zZXJ0aW9uQ291bnRlciIsImZpbGxWYWx1ZXMiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiZGVsZXRlU2F2ZWRTdG9yeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./public/js/data/storage.js\n");

/***/ }),

/***/ "./public/js/handlers/events.js":
/*!**************************************!*\
  !*** ./public/js/handlers/events.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initEvents: () => (/* binding */ initEvents)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _data_storage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/storage.js */ \"./public/js/data/storage.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"./public/js/utils/utils.js\");\n/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/StringUtils.js */ \"./public/js/utils/StringUtils.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/typeHelpers.js */ \"./public/js/utils/typeHelpers.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/placeholders.js */ \"./public/js/core/placeholders.js\");\n/* harmony import */ var _ui_forms_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ui/forms.js */ \"./public/js/ui/forms.js\");\n/* harmony import */ var _core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/storyProcessor.js */ \"./public/js/core/storyProcessor.js\");\n/* harmony import */ var _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/domUtils.js */ \"./public/js/utils/domUtils.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _ui_notifications_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/notifications.js */ \"./public/js/ui/notifications.js\");\n// public/js/handlers/events.js\n\n\n\n\n\n\n\n\n\n // Ensure Swal is imported if used\n\n\n// Handle placeholder button click\nvar handlePlaceholderClick = function handlePlaceholderClick(internalType, displayName) {\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder && _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable) {\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateExistingPlaceholder)(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable, internalType, displayName);\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder = false;\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = null;\n    $('#placeholderModal').modal('hide');\n  } else {\n    if (internalType === \"PRONOUN\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.pickPronounFormAndGroup)();\n      $('#placeholderSearch').val('');\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n      return;\n    }\n    if (internalType.startsWith(\"NN\")) {\n      if (internalType === \"NN_Person\") {\n        (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showPersonTypeSelection)(internalType, displayName);\n        $('#placeholderSearch').val('');\n        (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n        return;\n      }\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection)(internalType, displayName);\n      $('#placeholderSearch').val('');\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n      return;\n    }\n    if (internalType.startsWith(\"VB\") || internalType === \"MD\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection)(internalType, displayName);\n      $('#placeholderSearch').val('');\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n      return;\n    }\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.insertPlaceholder)(internalType, displayName, false);\n    $('#placeholderSearch').val('');\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n  }\n};\n\n// Handle create new story button click\nvar handleCreateNewStory = function handleCreateNewStory(e) {\n  e.preventDefault();\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges) {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Unsaved changes',\n      text: 'Your story has unsaved changes. Would you like to save it to the site before starting a new one?',\n      showDenyButton: true,\n      confirmButtonText: 'Save and start new',\n      denyButtonText: 'Discard changes'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.addCurrentStoryToSavedStories();\n        setTimeout(_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState, 1000);\n      } else if (result.isDenied) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n          title: 'Are you sure?',\n          text: 'This will discard your current unsaved story.',\n          confirmButtonText: 'Yes, start new'\n        }).then(function (res) {\n          if (res.isConfirmed) (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState)();\n        });\n      }\n    });\n  } else {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Are you sure?',\n      text: 'This will discard your current story.',\n      confirmButtonText: 'Yes, start new'\n    }).then(function (res) {\n      if (res.isConfirmed) (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState)();\n    });\n  }\n};\n\n// Handle generate story button click\nvar handleGenerateStory = function handleGenerateStory() {\n  // Use the form validation function from forms.js\n  if (!(0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.validateInputForm)()) {\n    return; // Validation failed\n  }\n\n  // Collect values from the input form\n  var inputForm = document.getElementById('inputForm');\n  var inputs = inputForm.querySelectorAll('input[type=\"text\"]');\n\n  // Reset fillValues\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = {};\n\n  // Populate fillValues with the values from the input fields\n  inputs.forEach(function (input) {\n    var id = input.getAttribute('data-id');\n    if (id && input.value.trim() !== '') {\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues[id] = input.value.trim();\n      console.log(\"Collected input value for \".concat(id, \": \\\"\").concat(input.value.trim(), \"\\\"\"));\n    }\n  });\n\n  // Generate the final story with replacements\n  var _final = (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.generateLegacyText)();\n  _final = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.fillPlaceholders)(_final, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups);\n\n  // Update the result display\n  $('#finalStory').text(_final);\n  $('#displayTitle').text($('#storyTitle').val());\n  $('#displayAuthor').text($('#storyAuthor').val());\n  $('#displayTags').text($('#storyTags').val());\n  $('#result').removeClass('d-none');\n  $('#inputs').addClass('d-none');\n};\n\n// Handle save story to site button\nvar handleSaveStoryToSite = function handleSaveStoryToSite() {\n  sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n    title: 'Save Story',\n    html: \"\\n          <input type=\\\"text\\\" id=\\\"swalTitle\\\" class=\\\"swal2-input\\\" placeholder=\\\"Story Title\\\" value=\\\"\".concat($('#storyTitle').val(), \"\\\">\\n          <input type=\\\"text\\\" id=\\\"swalAuthor\\\" class=\\\"swal2-input\\\" placeholder=\\\"Author\\\" value=\\\"\").concat($('#storyAuthor').val(), \"\\\">\\n          <input type=\\\"text\\\" id=\\\"swalTags\\\" class=\\\"swal2-input\\\" placeholder=\\\"Tags (comma separated)\\\" value=\\\"\").concat($('#storyTags').val(), \"\\\">\\n          <input type=\\\"password\\\" id=\\\"swalPassword\\\" class=\\\"swal2-input\\\" placeholder=\\\"Password (optional)\\\">\\n          <div id=\\\"preexistingTagsContainer\\\" style=\\\"text-align:left; margin-top:10px;\\\"></div>\\n        \"),\n    didOpen: function didOpen() {\n      loadPreexistingTags();\n    },\n    showCancelButton: true,\n    confirmButtonText: 'Save',\n    preConfirm: function preConfirm() {\n      return {\n        title: document.getElementById('swalTitle').value,\n        author: document.getElementById('swalAuthor').value,\n        tags: document.getElementById('swalTags').value,\n        password: document.getElementById('swalPassword').value\n      };\n    }\n  }).then(function (result) {\n    if (result.isConfirmed) {\n      var data = result.value;\n      // Update fields in the editor\n      $('#storyTitle').val(data.title);\n      $('#storyAuthor').val(data.author);\n      $('#storyTags').val(data.tags);\n      var story = {\n        storyTitle: data.title,\n        storyAuthor: data.author,\n        storyText: $('#storyText').html(),\n        variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n        pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups,\n        variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts,\n        pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount,\n        customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders,\n        tags: data.tags ? data.tags.split(',').map(function (s) {\n          return s.trim();\n        }) : [],\n        savedAt: new Date().toISOString(),\n        password: data.password && data.password.trim() !== '' ? data.password : null\n      };\n      $.ajax({\n        url: '/api/savestory',\n        method: 'POST',\n        contentType: 'application/json',\n        data: JSON.stringify(story),\n        success: function success() {\n          sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n            toast: true,\n            position: 'top-end',\n            icon: 'success',\n            title: 'Story saved to site!',\n            showConfirmButton: false,\n            timer: 1500\n          });\n        },\n        error: function error(xhr, statusText, errorThrown) {\n          if (xhr.status === 409) {\n            sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n              title: 'Story exists',\n              text: 'A story with this title already exists. Overwrite?',\n              icon: 'warning',\n              showCancelButton: true,\n              confirmButtonText: 'Yes, overwrite',\n              cancelButtonText: 'No'\n            }).then(function (result) {\n              if (result.isConfirmed) {\n                story.overwrite = true;\n                $.ajax({\n                  url: '/api/savestory',\n                  method: 'POST',\n                  contentType: 'application/json',\n                  data: JSON.stringify(story),\n                  success: function success() {\n                    sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n                      toast: true,\n                      position: 'top-end',\n                      icon: 'success',\n                      title: 'Story overwritten!',\n                      showConfirmButton: false,\n                      timer: 1500\n                    });\n                  },\n                  error: function error(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite) {\n                    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.handleAjaxError(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite, 'Failed to overwrite story');\n                  }\n                });\n              }\n            });\n          } else {\n            _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to save story');\n          }\n        }\n      });\n    }\n  });\n};\n\n// Load preexisting tags for tag selector\nvar loadPreexistingTags = function loadPreexistingTags() {\n  $.ajax({\n    url: '/api/gettags',\n    method: 'GET',\n    success: function success(tags) {\n      var container = $('#preexistingTagsContainer');\n      container.empty();\n      if (tags.length > 0) {\n        container.append('<p>Select a tag:</p>');\n        tags.forEach(function (tag) {\n          var btn = $('<button type=\"button\" class=\"btn btn-sm btn-outline-secondary m-1 preexisting-tag-btn\"></button>');\n          btn.text(tag);\n          btn.on('click', function () {\n            var current = $('#swalTags').val();\n            var tagsArr = current ? current.split(',').map(function (t) {\n              return t.trim();\n            }).filter(Boolean) : [];\n            if (!tagsArr.includes(tag)) {\n              tagsArr.push(tag);\n              $('#swalTags').val(tagsArr.join(', '));\n            }\n          });\n          container.append(btn);\n        });\n      }\n    },\n    error: function error(err) {\n      console.error('Failed to load preexisting tags', err);\n    }\n  });\n};\n\n// Attach all event handlers\nvar initEvents = function initEvents() {\n  // Placeholder button click handler\n  $(document).on('click', '.placeholder-btn', function () {\n    var internalType = $(this).data('internal');\n    var displayName = $(this).data('display');\n    handlePlaceholderClick(internalType, displayName);\n  });\n\n  // Fill info icon click handler\n  $(document).on('click', '.fill-info-icon', function (e) {\n    e.stopPropagation();\n    var type = $(e.currentTarget).data('type');\n    var tooltip = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_4__.TypeHelpers.getTooltipForType(type);\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast(tooltip, 'info');\n  });\n\n  // Add accordion info icon click handler\n  $(document).on('click', '.accordion-info-icon', function (e) {\n    e.stopPropagation();\n    var tooltip = $(e.currentTarget).data('tooltip');\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast(tooltip, 'info');\n  });\n\n  // Show more toggle event handler\n  $(document).on('click', '.show-more-toggle', function () {\n    var parentList = $(this).closest('.list-group');\n    var hiddenItems = parentList.find('.secondary-placeholder-wrapper .secondary-placeholder');\n    var link = $(this);\n    link.text(link.text() === 'Show More' ? 'Show Less' : 'Show More');\n    hiddenItems.toggle();\n  });\n\n  // Add copy to clipboard handler\n  $('#copyStory').on('click', function () {\n    var finalText = $('#finalStory').text();\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.copyToClipboard(finalText);\n  });\n\n  // Selection changes\n  document.addEventListener('selectionchange', function () {\n    var editor = document.getElementById(\"storyText\");\n    var sel = window.getSelection();\n    if (sel.rangeCount > 0 && editor.contains(sel.anchorNode)) {\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = sel.getRangeAt(0);\n    }\n  });\n\n  // Attach search handlers with a reduced debounce delay (50ms)\n  $('#placeholderSearch').on('input', _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.Utils.debounce(function () {\n    var searchVal = $(this).val();\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', searchVal);\n    $('#addCustomPlaceholderBtn').text('Add \"' + searchVal + '\"');\n  }, 50));\n  $('#modalPlaceholderSearch').on('input', _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.Utils.debounce(function () {\n    var searchVal = $(this).val();\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', searchVal);\n    $('#modalAddCustomPlaceholderBtn').text('Add \"' + searchVal + '\"');\n  }, 50));\n\n  // Init accordions\n  (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n  (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n\n  // Filter tag input handler\n  $('#filterTag').on('input', _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.Utils.debounce(function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n  }, 300));\n\n  // Sort option change handler\n  $('#sortOption').on('change', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n  });\n\n  // Alphabetical order button\n  $('#alphabeticalOrderBtn').on('click', function () {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillOrder = 'alphabetical';\n    $(this).removeClass('btn-outline-secondary').addClass('btn-outline-primary');\n    $('#randomOrderBtn').removeClass('btn-outline-primary').addClass('btn-outline-secondary');\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n  });\n\n  // Random order button\n  $('#randomOrderBtn').on('click', function () {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillOrder = 'random';\n    $(this).removeClass('btn-outline-secondary').addClass('btn-outline-primary');\n    $('#alphabeticalOrderBtn').removeClass('btn-outline-primary').addClass('btn-outline-secondary');\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n  });\n\n  // Tag autocomplete\n  $(\"#filterTag\").autocomplete({\n    source: function source(request, response) {\n      $.ajax({\n        url: '/api/gettags',\n        method: 'GET',\n        dataType: 'json',\n        success: function success(tags) {\n          var filteredTags = $.ui.autocomplete.filter(tags, request.term);\n          response(filteredTags);\n        },\n        error: function error(err) {\n          console.error('Failed to load tags for autocomplete', err);\n          response([]);\n        }\n      });\n    },\n    minLength: 1,\n    select: function select(event, ui) {\n      $(\"#filterTag\").val(ui.item.value);\n      $(\"#applyFilters\").click();\n      return false;\n    }\n  });\n\n  // Apply filters button\n  $('#applyFilters').on('click', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n  });\n\n  // Share story button\n  $('#shareStory').on('click', function () {\n    var finalText = $('#finalStory').text();\n    var title = $('#displayTitle').text();\n    var author = $('#displayAuthor').text();\n    var content = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.formatStoryForExport)(title, author, finalText);\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.copyToClipboard(content).then(function (success) {\n      if (success) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast('Story copied to clipboard!');\n      } else {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showError('Copy Failed', 'Failed to copy story. Please copy manually.');\n      }\n    });\n  });\n\n  // Story editor input event\n  $('#storyText').on('input', function () {\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges = true;\n  });\n\n  // Upload story button\n  $('#uploadStoryBtn').on('click', function () {\n    $('#uploadStory').click();\n  });\n  $('#uploadStory').on('change', function () {\n    var file = this.files[0];\n    if (!file) return;\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      var content = e.target.result;\n      var storyData = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.parseStoryFile)(content);\n      $('#storyTitle').val(storyData.title);\n      $('#storyAuthor').val(storyData.author);\n      $('#storyText').html(storyData.content);\n\n      // Reset state\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = [];\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = {};\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter = 0;\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount = 0;\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups = {};\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = {};\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders = [];\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n    };\n    reader.readAsText(file);\n  });\n\n  // Start game button\n  $('#startGame').on('click', function () {\n    var content = $('#storyText').html();\n    if (!content.trim()) {\n      _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showError('Empty Story', 'Please write a story before continuing.');\n      return;\n    }\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyText = (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.generateLegacyText)();\n    if (!_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.length) {\n      _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showError('No Placeholders', 'No placeholders found in the story.');\n      return;\n    }\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n    $('#inputs').removeClass('d-none');\n    $('#editor').addClass('d-none');\n  });\n\n  // Generate story button\n  $('#generateStory').on('click', handleGenerateStory);\n\n  // Create new story buttons\n  $('#createNewStory2, #createNewStory').on('click', handleCreateNewStory);\n\n  // Story editing flow buttons\n  $('#editStoryEntries').on('click', function () {\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n    $('#result').addClass('d-none');\n    $('#inputs').removeClass('d-none');\n  });\n  $('#backToEditor, #backToEditor2').on('click', function () {\n    $('#result, #inputs').addClass('d-none');\n    $('#editor').removeClass('d-none');\n  });\n\n  // Save story to site button\n  $('#saveStoryToSite').on('click', handleSaveStoryToSite);\n\n  // Download story button\n  $('#downloadStory').on('click', function () {\n    var finalText = $('#finalStory').text();\n    var title = $('#displayTitle').text();\n    var author = $('#displayAuthor').text();\n    var content = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.formatStoryForExport)(title, author, finalText);\n    var fileName = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.createFilenameFromTitle)(title);\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.downloadTextFile(content, fileName);\n  });\n\n  // Save completed story button\n  $('#saveCompletedStory').on('click', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.addCompletedStoryToSavedStories();\n  });\n\n  // Saved stories buttons\n  $('#mySavedStoriesBtn').on('click', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n    $('#savedStoriesModal').modal('show');\n  });\n  $(document).on('click', '.loadSavedStoryBtn', function () {\n    var index = $(this).data('index');\n    $('#savedStoriesModal').modal('hide');\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStory(index, \"play\");\n  });\n  $(document).on('click', '.editSavedStoryBtn', function () {\n    var index = $(this).data('index');\n    $('#savedStoriesModal').modal('hide');\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStory(index, \"edit\");\n  });\n  $(document).on('click', '.deleteSavedStoryBtn', function () {\n    var title = $(this).data('title');\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Delete Story?',\n      text: 'Are you sure you want to delete this saved story?',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(function (result) {\n      if (result.isConfirmed) _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.deleteSavedStory(title);\n    });\n  });\n\n  // Rating submission\n  $('#submitRating').on('click', function () {\n    var rating = parseInt($('#storyRating').val(), 10);\n    if (!_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId) {\n      _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showError('Error', 'Story ID not found.');\n      return;\n    }\n    $.ajax({\n      url: '/api/rateStory',\n      method: 'POST',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        storyId: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId,\n        rating: rating\n      }),\n      success: function success(data) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast(\"Thank you for rating! New average: \".concat(data.rating.toFixed(1), \" (\").concat(data.ratingCount, \" votes)\"));\n      },\n      error: function error(xhr, statusText, errorThrown) {\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to rate story');\n      }\n    });\n  });\n\n  // Editor key handling for placeholders\n  $('#storyText').on('keydown', function (e) {\n    var sel = window.getSelection();\n    if (sel.rangeCount) {\n      var range = sel.getRangeAt(0);\n      if (e.key === \"ArrowRight\") {\n        var node = sel.anchorNode;\n        if (node.nodeType === Node.TEXT_NODE && node.parentNode.classList.contains('placeholder')) {\n          if (sel.anchorOffset >= node.nodeValue.length) {\n            e.preventDefault();\n            var placeholder = node.parentNode;\n            var newRange = document.createRange();\n            newRange.setStartAfter(placeholder);\n            newRange.collapse(true);\n            sel.removeAllRanges();\n            sel.addRange(newRange);\n          }\n        }\n      }\n      if (e.key === \"Backspace\") {\n        var _node = sel.anchorNode;\n        if (_node.nodeType === Node.TEXT_NODE && _node.parentNode.classList.contains('placeholder') && sel.anchorOffset === 0) {\n          e.preventDefault();\n          var _placeholder = _node.parentNode;\n          var _newRange = document.createRange();\n          _newRange.setStartBefore(_placeholder);\n          _newRange.collapse(true);\n          sel.removeAllRanges();\n          sel.addRange(_newRange);\n        }\n      }\n    }\n  });\n\n  // Add placeholder button\n  $('#addPlaceholderBtn').on('click', function () {\n    $('#placeholderModal').modal('show');\n  });\n\n  // Click handler for existing placeholders\n  document.getElementById('existingPlaceholdersContainer').addEventListener('click', function (e) {\n    var btn = e.target.closest('.placeholder-item');\n    if (!btn) return;\n    var id = btn.getAttribute('data-id');\n    var variable = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.find(function (v) {\n      return v.id === id;\n    });\n    if (variable) (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.duplicatePlaceholder)(variable);\n  });\n\n  // Add custom placeholder button\n  $('#addCustomPlaceholderBtn').on('click', function () {\n    var raw = $('#placeholderSearch').val();\n    var usage = $('input[name=\"customPlaceholderType\"]:checked').val() || \"generic\";\n    if (usage === \"noun\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"noun\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection)(\"NN_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else if (usage === \"verb\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"verb\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection)(\"VB_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw);\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.insertPlaceholderFromCustom)(raw);\n    }\n    $('#placeholderSearch').val('');\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n  });\n\n  // Modal add custom placeholder button\n  $('#modalAddCustomPlaceholderBtn').on('click', function () {\n    var raw = $('#modalPlaceholderSearch').val();\n    var usage = $('input[name=\"modalCustomPlaceholderType\"]:checked').val() || \"generic\";\n    if (usage === \"noun\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"noun\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection)(\"NN_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else if (usage === \"verb\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"verb\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection)(\"VB_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw);\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.insertPlaceholderFromCustom)(raw);\n    }\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n    $('#placeholderModal').modal('hide');\n    $('#modalPlaceholderSearch').val('');\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n  });\n\n  // Search modal placeholder input\n  $('#modalPlaceholderSearchInput').on('input', function () {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch = $(this).val().trim().toLowerCase();\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n  });\n\n  // The remaining initialization code follows\n  // ... existing code ...\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LHNEQUFLLENBQUNxSyw2QkFBNkIsQ0FBQztFQUNwSCxDQUFDLENBQUM7O0VBRUY7RUFDQXBJLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDZ0csRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZO0lBQ3REakksc0RBQUssQ0FBQ3FLLDZCQUE2QixHQUFHcEksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDZ0MsSUFBSSxDQUFDLENBQUMsQ0FBQ2lLLFdBQVcsQ0FBQyxDQUFDO0lBQ3hFL04saUZBQTBCLENBQUMsNEJBQTRCLEVBQUUsaUJBQWlCLEVBQUVMLHNEQUFLLENBQUNxSyw2QkFBNkIsQ0FBQztFQUNwSCxDQUFDLENBQUM7O0VBRUY7RUFDQTtBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFua2Jvb2svLi9wdWJsaWMvanMvaGFuZGxlcnMvZXZlbnRzLmpzPzFlY2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcHVibGljL2pzL2hhbmRsZXJzL2V2ZW50cy5qc1xyXG5pbXBvcnQgc3RhdGUgZnJvbSAnLi4vY29yZS9zdGF0ZS5qcyc7XHJcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICcuLi9kYXRhL3N0b3JhZ2UuanMnO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzLmpzJztcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tICcuLi91dGlscy9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCB7IFR5cGVIZWxwZXJzIH0gZnJvbSAnLi4vdXRpbHMvdHlwZUhlbHBlcnMuanMnO1xyXG5pbXBvcnQgeyBcclxuICAgIHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uLCBcclxuICAgIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IsIFxyXG4gICAgZ2VuZXJhdGVMZWdhY3lUZXh0LFxyXG4gICAgYWRkQ3VzdG9tUGxhY2Vob2xkZXIsXHJcbiAgICBzaG93Tm91bk51bWJlclNlbGVjdGlvbixcclxuICAgIHNob3dWZXJiVGVuc2VTZWxlY3Rpb24sXHJcbiAgICBpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b20sXHJcbiAgICBwaWNrUHJvbm91bkZvcm1BbmRHcm91cCxcclxuICAgIHVwZGF0ZVZhcmlhYmxlc0xpc3QsXHJcbiAgICBkdXBsaWNhdGVQbGFjZWhvbGRlcixcclxuICAgIHVwZGF0ZUV4aXN0aW5nUGxhY2Vob2xkZXIsXHJcbiAgICBpbnNlcnRQbGFjZWhvbGRlcixcclxuICAgIHNob3dQZXJzb25UeXBlU2VsZWN0aW9uXHJcbn0gZnJvbSAnLi4vY29yZS9wbGFjZWhvbGRlcnMuanMnO1xyXG5pbXBvcnQgeyBidWlsZEZpbGxGb3JtLCB2YWxpZGF0ZUlucHV0Rm9ybSB9IGZyb20gJy4uL3VpL2Zvcm1zLmpzJztcclxuaW1wb3J0IHsgXHJcbiAgICBmaWxsUGxhY2Vob2xkZXJzLCBcclxuICAgIHBhcnNlU3RvcnlGaWxlLCBcclxuICAgIGZvcm1hdFN0b3J5Rm9yRXhwb3J0LCBcclxuICAgIGNyZWF0ZUZpbGVuYW1lRnJvbVRpdGxlLFxyXG4gICAgcmVzZXRTdG9yeVN0YXRlXHJcbn0gZnJvbSAnLi4vY29yZS9zdG9yeVByb2Nlc3Nvci5qcyc7XHJcbmltcG9ydCAqIGFzIGRvbVV0aWxzIGZyb20gJy4uL3V0aWxzL2RvbVV0aWxzLmpzJztcclxuaW1wb3J0IFN3YWwgZnJvbSAnc3dlZXRhbGVydDInOyAvLyBFbnN1cmUgU3dhbCBpcyBpbXBvcnRlZCBpZiB1c2VkXHJcbmltcG9ydCB7IHNob3dUb2FzdCB9IGZyb20gJy4uL3VpL25vdGlmaWNhdGlvbnMuanMnO1xyXG5cclxuLy8gSGFuZGxlIHBsYWNlaG9sZGVyIGJ1dHRvbiBjbGlja1xyXG5jb25zdCBoYW5kbGVQbGFjZWhvbGRlckNsaWNrID0gKGludGVybmFsVHlwZSwgZGlzcGxheU5hbWUpID0+IHtcclxuICAgIGlmIChzdGF0ZS5pc0VkaXRpbmdQbGFjZWhvbGRlciAmJiBzdGF0ZS5jdXJyZW50RWRpdGluZ1ZhcmlhYmxlKSB7XHJcbiAgICAgICAgdXBkYXRlRXhpc3RpbmdQbGFjZWhvbGRlcihzdGF0ZS5jdXJyZW50RWRpdGluZ1ZhcmlhYmxlLCBpbnRlcm5hbFR5cGUsIGRpc3BsYXlOYW1lKTtcclxuICAgICAgICBzdGF0ZS5pc0VkaXRpbmdQbGFjZWhvbGRlciA9IGZhbHNlO1xyXG4gICAgICAgIHN0YXRlLmN1cnJlbnRFZGl0aW5nVmFyaWFibGUgPSBudWxsO1xyXG4gICAgICAgICQoJyNwbGFjZWhvbGRlck1vZGFsJykubW9kYWwoJ2hpZGUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGludGVybmFsVHlwZSA9PT0gXCJQUk9OT1VOXCIpIHtcclxuICAgICAgICAgICAgcGlja1Byb25vdW5Gb3JtQW5kR3JvdXAoKTtcclxuICAgICAgICAgICAgJCgnI3BsYWNlaG9sZGVyU2VhcmNoJykudmFsKCcnKTtcclxuICAgICAgICAgICAgdXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24oJyNwbGFjZWhvbGRlckFjY29yZGlvbicsICcjbm9SZXN1bHRzJywgc3RhdGUuY3VycmVudFBsYWNlaG9sZGVyU2VhcmNoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW50ZXJuYWxUeXBlLnN0YXJ0c1dpdGgoXCJOTlwiKSkge1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJuYWxUeXBlID09PSBcIk5OX1BlcnNvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBzaG93UGVyc29uVHlwZVNlbGVjdGlvbihpbnRlcm5hbFR5cGUsIGRpc3BsYXlOYW1lKTtcclxuICAgICAgICAgICAgICAgICQoJyNwbGFjZWhvbGRlclNlYXJjaCcpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI3BsYWNlaG9sZGVyQWNjb3JkaW9uJywgJyNub1Jlc3VsdHMnLCBzdGF0ZS5jdXJyZW50UGxhY2Vob2xkZXJTZWFyY2gpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNob3dOb3VuTnVtYmVyU2VsZWN0aW9uKGludGVybmFsVHlwZSwgZGlzcGxheU5hbWUpO1xyXG4gICAgICAgICAgICAkKCcjcGxhY2Vob2xkZXJTZWFyY2gnKS52YWwoJycpO1xyXG4gICAgICAgICAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI3BsYWNlaG9sZGVyQWNjb3JkaW9uJywgJyNub1Jlc3VsdHMnLCBzdGF0ZS5jdXJyZW50UGxhY2Vob2xkZXJTZWFyY2gpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW50ZXJuYWxUeXBlLnN0YXJ0c1dpdGgoXCJWQlwiKSB8fCBpbnRlcm5hbFR5cGUgPT09IFwiTURcIikge1xyXG4gICAgICAgICAgICBzaG93VmVyYlRlbnNlU2VsZWN0aW9uKGludGVybmFsVHlwZSwgZGlzcGxheU5hbWUpO1xyXG4gICAgICAgICAgICAkKCcjcGxhY2Vob2xkZXJTZWFyY2gnKS52YWwoJycpO1xyXG4gICAgICAgICAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI3BsYWNlaG9sZGVyQWNjb3JkaW9uJywgJyNub1Jlc3VsdHMnLCBzdGF0ZS5jdXJyZW50UGxhY2Vob2xkZXJTZWFyY2gpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc2VydFBsYWNlaG9sZGVyKGludGVybmFsVHlwZSwgZGlzcGxheU5hbWUsIGZhbHNlKTtcclxuICAgICAgICAkKCcjcGxhY2Vob2xkZXJTZWFyY2gnKS52YWwoJycpO1xyXG4gICAgICAgIHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uKCcjcGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI25vUmVzdWx0cycsIHN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlclNlYXJjaCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vLyBIYW5kbGUgY3JlYXRlIG5ldyBzdG9yeSBidXR0b24gY2xpY2tcclxuY29uc3QgaGFuZGxlQ3JlYXRlTmV3U3RvcnkgPSAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYgKHN0YXRlLnN0b3J5SGFzVW5zYXZlZENoYW5nZXMpIHtcclxuICAgICAgICBkb21VdGlscy5jb25maXJtRGlhbG9nKHtcclxuICAgICAgICAgICAgdGl0bGU6ICdVbnNhdmVkIGNoYW5nZXMnLFxyXG4gICAgICAgICAgICB0ZXh0OiAnWW91ciBzdG9yeSBoYXMgdW5zYXZlZCBjaGFuZ2VzLiBXb3VsZCB5b3UgbGlrZSB0byBzYXZlIGl0IHRvIHRoZSBzaXRlIGJlZm9yZSBzdGFydGluZyBhIG5ldyBvbmU/JyxcclxuICAgICAgICAgICAgc2hvd0RlbnlCdXR0b246IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnU2F2ZSBhbmQgc3RhcnQgbmV3JyxcclxuICAgICAgICAgICAgZGVueUJ1dHRvblRleHQ6ICdEaXNjYXJkIGNoYW5nZXMnXHJcbiAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHtcclxuICAgICAgICAgICAgICAgIFN0b3JhZ2UuYWRkQ3VycmVudFN0b3J5VG9TYXZlZFN0b3JpZXMoKTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQocmVzZXRTdG9yeVN0YXRlLCAxMDAwKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuaXNEZW5pZWQpIHtcclxuICAgICAgICAgICAgICAgIGRvbVV0aWxzLmNvbmZpcm1EaWFsb2coe1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQXJlIHlvdSBzdXJlPycsXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1RoaXMgd2lsbCBkaXNjYXJkIHlvdXIgY3VycmVudCB1bnNhdmVkIHN0b3J5LicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMsIHN0YXJ0IG5ldydcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMuaXNDb25maXJtZWQpIHJlc2V0U3RvcnlTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZG9tVXRpbHMuY29uZmlybURpYWxvZyh7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnQXJlIHlvdSBzdXJlPycsXHJcbiAgICAgICAgICAgIHRleHQ6ICdUaGlzIHdpbGwgZGlzY2FyZCB5b3VyIGN1cnJlbnQgc3RvcnkuJyxcclxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMsIHN0YXJ0IG5ldydcclxuICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlcy5pc0NvbmZpcm1lZCkgcmVzZXRTdG9yeVN0YXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vLyBIYW5kbGUgZ2VuZXJhdGUgc3RvcnkgYnV0dG9uIGNsaWNrXHJcbmNvbnN0IGhhbmRsZUdlbmVyYXRlU3RvcnkgPSAoKSA9PiB7XHJcbiAgICAvLyBVc2UgdGhlIGZvcm0gdmFsaWRhdGlvbiBmdW5jdGlvbiBmcm9tIGZvcm1zLmpzXHJcbiAgICBpZiAoIXZhbGlkYXRlSW5wdXRGb3JtKCkpIHtcclxuICAgICAgICByZXR1cm47IC8vIFZhbGlkYXRpb24gZmFpbGVkXHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENvbGxlY3QgdmFsdWVzIGZyb20gdGhlIGlucHV0IGZvcm1cclxuICAgIGNvbnN0IGlucHV0Rm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dEZvcm0nKTtcclxuICAgIGNvbnN0IGlucHV0cyA9IGlucHV0Rm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPVwidGV4dFwiXScpO1xyXG4gICAgXHJcbiAgICAvLyBSZXNldCBmaWxsVmFsdWVzXHJcbiAgICBzdGF0ZS5maWxsVmFsdWVzID0ge307XHJcbiAgICBcclxuICAgIC8vIFBvcHVsYXRlIGZpbGxWYWx1ZXMgd2l0aCB0aGUgdmFsdWVzIGZyb20gdGhlIGlucHV0IGZpZWxkc1xyXG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlkID0gaW5wdXQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XHJcbiAgICAgICAgaWYgKGlkICYmIGlucHV0LnZhbHVlLnRyaW0oKSAhPT0gJycpIHtcclxuICAgICAgICAgICAgc3RhdGUuZmlsbFZhbHVlc1tpZF0gPSBpbnB1dC52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDb2xsZWN0ZWQgaW5wdXQgdmFsdWUgZm9yICR7aWR9OiBcIiR7aW5wdXQudmFsdWUudHJpbSgpfVwiYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIEdlbmVyYXRlIHRoZSBmaW5hbCBzdG9yeSB3aXRoIHJlcGxhY2VtZW50c1xyXG4gICAgbGV0IGZpbmFsID0gZ2VuZXJhdGVMZWdhY3lUZXh0KCk7XHJcbiAgICBmaW5hbCA9IGZpbGxQbGFjZWhvbGRlcnMoZmluYWwsIHN0YXRlLnZhcmlhYmxlcywgc3RhdGUuZmlsbFZhbHVlcywgc3RhdGUucHJvbm91bkdyb3Vwcyk7XHJcbiAgICBcclxuICAgIC8vIFVwZGF0ZSB0aGUgcmVzdWx0IGRpc3BsYXlcclxuICAgICQoJyNmaW5hbFN0b3J5JykudGV4dChmaW5hbCk7XHJcbiAgICAkKCcjZGlzcGxheVRpdGxlJykudGV4dCgkKCcjc3RvcnlUaXRsZScpLnZhbCgpKTtcclxuICAgICQoJyNkaXNwbGF5QXV0aG9yJykudGV4dCgkKCcjc3RvcnlBdXRob3InKS52YWwoKSk7XHJcbiAgICAkKCcjZGlzcGxheVRhZ3MnKS50ZXh0KCQoJyNzdG9yeVRhZ3MnKS52YWwoKSk7XHJcbiAgICAkKCcjcmVzdWx0JykucmVtb3ZlQ2xhc3MoJ2Qtbm9uZScpO1xyXG4gICAgJCgnI2lucHV0cycpLmFkZENsYXNzKCdkLW5vbmUnKTtcclxufTtcclxuXHJcbi8vIEhhbmRsZSBzYXZlIHN0b3J5IHRvIHNpdGUgYnV0dG9uXHJcbmNvbnN0IGhhbmRsZVNhdmVTdG9yeVRvU2l0ZSA9ICgpID0+IHtcclxuICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgdGl0bGU6ICdTYXZlIFN0b3J5JyxcclxuICAgICAgICBodG1sOiBgXHJcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cInN3YWxUaXRsZVwiIGNsYXNzPVwic3dhbDItaW5wdXRcIiBwbGFjZWhvbGRlcj1cIlN0b3J5IFRpdGxlXCIgdmFsdWU9XCIkeyQoJyNzdG9yeVRpdGxlJykudmFsKCl9XCI+XHJcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cInN3YWxBdXRob3JcIiBjbGFzcz1cInN3YWwyLWlucHV0XCIgcGxhY2Vob2xkZXI9XCJBdXRob3JcIiB2YWx1ZT1cIiR7JCgnI3N0b3J5QXV0aG9yJykudmFsKCl9XCI+XHJcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cInN3YWxUYWdzXCIgY2xhc3M9XCJzd2FsMi1pbnB1dFwiIHBsYWNlaG9sZGVyPVwiVGFncyAoY29tbWEgc2VwYXJhdGVkKVwiIHZhbHVlPVwiJHskKCcjc3RvcnlUYWdzJykudmFsKCl9XCI+XHJcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgaWQ9XCJzd2FsUGFzc3dvcmRcIiBjbGFzcz1cInN3YWwyLWlucHV0XCIgcGxhY2Vob2xkZXI9XCJQYXNzd29yZCAob3B0aW9uYWwpXCI+XHJcbiAgICAgICAgICA8ZGl2IGlkPVwicHJlZXhpc3RpbmdUYWdzQ29udGFpbmVyXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnQ7IG1hcmdpbi10b3A6MTBweDtcIj48L2Rpdj5cclxuICAgICAgICBgLFxyXG4gICAgICAgIGRpZE9wZW46ICgpID0+IHtcclxuICAgICAgICAgIGxvYWRQcmVleGlzdGluZ1RhZ3MoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdTYXZlJyxcclxuICAgICAgICBwcmVDb25maXJtOiAoKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0aXRsZTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N3YWxUaXRsZScpLnZhbHVlLFxyXG4gICAgICAgICAgICBhdXRob3I6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2FsQXV0aG9yJykudmFsdWUsXHJcbiAgICAgICAgICAgIHRhZ3M6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2FsVGFncycpLnZhbHVlLFxyXG4gICAgICAgICAgICBwYXNzd29yZDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N3YWxQYXNzd29yZCcpLnZhbHVlXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3VsdC52YWx1ZTtcclxuICAgICAgICAgICAgLy8gVXBkYXRlIGZpZWxkcyBpbiB0aGUgZWRpdG9yXHJcbiAgICAgICAgICAgICQoJyNzdG9yeVRpdGxlJykudmFsKGRhdGEudGl0bGUpO1xyXG4gICAgICAgICAgICAkKCcjc3RvcnlBdXRob3InKS52YWwoZGF0YS5hdXRob3IpO1xyXG4gICAgICAgICAgICAkKCcjc3RvcnlUYWdzJykudmFsKGRhdGEudGFncyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgc3RvcnkgPSB7XHJcbiAgICAgICAgICAgICAgICBzdG9yeVRpdGxlOiBkYXRhLnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgc3RvcnlBdXRob3I6IGRhdGEuYXV0aG9yLFxyXG4gICAgICAgICAgICAgICAgc3RvcnlUZXh0OiAkKCcjc3RvcnlUZXh0JykuaHRtbCgpLFxyXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzOiBzdGF0ZS52YXJpYWJsZXMsXHJcbiAgICAgICAgICAgICAgICBwcm9ub3VuR3JvdXBzOiBzdGF0ZS5wcm9ub3VuR3JvdXBzLFxyXG4gICAgICAgICAgICAgICAgdmFyaWFibGVDb3VudHM6IHN0YXRlLnZhcmlhYmxlQ291bnRzLFxyXG4gICAgICAgICAgICAgICAgcHJvbm91bkdyb3VwQ291bnQ6IHN0YXRlLnByb25vdW5Hcm91cENvdW50LFxyXG4gICAgICAgICAgICAgICAgY3VzdG9tUGxhY2Vob2xkZXJzOiBzdGF0ZS5jdXN0b21QbGFjZWhvbGRlcnMsXHJcbiAgICAgICAgICAgICAgICB0YWdzOiBkYXRhLnRhZ3MgPyBkYXRhLnRhZ3Muc3BsaXQoJywnKS5tYXAocyA9PiBzLnRyaW0oKSkgOiBbXSxcclxuICAgICAgICAgICAgICAgIHNhdmVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBkYXRhLnBhc3N3b3JkICYmIGRhdGEucGFzc3dvcmQudHJpbSgpICE9PSAnJyA/IGRhdGEucGFzc3dvcmQgOiBudWxsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2FwaS9zYXZlc3RvcnknLFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoc3RvcnkpLFxyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcC1lbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnc3VjY2VzcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU3Rvcnkgc2F2ZWQgdG8gc2l0ZSEnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyOiAxNTAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6ICh4aHIsIHN0YXR1c1RleHQsIGVycm9yVGhyb3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDQwOSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTdG9yeSBleGlzdHMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0Egc3Rvcnkgd2l0aCB0aGlzIHRpdGxlIGFscmVhZHkgZXhpc3RzLiBPdmVyd3JpdGU/JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICd3YXJuaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1llcywgb3ZlcndyaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICdObydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rvcnkub3ZlcndyaXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICcvYXBpL3NhdmVzdG9yeScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShzdG9yeSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3AtZW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnc3VjY2VzcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTdG9yeSBvdmVyd3JpdHRlbiEnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lcjogMTUwMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAoeGhyT3ZlcndyaXRlLCBzdGF0dXNUZXh0T3ZlcndyaXRlLCBlcnJvclRocm93bk92ZXJ3cml0ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZS5oYW5kbGVBamF4RXJyb3IoeGhyT3ZlcndyaXRlLCBzdGF0dXNUZXh0T3ZlcndyaXRlLCBlcnJvclRocm93bk92ZXJ3cml0ZSwgJ0ZhaWxlZCB0byBvdmVyd3JpdGUgc3RvcnknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlLmhhbmRsZUFqYXhFcnJvcih4aHIsIHN0YXR1c1RleHQsIGVycm9yVGhyb3duLCAnRmFpbGVkIHRvIHNhdmUgc3RvcnknKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG5cclxuLy8gTG9hZCBwcmVleGlzdGluZyB0YWdzIGZvciB0YWcgc2VsZWN0b3JcclxuY29uc3QgbG9hZFByZWV4aXN0aW5nVGFncyA9ICgpID0+IHtcclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiAnL2FwaS9nZXR0YWdzJyxcclxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgIHN1Y2Nlc3M6ICh0YWdzKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSAkKCcjcHJlZXhpc3RpbmdUYWdzQ29udGFpbmVyJyk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgICAgICAgICBpZiAodGFncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKCc8cD5TZWxlY3QgYSB0YWc6PC9wPicpO1xyXG4gICAgICAgICAgICAgICAgdGFncy5mb3JFYWNoKHRhZyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnRuID0gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBtLTEgcHJlZXhpc3RpbmctdGFnLWJ0blwiPjwvYnV0dG9uPicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ0bi50ZXh0KHRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnRuLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSAkKCcjc3dhbFRhZ3MnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRhZ3NBcnIgPSBjdXJyZW50ID8gY3VycmVudC5zcGxpdCgnLCcpLm1hcCh0ID0+IHQudHJpbSgpKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YWdzQXJyLmluY2x1ZGVzKHRhZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3NBcnIucHVzaCh0YWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3N3YWxUYWdzJykudmFsKHRhZ3NBcnIuam9pbignLCAnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKGJ0bik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXJyb3I6IChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgcHJlZXhpc3RpbmcgdGFncycsIGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vLyBBdHRhY2ggYWxsIGV2ZW50IGhhbmRsZXJzXHJcbmV4cG9ydCBjb25zdCBpbml0RXZlbnRzID0gKCkgPT4ge1xyXG4gICAgLy8gUGxhY2Vob2xkZXIgYnV0dG9uIGNsaWNrIGhhbmRsZXJcclxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcucGxhY2Vob2xkZXItYnRuJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc3QgaW50ZXJuYWxUeXBlID0gJCh0aGlzKS5kYXRhKCdpbnRlcm5hbCcpO1xyXG4gICAgICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gJCh0aGlzKS5kYXRhKCdkaXNwbGF5Jyk7XHJcbiAgICAgICAgaGFuZGxlUGxhY2Vob2xkZXJDbGljayhpbnRlcm5hbFR5cGUsIGRpc3BsYXlOYW1lKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBGaWxsIGluZm8gaWNvbiBjbGljayBoYW5kbGVyXHJcbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmZpbGwtaW5mby1pY29uJywgKGUpID0+IHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSAkKGUuY3VycmVudFRhcmdldCkuZGF0YSgndHlwZScpO1xyXG4gICAgICAgIGNvbnN0IHRvb2x0aXAgPSBUeXBlSGVscGVycy5nZXRUb29sdGlwRm9yVHlwZSh0eXBlKTtcclxuICAgICAgICBkb21VdGlscy5zaG93VG9hc3QodG9vbHRpcCwgJ2luZm8nKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBBZGQgYWNjb3JkaW9uIGluZm8gaWNvbiBjbGljayBoYW5kbGVyXHJcbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmFjY29yZGlvbi1pbmZvLWljb24nLCAoZSkgPT4ge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9ICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCd0b29sdGlwJyk7XHJcbiAgICAgICAgZG9tVXRpbHMuc2hvd1RvYXN0KHRvb2x0aXAsICdpbmZvJyk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gU2hvdyBtb3JlIHRvZ2dsZSBldmVudCBoYW5kbGVyXHJcbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnNob3ctbW9yZS10b2dnbGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgcGFyZW50TGlzdCA9ICQodGhpcykuY2xvc2VzdCgnLmxpc3QtZ3JvdXAnKTtcclxuICAgICAgICBjb25zdCBoaWRkZW5JdGVtcyA9IHBhcmVudExpc3QuZmluZCgnLnNlY29uZGFyeS1wbGFjZWhvbGRlci13cmFwcGVyIC5zZWNvbmRhcnktcGxhY2Vob2xkZXInKTtcclxuICAgICAgICBjb25zdCBsaW5rID0gJCh0aGlzKTtcclxuICAgICAgICBsaW5rLnRleHQobGluay50ZXh0KCkgPT09ICdTaG93IE1vcmUnID8gJ1Nob3cgTGVzcycgOiAnU2hvdyBNb3JlJyk7XHJcbiAgICAgICAgaGlkZGVuSXRlbXMudG9nZ2xlKCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gQWRkIGNvcHkgdG8gY2xpcGJvYXJkIGhhbmRsZXJcclxuICAgICQoJyNjb3B5U3RvcnknKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZmluYWxUZXh0ID0gJCgnI2ZpbmFsU3RvcnknKS50ZXh0KCk7XHJcbiAgICAgICAgZG9tVXRpbHMuY29weVRvQ2xpcGJvYXJkKGZpbmFsVGV4dCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTZWxlY3Rpb24gY2hhbmdlc1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVkaXRvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RvcnlUZXh0XCIpO1xyXG4gICAgICAgIGNvbnN0IHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICBpZiAoc2VsLnJhbmdlQ291bnQgPiAwICYmIGVkaXRvci5jb250YWlucyhzZWwuYW5jaG9yTm9kZSkpIHtcclxuICAgICAgICAgICAgc3RhdGUubGFzdFJhbmdlID0gc2VsLmdldFJhbmdlQXQoMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQXR0YWNoIHNlYXJjaCBoYW5kbGVycyB3aXRoIGEgcmVkdWNlZCBkZWJvdW5jZSBkZWxheSAoNTBtcylcclxuICAgICQoJyNwbGFjZWhvbGRlclNlYXJjaCcpLm9uKCdpbnB1dCcsIFV0aWxzLmRlYm91bmNlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBzZWFyY2hWYWwgPSAkKHRoaXMpLnZhbCgpO1xyXG4gICAgICAgIHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uKCcjcGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI25vUmVzdWx0cycsIHNlYXJjaFZhbCk7XHJcbiAgICAgICAgJCgnI2FkZEN1c3RvbVBsYWNlaG9sZGVyQnRuJykudGV4dCgnQWRkIFwiJyArIHNlYXJjaFZhbCArICdcIicpO1xyXG4gICAgfSwgNTApKTtcclxuXHJcbiAgICAkKCcjbW9kYWxQbGFjZWhvbGRlclNlYXJjaCcpLm9uKCdpbnB1dCcsIFV0aWxzLmRlYm91bmNlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBzZWFyY2hWYWwgPSAkKHRoaXMpLnZhbCgpO1xyXG4gICAgICAgIHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uKCcjbW9kYWxQbGFjZWhvbGRlckFjY29yZGlvbicsICcjbW9kYWxOb1Jlc3VsdHMnLCBzZWFyY2hWYWwpO1xyXG4gICAgICAgICQoJyNtb2RhbEFkZEN1c3RvbVBsYWNlaG9sZGVyQnRuJykudGV4dCgnQWRkIFwiJyArIHNlYXJjaFZhbCArICdcIicpO1xyXG4gICAgfSwgNTApKTtcclxuXHJcbiAgICAvLyBJbml0IGFjY29yZGlvbnNcclxuICAgIHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uKCcjcGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI25vUmVzdWx0cycsIHN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlclNlYXJjaCk7XHJcbiAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI21vZGFsUGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI21vZGFsTm9SZXN1bHRzJywgc3RhdGUuY3VycmVudE1vZGFsUGxhY2Vob2xkZXJTZWFyY2gpO1xyXG4gICAgXHJcbiAgICAvLyBGaWx0ZXIgdGFnIGlucHV0IGhhbmRsZXJcclxuICAgICQoJyNmaWx0ZXJUYWcnKS5vbignaW5wdXQnLCBVdGlscy5kZWJvdW5jZSgoKSA9PiB7XHJcbiAgICAgICAgU3RvcmFnZS5sb2FkU2F2ZWRTdG9yaWVzTGlzdCgpO1xyXG4gICAgfSwgMzAwKSk7XHJcblxyXG4gICAgLy8gU29ydCBvcHRpb24gY2hhbmdlIGhhbmRsZXJcclxuICAgICQoJyNzb3J0T3B0aW9uJykub24oJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICBTdG9yYWdlLmxvYWRTYXZlZFN0b3JpZXNMaXN0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBbHBoYWJldGljYWwgb3JkZXIgYnV0dG9uXHJcbiAgICAkKCcjYWxwaGFiZXRpY2FsT3JkZXJCdG4nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc3RhdGUuZmlsbE9yZGVyID0gJ2FscGhhYmV0aWNhbCc7XHJcbiAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYnRuLW91dGxpbmUtc2Vjb25kYXJ5JykuYWRkQ2xhc3MoJ2J0bi1vdXRsaW5lLXByaW1hcnknKTtcclxuICAgICAgICAkKCcjcmFuZG9tT3JkZXJCdG4nKS5yZW1vdmVDbGFzcygnYnRuLW91dGxpbmUtcHJpbWFyeScpLmFkZENsYXNzKCdidG4tb3V0bGluZS1zZWNvbmRhcnknKTtcclxuICAgICAgICBidWlsZEZpbGxGb3JtKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBSYW5kb20gb3JkZXIgYnV0dG9uXHJcbiAgICAkKCcjcmFuZG9tT3JkZXJCdG4nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc3RhdGUuZmlsbE9yZGVyID0gJ3JhbmRvbSc7XHJcbiAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYnRuLW91dGxpbmUtc2Vjb25kYXJ5JykuYWRkQ2xhc3MoJ2J0bi1vdXRsaW5lLXByaW1hcnknKTtcclxuICAgICAgICAkKCcjYWxwaGFiZXRpY2FsT3JkZXJCdG4nKS5yZW1vdmVDbGFzcygnYnRuLW91dGxpbmUtcHJpbWFyeScpLmFkZENsYXNzKCdidG4tb3V0bGluZS1zZWNvbmRhcnknKTtcclxuICAgICAgICBidWlsZEZpbGxGb3JtKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBUYWcgYXV0b2NvbXBsZXRlXHJcbiAgICAkKFwiI2ZpbHRlclRhZ1wiKS5hdXRvY29tcGxldGUoe1xyXG4gICAgICAgIHNvdXJjZTogZnVuY3Rpb24gKHJlcXVlc3QsIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvYXBpL2dldHRhZ3MnLFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAodGFncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkVGFncyA9ICQudWkuYXV0b2NvbXBsZXRlLmZpbHRlcih0YWdzLCByZXF1ZXN0LnRlcm0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlKGZpbHRlcmVkVGFncyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCB0YWdzIGZvciBhdXRvY29tcGxldGUnLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlKFtdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtaW5MZW5ndGg6IDEsXHJcbiAgICAgICAgc2VsZWN0OiAoZXZlbnQsIHVpKSA9PiB7XHJcbiAgICAgICAgICAgICQoXCIjZmlsdGVyVGFnXCIpLnZhbCh1aS5pdGVtLnZhbHVlKTtcclxuICAgICAgICAgICAgJChcIiNhcHBseUZpbHRlcnNcIikuY2xpY2soKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFwcGx5IGZpbHRlcnMgYnV0dG9uXHJcbiAgICAkKCcjYXBwbHlGaWx0ZXJzJykub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIFN0b3JhZ2UubG9hZFNhdmVkU3Rvcmllc0xpc3QoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNoYXJlIHN0b3J5IGJ1dHRvblxyXG4gICAgJCgnI3NoYXJlU3RvcnknKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZmluYWxUZXh0ID0gJCgnI2ZpbmFsU3RvcnknKS50ZXh0KCk7XHJcbiAgICAgICAgY29uc3QgdGl0bGUgPSAkKCcjZGlzcGxheVRpdGxlJykudGV4dCgpO1xyXG4gICAgICAgIGNvbnN0IGF1dGhvciA9ICQoJyNkaXNwbGF5QXV0aG9yJykudGV4dCgpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBmb3JtYXRTdG9yeUZvckV4cG9ydCh0aXRsZSwgYXV0aG9yLCBmaW5hbFRleHQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGRvbVV0aWxzLmNvcHlUb0NsaXBib2FyZChjb250ZW50KVxyXG4gICAgICAgICAgICAudGhlbihzdWNjZXNzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2hvd1RvYXN0KCdTdG9yeSBjb3BpZWQgdG8gY2xpcGJvYXJkIScpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5zaG93RXJyb3IoJ0NvcHkgRmFpbGVkJywgJ0ZhaWxlZCB0byBjb3B5IHN0b3J5LiBQbGVhc2UgY29weSBtYW51YWxseS4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTdG9yeSBlZGl0b3IgaW5wdXQgZXZlbnRcclxuICAgICQoJyNzdG9yeVRleHQnKS5vbignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgdXBkYXRlVmFyaWFibGVzRnJvbUVkaXRvcigpO1xyXG4gICAgICAgIHN0YXRlLnN0b3J5SGFzVW5zYXZlZENoYW5nZXMgPSB0cnVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gVXBsb2FkIHN0b3J5IGJ1dHRvblxyXG4gICAgJCgnI3VwbG9hZFN0b3J5QnRuJykub24oJ2NsaWNrJywgKCkgPT4geyBcclxuICAgICAgICAkKCcjdXBsb2FkU3RvcnknKS5jbGljaygpOyBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAkKCcjdXBsb2FkU3RvcnknKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmZpbGVzWzBdO1xyXG4gICAgICAgIGlmICghZmlsZSkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0b3J5RGF0YSA9IHBhcnNlU3RvcnlGaWxlKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJCgnI3N0b3J5VGl0bGUnKS52YWwoc3RvcnlEYXRhLnRpdGxlKTtcclxuICAgICAgICAgICAgJCgnI3N0b3J5QXV0aG9yJykudmFsKHN0b3J5RGF0YS5hdXRob3IpO1xyXG4gICAgICAgICAgICAkKCcjc3RvcnlUZXh0JykuaHRtbChzdG9yeURhdGEuY29udGVudCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBSZXNldCBzdGF0ZVxyXG4gICAgICAgICAgICBzdGF0ZS52YXJpYWJsZXMgPSBbXTtcclxuICAgICAgICAgICAgc3RhdGUudmFyaWFibGVDb3VudHMgPSB7fTtcclxuICAgICAgICAgICAgc3RhdGUuaW5zZXJ0aW9uQ291bnRlciA9IDA7XHJcbiAgICAgICAgICAgIHN0YXRlLnByb25vdW5Hcm91cENvdW50ID0gMDtcclxuICAgICAgICAgICAgc3RhdGUucHJvbm91bkdyb3VwcyA9IHt9O1xyXG4gICAgICAgICAgICBzdGF0ZS5maWxsVmFsdWVzID0ge307XHJcbiAgICAgICAgICAgIHN0YXRlLmN1c3RvbVBsYWNlaG9sZGVycyA9IFtdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdXBkYXRlVmFyaWFibGVzRnJvbUVkaXRvcigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTdGFydCBnYW1lIGJ1dHRvblxyXG4gICAgJCgnI3N0YXJ0R2FtZScpLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBjb25zdCBjb250ZW50ID0gJCgnI3N0b3J5VGV4dCcpLmh0bWwoKTtcclxuICAgICAgICBpZiAoIWNvbnRlbnQudHJpbSgpKSB7XHJcbiAgICAgICAgICAgIGRvbVV0aWxzLnNob3dFcnJvcignRW1wdHkgU3RvcnknLCAnUGxlYXNlIHdyaXRlIGEgc3RvcnkgYmVmb3JlIGNvbnRpbnVpbmcuJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlVmFyaWFibGVzRnJvbUVkaXRvcigpO1xyXG4gICAgICAgIHN0YXRlLnN0b3J5VGV4dCA9IGdlbmVyYXRlTGVnYWN5VGV4dCgpO1xyXG4gICAgICAgIGlmICghc3RhdGUudmFyaWFibGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBkb21VdGlscy5zaG93RXJyb3IoJ05vIFBsYWNlaG9sZGVycycsICdObyBwbGFjZWhvbGRlcnMgZm91bmQgaW4gdGhlIHN0b3J5LicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJ1aWxkRmlsbEZvcm0oKTtcclxuICAgICAgICAkKCcjaW5wdXRzJykucmVtb3ZlQ2xhc3MoJ2Qtbm9uZScpO1xyXG4gICAgICAgICQoJyNlZGl0b3InKS5hZGRDbGFzcygnZC1ub25lJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBHZW5lcmF0ZSBzdG9yeSBidXR0b25cclxuICAgICQoJyNnZW5lcmF0ZVN0b3J5Jykub24oJ2NsaWNrJywgaGFuZGxlR2VuZXJhdGVTdG9yeSk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIG5ldyBzdG9yeSBidXR0b25zXHJcbiAgICAkKCcjY3JlYXRlTmV3U3RvcnkyLCAjY3JlYXRlTmV3U3RvcnknKS5vbignY2xpY2snLCBoYW5kbGVDcmVhdGVOZXdTdG9yeSk7XHJcblxyXG4gICAgLy8gU3RvcnkgZWRpdGluZyBmbG93IGJ1dHRvbnNcclxuICAgICQoJyNlZGl0U3RvcnlFbnRyaWVzJykub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIGJ1aWxkRmlsbEZvcm0oKTtcclxuICAgICAgICAkKCcjcmVzdWx0JykuYWRkQ2xhc3MoJ2Qtbm9uZScpO1xyXG4gICAgICAgICQoJyNpbnB1dHMnKS5yZW1vdmVDbGFzcygnZC1ub25lJyk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgJCgnI2JhY2tUb0VkaXRvciwgI2JhY2tUb0VkaXRvcjInKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgJCgnI3Jlc3VsdCwgI2lucHV0cycpLmFkZENsYXNzKCdkLW5vbmUnKTtcclxuICAgICAgICAkKCcjZWRpdG9yJykucmVtb3ZlQ2xhc3MoJ2Qtbm9uZScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gU2F2ZSBzdG9yeSB0byBzaXRlIGJ1dHRvblxyXG4gICAgJCgnI3NhdmVTdG9yeVRvU2l0ZScpLm9uKCdjbGljaycsIGhhbmRsZVNhdmVTdG9yeVRvU2l0ZSk7XHJcblxyXG4gICAgLy8gRG93bmxvYWQgc3RvcnkgYnV0dG9uXHJcbiAgICAkKCcjZG93bmxvYWRTdG9yeScpLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBjb25zdCBmaW5hbFRleHQgPSAkKCcjZmluYWxTdG9yeScpLnRleHQoKTtcclxuICAgICAgICBjb25zdCB0aXRsZSA9ICQoJyNkaXNwbGF5VGl0bGUnKS50ZXh0KCk7XHJcbiAgICAgICAgY29uc3QgYXV0aG9yID0gJCgnI2Rpc3BsYXlBdXRob3InKS50ZXh0KCk7XHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IGZvcm1hdFN0b3J5Rm9yRXhwb3J0KHRpdGxlLCBhdXRob3IsIGZpbmFsVGV4dCk7XHJcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBjcmVhdGVGaWxlbmFtZUZyb21UaXRsZSh0aXRsZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZG9tVXRpbHMuZG93bmxvYWRUZXh0RmlsZShjb250ZW50LCBmaWxlTmFtZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTYXZlIGNvbXBsZXRlZCBzdG9yeSBidXR0b25cclxuICAgICQoJyNzYXZlQ29tcGxldGVkU3RvcnknKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgU3RvcmFnZS5hZGRDb21wbGV0ZWRTdG9yeVRvU2F2ZWRTdG9yaWVzKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTYXZlZCBzdG9yaWVzIGJ1dHRvbnNcclxuICAgICQoJyNteVNhdmVkU3Rvcmllc0J0bicpLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBTdG9yYWdlLmxvYWRTYXZlZFN0b3JpZXNMaXN0KCk7XHJcbiAgICAgICAgJCgnI3NhdmVkU3Rvcmllc01vZGFsJykubW9kYWwoJ3Nob3cnKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmxvYWRTYXZlZFN0b3J5QnRuJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gJCh0aGlzKS5kYXRhKCdpbmRleCcpO1xyXG4gICAgICAgICQoJyNzYXZlZFN0b3JpZXNNb2RhbCcpLm1vZGFsKCdoaWRlJyk7XHJcbiAgICAgICAgU3RvcmFnZS5sb2FkU2F2ZWRTdG9yeShpbmRleCwgXCJwbGF5XCIpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZWRpdFNhdmVkU3RvcnlCdG4nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSAkKHRoaXMpLmRhdGEoJ2luZGV4Jyk7XHJcbiAgICAgICAgJCgnI3NhdmVkU3Rvcmllc01vZGFsJykubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICBTdG9yYWdlLmxvYWRTYXZlZFN0b3J5KGluZGV4LCBcImVkaXRcIik7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5kZWxldGVTYXZlZFN0b3J5QnRuJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IHRpdGxlID0gJCh0aGlzKS5kYXRhKCd0aXRsZScpO1xyXG4gICAgICAgIGRvbVV0aWxzLmNvbmZpcm1EaWFsb2coe1xyXG4gICAgICAgICAgICB0aXRsZTogJ0RlbGV0ZSBTdG9yeT8nLFxyXG4gICAgICAgICAgICB0ZXh0OiAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIHNhdmVkIHN0b3J5PycsXHJcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnWWVzLCBkZWxldGUgaXQhJ1xyXG4gICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSBTdG9yYWdlLmRlbGV0ZVNhdmVkU3RvcnkodGl0bGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmF0aW5nIHN1Ym1pc3Npb25cclxuICAgICQoJyNzdWJtaXRSYXRpbmcnKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmF0aW5nID0gcGFyc2VJbnQoJCgnI3N0b3J5UmF0aW5nJykudmFsKCksIDEwKTtcclxuICAgICAgICBpZiAoIXN0YXRlLmN1cnJlbnRTdG9yeUlkKSB7XHJcbiAgICAgICAgICAgIGRvbVV0aWxzLnNob3dFcnJvcignRXJyb3InLCAnU3RvcnkgSUQgbm90IGZvdW5kLicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogJy9hcGkvcmF0ZVN0b3J5JyxcclxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsgc3RvcnlJZDogc3RhdGUuY3VycmVudFN0b3J5SWQsIHJhdGluZyB9KSxcclxuICAgICAgICAgICAgc3VjY2VzczogKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIGRvbVV0aWxzLnNob3dUb2FzdChgVGhhbmsgeW91IGZvciByYXRpbmchIE5ldyBhdmVyYWdlOiAke2RhdGEucmF0aW5nLnRvRml4ZWQoMSl9ICgke2RhdGEucmF0aW5nQ291bnR9IHZvdGVzKWApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogKHhociwgc3RhdHVzVGV4dCwgZXJyb3JUaHJvd24pID0+IHtcclxuICAgICAgICAgICAgICAgIFN0b3JhZ2UuaGFuZGxlQWpheEVycm9yKHhociwgc3RhdHVzVGV4dCwgZXJyb3JUaHJvd24sICdGYWlsZWQgdG8gcmF0ZSBzdG9yeScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBFZGl0b3Iga2V5IGhhbmRsaW5nIGZvciBwbGFjZWhvbGRlcnNcclxuICAgICQoJyNzdG9yeVRleHQnKS5vbigna2V5ZG93bicsIChlKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgIGlmIChzZWwucmFuZ2VDb3VudCkge1xyXG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSBzZWwuZ2V0UmFuZ2VBdCgwKTtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSBcIkFycm93UmlnaHRcIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5vZGUgPSBzZWwuYW5jaG9yTm9kZTtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBub2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdwbGFjZWhvbGRlcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbC5hbmNob3JPZmZzZXQgPj0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBsYWNlaG9sZGVyID0gbm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3UmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdSYW5nZS5zZXRTdGFydEFmdGVyKHBsYWNlaG9sZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKG5ld1JhbmdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSBcIkJhY2tzcGFjZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbm9kZSA9IHNlbC5hbmNob3JOb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFICYmIG5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ3BsYWNlaG9sZGVyJykgJiYgc2VsLmFuY2hvck9mZnNldCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGxhY2Vob2xkZXIgPSBub2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1JhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdSYW5nZS5zZXRTdGFydEJlZm9yZShwbGFjZWhvbGRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3UmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShuZXdSYW5nZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBZGQgcGxhY2Vob2xkZXIgYnV0dG9uXHJcbiAgICAkKCcjYWRkUGxhY2Vob2xkZXJCdG4nKS5vbignY2xpY2snLCAoKSA9PiB7IFxyXG4gICAgICAgICQoJyNwbGFjZWhvbGRlck1vZGFsJykubW9kYWwoJ3Nob3cnKTsgXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDbGljayBoYW5kbGVyIGZvciBleGlzdGluZyBwbGFjZWhvbGRlcnNcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGlzdGluZ1BsYWNlaG9sZGVyc0NvbnRhaW5lcicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBjb25zdCBidG4gPSBlLnRhcmdldC5jbG9zZXN0KCcucGxhY2Vob2xkZXItaXRlbScpO1xyXG4gICAgICAgIGlmICghYnRuKSByZXR1cm47XHJcbiAgICAgICAgY29uc3QgaWQgPSBidG4uZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XHJcbiAgICAgICAgY29uc3QgdmFyaWFibGUgPSBzdGF0ZS52YXJpYWJsZXMuZmluZCh2ID0+IHYuaWQgPT09IGlkKTtcclxuICAgICAgICBpZiAodmFyaWFibGUpIGR1cGxpY2F0ZVBsYWNlaG9sZGVyKHZhcmlhYmxlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkZCBjdXN0b20gcGxhY2Vob2xkZXIgYnV0dG9uXHJcbiAgICAkKCcjYWRkQ3VzdG9tUGxhY2Vob2xkZXJCdG4nKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmF3ID0gJCgnI3BsYWNlaG9sZGVyU2VhcmNoJykudmFsKCk7XHJcbiAgICAgICAgY29uc3QgdXNhZ2UgPSAkKCdpbnB1dFtuYW1lPVwiY3VzdG9tUGxhY2Vob2xkZXJUeXBlXCJdOmNoZWNrZWQnKS52YWwoKSB8fCBcImdlbmVyaWNcIjtcclxuICAgICAgICBpZiAodXNhZ2UgPT09IFwibm91blwiKSB7XHJcbiAgICAgICAgICAgIGFkZEN1c3RvbVBsYWNlaG9sZGVyKHJhdywgXCJub3VuXCIpO1xyXG4gICAgICAgICAgICBzaG93Tm91bk51bWJlclNlbGVjdGlvbihcIk5OX1wiICsgU3RyaW5nVXRpbHMucGFzY2FsQ2FzZShyYXcpLCBTdHJpbmdVdGlscy5uYXR1cmFsRGlzcGxheShyYXcpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHVzYWdlID09PSBcInZlcmJcIikge1xyXG4gICAgICAgICAgICBhZGRDdXN0b21QbGFjZWhvbGRlcihyYXcsIFwidmVyYlwiKTtcclxuICAgICAgICAgICAgc2hvd1ZlcmJUZW5zZVNlbGVjdGlvbihcIlZCX1wiICsgU3RyaW5nVXRpbHMucGFzY2FsQ2FzZShyYXcpLCBTdHJpbmdVdGlscy5uYXR1cmFsRGlzcGxheShyYXcpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhZGRDdXN0b21QbGFjZWhvbGRlcihyYXcpO1xyXG4gICAgICAgICAgICBpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b20ocmF3KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnI3BsYWNlaG9sZGVyU2VhcmNoJykudmFsKCcnKTtcclxuICAgICAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI3BsYWNlaG9sZGVyQWNjb3JkaW9uJywgJyNub1Jlc3VsdHMnLCBzdGF0ZS5jdXJyZW50UGxhY2Vob2xkZXJTZWFyY2gpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gTW9kYWwgYWRkIGN1c3RvbSBwbGFjZWhvbGRlciBidXR0b25cclxuICAgICQoJyNtb2RhbEFkZEN1c3RvbVBsYWNlaG9sZGVyQnRuJykub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJhdyA9ICQoJyNtb2RhbFBsYWNlaG9sZGVyU2VhcmNoJykudmFsKCk7XHJcbiAgICAgICAgY29uc3QgdXNhZ2UgPSAkKCdpbnB1dFtuYW1lPVwibW9kYWxDdXN0b21QbGFjZWhvbGRlclR5cGVcIl06Y2hlY2tlZCcpLnZhbCgpIHx8IFwiZ2VuZXJpY1wiO1xyXG4gICAgICAgIGlmICh1c2FnZSA9PT0gXCJub3VuXCIpIHtcclxuICAgICAgICAgICAgYWRkQ3VzdG9tUGxhY2Vob2xkZXIocmF3LCBcIm5vdW5cIik7XHJcbiAgICAgICAgICAgIHNob3dOb3VuTnVtYmVyU2VsZWN0aW9uKFwiTk5fXCIgKyBTdHJpbmdVdGlscy5wYXNjYWxDYXNlKHJhdyksIFN0cmluZ1V0aWxzLm5hdHVyYWxEaXNwbGF5KHJhdykpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodXNhZ2UgPT09IFwidmVyYlwiKSB7XHJcbiAgICAgICAgICAgIGFkZEN1c3RvbVBsYWNlaG9sZGVyKHJhdywgXCJ2ZXJiXCIpO1xyXG4gICAgICAgICAgICBzaG93VmVyYlRlbnNlU2VsZWN0aW9uKFwiVkJfXCIgKyBTdHJpbmdVdGlscy5wYXNjYWxDYXNlKHJhdyksIFN0cmluZ1V0aWxzLm5hdHVyYWxEaXNwbGF5KHJhdykpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFkZEN1c3RvbVBsYWNlaG9sZGVyKHJhdyk7XHJcbiAgICAgICAgICAgIGluc2VydFBsYWNlaG9sZGVyRnJvbUN1c3RvbShyYXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI21vZGFsUGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI21vZGFsTm9SZXN1bHRzJywgc3RhdGUuY3VycmVudE1vZGFsUGxhY2Vob2xkZXJTZWFyY2gpO1xyXG4gICAgICAgICQoJyNwbGFjZWhvbGRlck1vZGFsJykubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAkKCcjbW9kYWxQbGFjZWhvbGRlclNlYXJjaCcpLnZhbCgnJyk7XHJcbiAgICAgICAgdXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24oJyNtb2RhbFBsYWNlaG9sZGVyQWNjb3JkaW9uJywgJyNtb2RhbE5vUmVzdWx0cycsIHN0YXRlLmN1cnJlbnRNb2RhbFBsYWNlaG9sZGVyU2VhcmNoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNlYXJjaCBtb2RhbCBwbGFjZWhvbGRlciBpbnB1dFxyXG4gICAgJCgnI21vZGFsUGxhY2Vob2xkZXJTZWFyY2hJbnB1dCcpLm9uKCdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzdGF0ZS5jdXJyZW50TW9kYWxQbGFjZWhvbGRlclNlYXJjaCA9ICQodGhpcykudmFsKCkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24oJyNtb2RhbFBsYWNlaG9sZGVyQWNjb3JkaW9uJywgJyNtb2RhbE5vUmVzdWx0cycsIHN0YXRlLmN1cnJlbnRNb2RhbFBsYWNlaG9sZGVyU2VhcmNoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFRoZSByZW1haW5pbmcgaW5pdGlhbGl6YXRpb24gY29kZSBmb2xsb3dzXHJcbiAgICAvLyAuLi4gZXhpc3RpbmcgY29kZSAuLi5cclxufTsiXSwibmFtZXMiOlsic3RhdGUiLCJTdG9yYWdlIiwiVXRpbHMiLCJTdHJpbmdVdGlscyIsIlR5cGVIZWxwZXJzIiwidXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24iLCJ1cGRhdGVWYXJpYWJsZXNGcm9tRWRpdG9yIiwiZ2VuZXJhdGVMZWdhY3lUZXh0IiwiYWRkQ3VzdG9tUGxhY2Vob2xkZXIiLCJzaG93Tm91bk51bWJlclNlbGVjdGlvbiIsInNob3dWZXJiVGVuc2VTZWxlY3Rpb24iLCJpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b20iLCJwaWNrUHJvbm91bkZvcm1BbmRHcm91cCIsInVwZGF0ZVZhcmlhYmxlc0xpc3QiLCJkdXBsaWNhdGVQbGFjZWhvbGRlciIsInVwZGF0ZUV4aXN0aW5nUGxhY2Vob2xkZXIiLCJpbnNlcnRQbGFjZWhvbGRlciIsInNob3dQZXJzb25UeXBlU2VsZWN0aW9uIiwiYnVpbGRGaWxsRm9ybSIsInZhbGlkYXRlSW5wdXRGb3JtIiwiZmlsbFBsYWNlaG9sZGVycyIsInBhcnNlU3RvcnlGaWxlIiwiZm9ybWF0U3RvcnlGb3JFeHBvcnQiLCJjcmVhdGVGaWxlbmFtZUZyb21UaXRsZSIsInJlc2V0U3RvcnlTdGF0ZSIsImRvbVV0aWxzIiwiU3dhbCIsInNob3dUb2FzdCIsImhhbmRsZVBsYWNlaG9sZGVyQ2xpY2siLCJpbnRlcm5hbFR5cGUiLCJkaXNwbGF5TmFtZSIsImlzRWRpdGluZ1BsYWNlaG9sZGVyIiwiY3VycmVudEVkaXRpbmdWYXJpYWJsZSIsIiQiLCJtb2RhbCIsInZhbCIsImN1cnJlbnRQbGFjZWhvbGRlclNlYXJjaCIsInN0YXJ0c1dpdGgiLCJoYW5kbGVDcmVhdGVOZXdTdG9yeSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3J5SGFzVW5zYXZlZENoYW5nZXMiLCJjb25maXJtRGlhbG9nIiwidGl0bGUiLCJ0ZXh0Iiwic2hvd0RlbnlCdXR0b24iLCJjb25maXJtQnV0dG9uVGV4dCIsImRlbnlCdXR0b25UZXh0IiwidGhlbiIsInJlc3VsdCIsImlzQ29uZmlybWVkIiwiYWRkQ3VycmVudFN0b3J5VG9TYXZlZFN0b3JpZXMiLCJzZXRUaW1lb3V0IiwiaXNEZW5pZWQiLCJyZXMiLCJoYW5kbGVHZW5lcmF0ZVN0b3J5IiwiaW5wdXRGb3JtIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlucHV0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWxsVmFsdWVzIiwiZm9yRWFjaCIsImlucHV0IiwiaWQiLCJnZXRBdHRyaWJ1dGUiLCJ2YWx1ZSIsInRyaW0iLCJjb25zb2xlIiwibG9nIiwiY29uY2F0IiwiZmluYWwiLCJ2YXJpYWJsZXMiLCJwcm9ub3VuR3JvdXBzIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImhhbmRsZVNhdmVTdG9yeVRvU2l0ZSIsImZpcmUiLCJodG1sIiwiZGlkT3BlbiIsImxvYWRQcmVleGlzdGluZ1RhZ3MiLCJzaG93Q2FuY2VsQnV0dG9uIiwicHJlQ29uZmlybSIsImF1dGhvciIsInRhZ3MiLCJwYXNzd29yZCIsImRhdGEiLCJzdG9yeSIsInN0b3J5VGl0bGUiLCJzdG9yeUF1dGhvciIsInN0b3J5VGV4dCIsInZhcmlhYmxlQ291bnRzIiwicHJvbm91bkdyb3VwQ291bnQiLCJjdXN0b21QbGFjZWhvbGRlcnMiLCJzcGxpdCIsIm1hcCIsInMiLCJzYXZlZEF0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiYWpheCIsInVybCIsIm1ldGhvZCIsImNvbnRlbnRUeXBlIiwiSlNPTiIsInN0cmluZ2lmeSIsInN1Y2Nlc3MiLCJ0b2FzdCIsInBvc2l0aW9uIiwiaWNvbiIsInNob3dDb25maXJtQnV0dG9uIiwidGltZXIiLCJlcnJvciIsInhociIsInN0YXR1c1RleHQiLCJlcnJvclRocm93biIsInN0YXR1cyIsImNhbmNlbEJ1dHRvblRleHQiLCJvdmVyd3JpdGUiLCJ4aHJPdmVyd3JpdGUiLCJzdGF0dXNUZXh0T3ZlcndyaXRlIiwiZXJyb3JUaHJvd25PdmVyd3JpdGUiLCJoYW5kbGVBamF4RXJyb3IiLCJjb250YWluZXIiLCJlbXB0eSIsImxlbmd0aCIsImFwcGVuZCIsInRhZyIsImJ0biIsIm9uIiwiY3VycmVudCIsInRhZ3NBcnIiLCJ0IiwiZmlsdGVyIiwiQm9vbGVhbiIsImluY2x1ZGVzIiwicHVzaCIsImpvaW4iLCJlcnIiLCJpbml0RXZlbnRzIiwic3RvcFByb3BhZ2F0aW9uIiwidHlwZSIsImN1cnJlbnRUYXJnZXQiLCJ0b29sdGlwIiwiZ2V0VG9vbHRpcEZvclR5cGUiLCJwYXJlbnRMaXN0IiwiY2xvc2VzdCIsImhpZGRlbkl0ZW1zIiwiZmluZCIsImxpbmsiLCJ0b2dnbGUiLCJmaW5hbFRleHQiLCJjb3B5VG9DbGlwYm9hcmQiLCJhZGRFdmVudExpc3RlbmVyIiwiZWRpdG9yIiwic2VsIiwid2luZG93IiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImNvbnRhaW5zIiwiYW5jaG9yTm9kZSIsImxhc3RSYW5nZSIsImdldFJhbmdlQXQiLCJkZWJvdW5jZSIsInNlYXJjaFZhbCIsImN1cnJlbnRNb2RhbFBsYWNlaG9sZGVyU2VhcmNoIiwibG9hZFNhdmVkU3Rvcmllc0xpc3QiLCJmaWxsT3JkZXIiLCJhdXRvY29tcGxldGUiLCJzb3VyY2UiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJkYXRhVHlwZSIsImZpbHRlcmVkVGFncyIsInVpIiwidGVybSIsIm1pbkxlbmd0aCIsInNlbGVjdCIsImV2ZW50IiwiaXRlbSIsImNsaWNrIiwiY29udGVudCIsInNob3dFcnJvciIsImZpbGUiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJ0YXJnZXQiLCJzdG9yeURhdGEiLCJpbnNlcnRpb25Db3VudGVyIiwicmVhZEFzVGV4dCIsImZpbGVOYW1lIiwiZG93bmxvYWRUZXh0RmlsZSIsImFkZENvbXBsZXRlZFN0b3J5VG9TYXZlZFN0b3JpZXMiLCJpbmRleCIsImxvYWRTYXZlZFN0b3J5IiwiZGVsZXRlU2F2ZWRTdG9yeSIsInJhdGluZyIsInBhcnNlSW50IiwiY3VycmVudFN0b3J5SWQiLCJzdG9yeUlkIiwidG9GaXhlZCIsInJhdGluZ0NvdW50IiwicmFuZ2UiLCJrZXkiLCJub2RlIiwibm9kZVR5cGUiLCJOb2RlIiwiVEVYVF9OT0RFIiwicGFyZW50Tm9kZSIsImNsYXNzTGlzdCIsImFuY2hvck9mZnNldCIsIm5vZGVWYWx1ZSIsInBsYWNlaG9sZGVyIiwibmV3UmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0QWZ0ZXIiLCJjb2xsYXBzZSIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0U3RhcnRCZWZvcmUiLCJ2YXJpYWJsZSIsInYiLCJyYXciLCJ1c2FnZSIsInBhc2NhbENhc2UiLCJuYXR1cmFsRGlzcGxheSIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/js/handlers/events.js\n");

/***/ }),

/***/ "./public/js/main.js":
/*!***************************!*\
  !*** ./public/js/main.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utils.js */ \"./public/js/utils/utils.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/typeHelpers.js */ \"./public/js/utils/typeHelpers.js\");\n/* harmony import */ var _data_storage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data/storage.js */ \"./public/js/data/storage.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/placeholders.js */ \"./public/js/core/placeholders.js\");\n/* harmony import */ var _ui_forms_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/forms.js */ \"./public/js/ui/forms.js\");\n/* harmony import */ var _ui_menu_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/menu.js */ \"./public/js/ui/menu.js\");\n/* harmony import */ var _handlers_events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./handlers/events.js */ \"./public/js/handlers/events.js\");\n/* harmony import */ var _core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./core/storyProcessor.js */ \"./public/js/core/storyProcessor.js\");\n/* harmony import */ var _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/domUtils.js */ \"./public/js/utils/domUtils.js\");\n// public/js/main.js\n\n\n\n\n\n\n\n\n\n\n\n(function () {\n  \"use strict\";\n\n  // Make Utils and decodeHTMLEntities available on window for legacy code\n  window.Utils = _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.Utils;\n  window.decodeHTMLEntities = _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.decodeHTMLEntities;\n\n  // ====================================================\n  // EVENT HANDLERS & DOCUMENT READY\n  // ====================================================\n  $(document).ready(function () {\n    // Initialize the application\n    (0,_ui_menu_js__WEBPACK_IMPORTED_MODULE_6__.initMenus)();\n    (0,_handlers_events_js__WEBPACK_IMPORTED_MODULE_7__.initEvents)();\n\n    // Set a flag to indicate that the app has loaded\n    window.appLoaded = true;\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvanMvbWFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVvRTtBQUNQO0FBQ1I7QUFDVDtBQWtCWjtBQUNjO0FBUXhCO0FBQzRCO0FBTWhCO0FBQ2M7QUFFaEQsQ0FBQyxZQUFZO0VBQ1QsWUFBWTs7RUFFWjtFQUNBb0MsTUFBTSxDQUFDakMsS0FBSyxHQUFHQSxrREFBSztFQUNwQmlDLE1BQU0sQ0FBQ2hDLGtCQUFrQixHQUFHQSwrREFBa0I7O0VBRTlDO0VBQ0E7RUFDQTtFQUNBaUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLFlBQU07SUFDcEI7SUFDQVosc0RBQVMsQ0FBQyxDQUFDO0lBQ1hHLCtEQUFVLENBQUMsQ0FBQzs7SUFFWjtJQUNBTSxNQUFNLENBQUNJLFNBQVMsR0FBRyxJQUFJO0VBQzNCLENBQUMsQ0FBQztBQUNOLENBQUMsRUFBRSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmtib29rLy4vcHVibGljL2pzL21haW4uanM/Y2VhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwdWJsaWMvanMvbWFpbi5qc1xyXG5cclxuaW1wb3J0IHN0YXRlLCB7IHJlc2V0U3RhdGUsIHByb25vdW5NYXBwaW5nIH0gZnJvbSAnLi9jb3JlL3N0YXRlLmpzJztcclxuaW1wb3J0IHsgVXRpbHMsIGRlY29kZUhUTUxFbnRpdGllcyB9IGZyb20gJy4vdXRpbHMvdXRpbHMuanMnO1xyXG5pbXBvcnQgeyBUeXBlSGVscGVycyB9IGZyb20gJy4vdXRpbHMvdHlwZUhlbHBlcnMuanMnO1xyXG5pbXBvcnQgeyBTdG9yYWdlIH0gZnJvbSAnLi9kYXRhL3N0b3JhZ2UuanMnO1xyXG5pbXBvcnQgeyBcclxuICAgIGNhdGVnb3J5T3JkZXIsIFxyXG4gICAgYWxsUGxhY2Vob2xkZXJzLFxyXG4gICAgaW5zZXJ0UGxhY2Vob2xkZXIsXHJcbiAgICB1cGRhdGVWYXJpYWJsZXNMaXN0LFxyXG4gICAgdXBkYXRlVmFyaWFibGVzRnJvbUVkaXRvcixcclxuICAgIGdlbmVyYXRlTGVnYWN5VGV4dCxcclxuICAgIHNob3dOb3VuTnVtYmVyU2VsZWN0aW9uLFxyXG4gICAgc2hvd1ZlcmJUZW5zZVNlbGVjdGlvbixcclxuICAgIHNob3dQZXJzb25UeXBlU2VsZWN0aW9uLFxyXG4gICAgdXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24sXHJcbiAgICBwaWNrUHJvbm91bkZvcm1BbmRHcm91cCxcclxuICAgIGluc2VydFByb25vdW5QbGFjZWhvbGRlclNpbXBsZSxcclxuICAgIGNob29zZVByb25vdW5UZW1wVmFsdWUsXHJcbiAgICB1cGRhdGVFeGlzdGluZ1BsYWNlaG9sZGVyLFxyXG4gICAgYWRkQ3VzdG9tUGxhY2Vob2xkZXIsXHJcbiAgICBpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b21cclxufSBmcm9tICcuL2NvcmUvcGxhY2Vob2xkZXJzLmpzJztcclxuaW1wb3J0IHsgYnVpbGRGaWxsRm9ybSB9IGZyb20gJy4vdWkvZm9ybXMuanMnO1xyXG5pbXBvcnQgeyBcclxuICAgIHBvc2l0aW9uTWVudSwgXHJcbiAgICBoaWRlTWVudSwgXHJcbiAgICBoaWRlQWxsTWVudXMsXHJcbiAgICBpbml0TWVudXMsXHJcbiAgICBoYW5kbGVUZXh0U2VsZWN0aW9uLFxyXG4gICAgaGFuZGxlUGxhY2Vob2xkZXJDbGlja1xyXG59IGZyb20gJy4vdWkvbWVudS5qcyc7XHJcbmltcG9ydCB7IGluaXRFdmVudHMgfSBmcm9tICcuL2hhbmRsZXJzL2V2ZW50cy5qcyc7XHJcbmltcG9ydCB7IFxyXG4gICAgZmlsbFBsYWNlaG9sZGVycyxcclxuICAgIHJlc2V0U3RvcnlTdGF0ZSxcclxuICAgIGZvcm1hdFN0b3J5Rm9yRXhwb3J0LFxyXG4gICAgY3JlYXRlRmlsZW5hbWVGcm9tVGl0bGVcclxufSBmcm9tICcuL2NvcmUvc3RvcnlQcm9jZXNzb3IuanMnO1xyXG5pbXBvcnQgKiBhcyBkb21VdGlscyBmcm9tICcuL3V0aWxzL2RvbVV0aWxzLmpzJztcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvLyBNYWtlIFV0aWxzIGFuZCBkZWNvZGVIVE1MRW50aXRpZXMgYXZhaWxhYmxlIG9uIHdpbmRvdyBmb3IgbGVnYWN5IGNvZGVcclxuICAgIHdpbmRvdy5VdGlscyA9IFV0aWxzO1xyXG4gICAgd2luZG93LmRlY29kZUhUTUxFbnRpdGllcyA9IGRlY29kZUhUTUxFbnRpdGllcztcclxuXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAvLyBFVkVOVCBIQU5ETEVSUyAmIERPQ1VNRU5UIFJFQURZXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAkKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgYXBwbGljYXRpb25cclxuICAgICAgICBpbml0TWVudXMoKTtcclxuICAgICAgICBpbml0RXZlbnRzKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU2V0IGEgZmxhZyB0byBpbmRpY2F0ZSB0aGF0IHRoZSBhcHAgaGFzIGxvYWRlZFxyXG4gICAgICAgIHdpbmRvdy5hcHBMb2FkZWQgPSB0cnVlO1xyXG4gICAgfSk7XHJcbn0pKCk7Il0sIm5hbWVzIjpbInN0YXRlIiwicmVzZXRTdGF0ZSIsInByb25vdW5NYXBwaW5nIiwiVXRpbHMiLCJkZWNvZGVIVE1MRW50aXRpZXMiLCJUeXBlSGVscGVycyIsIlN0b3JhZ2UiLCJjYXRlZ29yeU9yZGVyIiwiYWxsUGxhY2Vob2xkZXJzIiwiaW5zZXJ0UGxhY2Vob2xkZXIiLCJ1cGRhdGVWYXJpYWJsZXNMaXN0IiwidXBkYXRlVmFyaWFibGVzRnJvbUVkaXRvciIsImdlbmVyYXRlTGVnYWN5VGV4dCIsInNob3dOb3VuTnVtYmVyU2VsZWN0aW9uIiwic2hvd1ZlcmJUZW5zZVNlbGVjdGlvbiIsInNob3dQZXJzb25UeXBlU2VsZWN0aW9uIiwidXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24iLCJwaWNrUHJvbm91bkZvcm1BbmRHcm91cCIsImluc2VydFByb25vdW5QbGFjZWhvbGRlclNpbXBsZSIsImNob29zZVByb25vdW5UZW1wVmFsdWUiLCJ1cGRhdGVFeGlzdGluZ1BsYWNlaG9sZGVyIiwiYWRkQ3VzdG9tUGxhY2Vob2xkZXIiLCJpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b20iLCJidWlsZEZpbGxGb3JtIiwicG9zaXRpb25NZW51IiwiaGlkZU1lbnUiLCJoaWRlQWxsTWVudXMiLCJpbml0TWVudXMiLCJoYW5kbGVUZXh0U2VsZWN0aW9uIiwiaGFuZGxlUGxhY2Vob2xkZXJDbGljayIsImluaXRFdmVudHMiLCJmaWxsUGxhY2Vob2xkZXJzIiwicmVzZXRTdG9yeVN0YXRlIiwiZm9ybWF0U3RvcnlGb3JFeHBvcnQiLCJjcmVhdGVGaWxlbmFtZUZyb21UaXRsZSIsImRvbVV0aWxzIiwid2luZG93IiwiJCIsImRvY3VtZW50IiwicmVhZHkiLCJhcHBMb2FkZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./public/js/main.js\n");

/***/ }),

/***/ "./public/js/ui/forms.js":
/*!*******************************!*\
  !*** ./public/js/ui/forms.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildFillForm: () => (/* binding */ buildFillForm),\n/* harmony export */   createInputRow: () => (/* binding */ createInputRow),\n/* harmony export */   validateInputForm: () => (/* binding */ validateInputForm)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/typeHelpers.js */ \"./public/js/utils/typeHelpers.js\");\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// public/js/ui/forms.js\n\n\n\n// ====================================================\n// BUILD THE FILL-IN-THE-BLANK FORM\n// ====================================================\nvar buildFillForm = function buildFillForm() {\n  var form = $('#inputForm').empty();\n  appendPronounGroupsToForm(form);\n  appendNonPronounVariablesToForm(form);\n};\nvar appendPronounGroupsToForm = function appendPronounGroupsToForm(form) {\n  var groupSet = getPronounGroups();\n  var sortedGroups = Array.from(groupSet).sort(function (a, b) {\n    return a.localeCompare(b);\n  });\n  if (sortedGroups.length > 0) {\n    form.append(\"<h4>Pronouns</h4>\");\n    sortedGroups.forEach(function (g) {\n      var block = createPronounGroupBlock(g);\n      form.append(block);\n    });\n    form.on('change', \"input[type='radio']\", handlePronounChoiceChange);\n  }\n};\nvar getPronounGroups = function getPronounGroups() {\n  var groupSet = new Set();\n  var _iterator = _createForOfIteratorHelper(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var v = _step.value;\n      if (v.internalType.startsWith('PRONOUN|')) {\n        var parts = v.internalType.split('|');\n        groupSet.add(parts[1]);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return groupSet;\n};\nvar createPronounGroupBlock = function createPronounGroupBlock(groupName) {\n  var block = $(\"\\n      <div class='form-group'>\\n        <label id='\".concat(groupName, \"-label' title=\\\"Hover to see internal ID\\\">\\n          \").concat(groupName, \" - Person (select pronoun)\\n          <i class=\\\"fas fa-info-circle fill-info-icon\\\" data-type=\\\"\").concat(groupName, \"\\\" style=\\\"font-size:0.8em; margin-left:5px;\\\"></i>\\n        </label>\\n      </div>\\n    \"));\n  var radios = \"\\n      <div class='form-check'>\\n        <input type='radio' class='form-check-input' name='\".concat(groupName, \"-choice' value='HeHim'>\\n        <label class='form-check-label'>He/Him</label>\\n      </div>\\n      <div class='form-check'>\\n        <input type='radio' class='form-check-input' name='\").concat(groupName, \"-choice' value='SheHer'>\\n        <label class='form-check-label'>She/Her</label>\\n      </div>\\n      <div class='form-check'>\\n        <input type='radio' class='form-check-input' name='\").concat(groupName, \"-choice' value='TheyThem'>\\n        <label class='form-check-label'>They/Them</label>\\n      </div>\\n      <div class='form-check mb-2'>\\n        <input type='radio' class='form-check-input' name='\").concat(groupName, \"-choice' value='Custom'>\\n        <label class='form-check-label'>Custom</label>\\n      </div>\\n      <input type='text' class='form-control form-control-sm d-none' id='\").concat(groupName, \"-custom'\\n        placeholder='comma-separated: subject, object, possAdj, possPron, reflexive'>\\n    \");\n  block.append(radios);\n  return block;\n};\nvar handlePronounChoiceChange = function handlePronounChoiceChange() {\n  var groupName = $(this).attr('name').replace('-choice', '');\n  if ($(this).val() === 'Custom') {\n    $(\"#\".concat(groupName, \"-custom\")).removeClass('d-none');\n  } else {\n    $(\"#\".concat(groupName, \"-custom\")).addClass('d-none');\n  }\n};\nvar appendNonPronounVariablesToForm = function appendNonPronounVariablesToForm(form) {\n  var nonPronounVars = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.filter(function (v) {\n    return !v.internalType.startsWith('PRONOUN|');\n  });\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillOrder === 'alphabetical') {\n    nonPronounVars.sort(function (a, b) {\n      return a.officialDisplay.localeCompare(b.officialDisplay);\n    });\n  } else if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillOrder === 'random') {\n    nonPronounVars.sort(function () {\n      return Math.random() - 0.5;\n    });\n  }\n  nonPronounVars.forEach(function (variable) {\n    var groupRow = createInputRow(variable);\n    form.append(groupRow);\n  });\n};\nvar createInputRow = function createInputRow(variable) {\n  var inputRow = document.createElement(\"div\");\n  inputRow.className = \"form-group mb-3\";\n  console.log(\"Creating input row for variable: \".concat(variable.id), variable);\n\n  // Create standardized display label (remove any text within parentheses and trim)\n  var displayLabel = variable.officialDisplay.replace(/\\s*\\([^)]*\\)/g, '').trim();\n\n  // Create the label element\n  var label = document.createElement(\"label\");\n  label.htmlFor = variable.id;\n  label.textContent = variable.officialDisplay;\n  label.className = \"form-label\";\n\n  // Create the input element\n  var input = document.createElement(\"input\");\n  input.type = \"text\";\n  input.className = \"form-control\";\n  input.id = variable.id;\n  input.setAttribute(\"data-id\", variable.id);\n  input.setAttribute(\"data-label\", variable.officialDisplay);\n  input.setAttribute(\"data-display\", displayLabel);\n  input.setAttribute(\"data-type\", variable.internalType.split('|')[0]);\n  input.setAttribute(\"placeholder\", displayLabel);\n\n  // If we have existing values, use them\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues && _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues[variable.id]) {\n    input.value = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues[variable.id];\n    console.log(\"Pre-filling \".concat(variable.id, \" with existing value: \\\"\").concat(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues[variable.id], \"\\\"\"));\n  }\n\n  // Add elements to the row\n  inputRow.appendChild(label);\n  inputRow.appendChild(input);\n  return inputRow;\n};\n\n// Add the missing validateInputForm function to forms.js\n\nvar validateInputForm = function validateInputForm(formData) {\n  // If no formData is provided, this is being called from handleGenerateStory\n  // to validate the entire form before generating the story\n  if (!formData) {\n    // Check if we have any filled values that need validation\n    // Return valid for basic story generation\n    return {\n      valid: true\n    };\n  }\n\n  // Input validation logic for placeholders/variables\n  if (!formData.display || formData.display.trim() === '') {\n    return {\n      valid: false,\n      message: 'Display name is required'\n    };\n  }\n  if (!formData.internalType || formData.internalType.trim() === '') {\n    return {\n      valid: false,\n      message: 'Internal type is required'\n    };\n  }\n  return {\n    valid: true\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/ui/forms.js\n");

/***/ }),

/***/ "./public/js/ui/menu.js":
/*!******************************!*\
  !*** ./public/js/ui/menu.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPlaceholderEditMenu: () => (/* binding */ getPlaceholderEditMenu),\n/* harmony export */   getSelectionMenu: () => (/* binding */ getSelectionMenu),\n/* harmony export */   handleDeletePlaceholder: () => (/* binding */ handleDeletePlaceholder),\n/* harmony export */   handleEditOverride: () => (/* binding */ handleEditOverride),\n/* harmony export */   handleEditPlaceholder: () => (/* binding */ handleEditPlaceholder),\n/* harmony export */   handleNewPlaceholder: () => (/* binding */ handleNewPlaceholder),\n/* harmony export */   handlePlaceholderClick: () => (/* binding */ handlePlaceholderClick),\n/* harmony export */   handleReusePlaceholder: () => (/* binding */ handleReusePlaceholder),\n/* harmony export */   handleTextSelection: () => (/* binding */ handleTextSelection),\n/* harmony export */   hideAllMenus: () => (/* binding */ hideAllMenus),\n/* harmony export */   hideMenu: () => (/* binding */ hideMenu),\n/* harmony export */   initMenuSystem: () => (/* binding */ initMenuSystem),\n/* harmony export */   initMenus: () => (/* binding */ initMenus),\n/* harmony export */   positionMenu: () => (/* binding */ positionMenu)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/placeholders.js */ \"./public/js/core/placeholders.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n// Start of Selection\n// public/js/ui/menu.js\n\n\n\n// Menu element references\nvar selectionMenu;\nvar placeholderEditMenu;\n\n// Helper function to position menu near an element\nvar positionMenu = function positionMenu(menu, rect) {\n  menu.style.display = 'block';\n  var menuWidth = menu.offsetWidth;\n  var menuHeight = menu.offsetHeight;\n  var offset = 5;\n  var desiredTop = rect.bottom + offset + menuHeight <= window.innerHeight ? window.scrollY + rect.bottom + offset : window.scrollY + rect.top - menuHeight - offset;\n  var desiredLeft = window.scrollX + rect.left + rect.width / 2 - menuWidth / 2;\n  desiredLeft = Math.max(window.scrollX + 5, Math.min(desiredLeft, window.scrollX + window.innerWidth - menuWidth - 5));\n  menu.style.top = desiredTop + 'px';\n  menu.style.left = desiredLeft + 'px';\n};\n\n// Hide a menu\nvar hideMenu = function hideMenu(menu) {\n  menu.style.display = 'none';\n};\n\n// Hide all menus\nvar hideAllMenus = function hideAllMenus() {\n  hideMenu(selectionMenu);\n  hideMenu(placeholderEditMenu);\n};\n\n// Reset current editing state\nvar resetCurrentEditing = function resetCurrentEditing() {\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = null;\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement = null;\n};\n\n// Initialize the context menus\nvar initMenus = function initMenus() {\n  // Create selection menu for text selections\n  selectionMenu = document.createElement('div');\n  selectionMenu.id = 'textSelectionMenu';\n  Object.assign(selectionMenu.style, {\n    position: 'absolute',\n    display: 'none',\n    zIndex: '1000',\n    background: '#fff',\n    border: '1px solid #ccc',\n    padding: '5px',\n    borderRadius: '4px',\n    boxShadow: '0px 2px 4px rgba(0,0,0,0.2)'\n  });\n  selectionMenu.innerHTML = \"\\n        <button id=\\\"newPlaceholderBtn\\\" class=\\\"btn btn-sm btn-primary\\\">New Placeholder</button>\\n        <button id=\\\"reusePlaceholderBtn\\\" class=\\\"btn btn-sm btn-secondary\\\">Reuse Placeholder</button>\\n      \";\n  document.body.appendChild(selectionMenu);\n\n  // Create placeholder edit menu for modifying existing placeholders\n  placeholderEditMenu = document.createElement('div');\n  placeholderEditMenu.id = 'placeholderEditMenu';\n  Object.assign(placeholderEditMenu.style, {\n    position: 'absolute',\n    display: 'none',\n    zIndex: '1000',\n    background: '#fff',\n    border: '1px solid #ccc',\n    padding: '5px',\n    borderRadius: '4px',\n    boxShadow: '0px 2px 4px rgba(0,0,0,0.2)'\n  });\n  placeholderEditMenu.innerHTML = \"\\n        <button id=\\\"editPlaceholderBtn\\\" class=\\\"btn btn-sm btn-primary\\\">Change Placeholder</button>\\n        <button id=\\\"editOverrideBtn\\\" class=\\\"btn btn-sm btn-secondary\\\">Change Override</button>\\n        <button id=\\\"deletePlaceholderBtn\\\" class=\\\"btn btn-sm btn-danger\\\">Delete</button>\\n      \";\n  document.body.appendChild(placeholderEditMenu);\n\n  // Attach event listeners\n  attachMenuEventListeners();\n};\n\n// Handle text selection to show the selection menu\nvar handleTextSelection = function handleTextSelection() {\n  setTimeout(function () {\n    var sel = window.getSelection();\n    if (sel && sel.toString().trim().length > 0) {\n      if (sel.anchorNode && sel.anchorNode.parentNode && !sel.anchorNode.parentNode.classList.contains('placeholder')) {\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = sel.getRangeAt(0);\n        var rect = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.getBoundingClientRect();\n        positionMenu(selectionMenu, rect);\n      }\n    } else {\n      hideMenu(selectionMenu);\n    }\n  }, 0);\n};\n\n// Show the placeholder edit menu when a placeholder is clicked\nvar handlePlaceholderClick = function handlePlaceholderClick(e) {\n  if (e.target.classList.contains('placeholder')) {\n    // Stop propagation so that other handlers (e.g. selection menu) do not interfere\n    e.stopPropagation();\n    // Find the corresponding variable using the data-id attribute\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.find(function (v) {\n      return v.id === e.target.getAttribute('data-id');\n    });\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement = e.target;\n    // Position the placeholder edit menu near the clicked element\n    positionMenu(placeholderEditMenu, e.target.getBoundingClientRect());\n  }\n};\n\n// Handle delete button click in placeholder edit menu\nvar handleDeletePlaceholder = function handleDeletePlaceholder() {\n  hideMenu(placeholderEditMenu);\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement) {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement.remove();\n  }\n  // Update the variables in the editor after deletion\n  if (typeof _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesFromEditor === 'function') {\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesFromEditor)();\n  }\n  resetCurrentEditing();\n};\n\n// Handle edit placeholder button click\nvar handleEditPlaceholder = function handleEditPlaceholder() {\n  hideMenu(placeholderEditMenu);\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder = true;\n  // Open the modal so the user can select a new placeholder type\n  $('#placeholderModal').modal('show');\n  resetCurrentEditing();\n};\n\n// Handle edit override button click\nvar handleEditOverride = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var _yield$Swal$fire, newOverride;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          hideMenu(placeholderEditMenu);\n          _context.next = 3;\n          return Swal.fire({\n            title: 'Change Override',\n            input: 'text',\n            inputLabel: 'Enter new override text',\n            inputValue: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement ? _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement.textContent : ''\n          });\n        case 3:\n          _yield$Swal$fire = _context.sent;\n          newOverride = _yield$Swal$fire.value;\n          if (newOverride !== undefined) {\n            if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement) {\n              _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement.textContent = newOverride;\n            }\n            if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable) {\n              _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable.displayOverride = newOverride;\n            }\n            if (typeof _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesList === 'function') {\n              (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesList)();\n            }\n          }\n          resetCurrentEditing();\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function handleEditOverride() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// Handle \"New Placeholder\" button click\nvar handleNewPlaceholder = function handleNewPlaceholder() {\n  hideMenu(selectionMenu);\n  $('#placeholderModal').modal('show');\n};\n\n// Handle \"Reuse Placeholder\" button click\nvar handleReusePlaceholder = function handleReusePlaceholder() {\n  hideMenu(selectionMenu);\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.length === 0) {\n    Swal.fire('No existing placeholders', 'There are no placeholders to reuse yet.', 'info');\n    return;\n  }\n  var sortedVariables = _toConsumableArray(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables).sort(function (a, b) {\n    return (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[b.id] || 0) - (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[a.id] || 0) || a.order - b.order;\n  });\n  var html = \"<div id=\\\"reusePlaceholderContainer\\\" style=\\\"display: flex; flex-wrap: wrap;\\\">\";\n  sortedVariables.forEach(function (v) {\n    var displayText = v.displayOverride || v.officialDisplay;\n    html += \"<button type=\\\"button\\\" \\n                       class=\\\"btn btn-outline-secondary btn-sm m-1 reuse-placeholder-btn\\\" \\n                       data-id=\\\"\".concat(v.id, \"\\\" \\n                       title=\\\"\").concat(v.id, \"\\\">\\n                 \").concat(displayText, \"\\n               </button>\");\n  });\n  html += \"</div>\";\n  Swal.fire({\n    title: 'Select a placeholder to reuse',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      var btns = container.querySelectorAll('.reuse-placeholder-btn');\n      btns.forEach(function (button) {\n        button.addEventListener('click', function () {\n          var id = button.getAttribute('data-id');\n          var variable = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.find(function (v) {\n            return v.id === id;\n          });\n          if (variable) (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.duplicatePlaceholder)(variable);\n          Swal.close();\n        });\n      });\n    }\n  });\n};\n\n// Attach event listeners to the menu elements\nvar attachMenuEventListeners = function attachMenuEventListeners() {\n  // Click outside menus to close them\n  document.addEventListener('click', function (e) {\n    if (!selectionMenu.contains(e.target) && !placeholderEditMenu.contains(e.target)) {\n      hideAllMenus();\n    }\n  });\n\n  // Text selection events\n  document.getElementById('storyText').addEventListener('mouseup', handleTextSelection);\n\n  // Placeholder click events\n  document.getElementById('storyText').addEventListener('click', handlePlaceholderClick);\n\n  // Menu button event handlers\n  document.getElementById('newPlaceholderBtn').addEventListener('click', handleNewPlaceholder);\n  document.getElementById('reusePlaceholderBtn').addEventListener('click', handleReusePlaceholder);\n  document.getElementById('editPlaceholderBtn').addEventListener('click', handleEditPlaceholder);\n  document.getElementById('editOverrideBtn').addEventListener('click', handleEditOverride);\n  document.getElementById('deletePlaceholderBtn').addEventListener('click', handleDeletePlaceholder);\n};\n\n// Export menu elements for external access if needed\nvar getSelectionMenu = function getSelectionMenu() {\n  return selectionMenu;\n};\nvar getPlaceholderEditMenu = function getPlaceholderEditMenu() {\n  return placeholderEditMenu;\n};\n\n// Export the initialization of menus to be called from main.js\nvar initMenuSystem = function initMenuSystem() {\n  // Create menus if they don't exist yet\n  if (!selectionMenu || !placeholderEditMenu) {\n    initMenus();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/ui/menu.js\n");

/***/ }),

/***/ "./public/js/ui/notifications.js":
/*!***************************************!*\
  !*** ./public/js/ui/notifications.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   showError: () => (/* binding */ showError),\n/* harmony export */   showToast: () => (/* binding */ showToast)\n/* harmony export */ });\n/**\r\n * Utility functions for showing notifications to the user\r\n */\n\n/**\r\n * Shows a toast notification to the user\r\n * @param {string} message - The message to display\r\n * @param {string} type - The type of notification (success, error, warning, info)\r\n * @param {number} duration - How long to show the notification in ms\r\n */\nvar showToast = function showToast(message) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';\n  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3000;\n  if (typeof Swal !== 'undefined') {\n    // If SweetAlert2 is available\n    Swal.fire({\n      toast: true,\n      position: 'top-end',\n      showConfirmButton: false,\n      timer: duration,\n      timerProgressBar: true,\n      icon: type,\n      title: message\n    });\n  } else {\n    // Fallback to alert if SweetAlert is not available\n    console.log(\"\".concat(type.toUpperCase(), \": \").concat(message));\n    if (type === 'error') {\n      alert(message);\n    }\n  }\n};\n\n/**\r\n * Shows an error notification with a title and message\r\n * @param {string} title - The error title\r\n * @param {string} message - The error message\r\n */\nvar showError = function showError(title, message) {\n  if (typeof Swal !== 'undefined') {\n    Swal.fire({\n      icon: 'error',\n      title: title,\n      text: message\n    });\n  } else {\n    console.error(\"\".concat(title, \": \").concat(message));\n    alert(\"\".concat(title, \": \").concat(message));\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvanMvdWkvbm90aWZpY2F0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNQSxTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBSUMsT0FBTyxFQUF3QztFQUFBLElBQXRDQyxJQUFJLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLFNBQVM7RUFBQSxJQUFFRyxRQUFRLEdBQUFILFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUk7RUFDaEUsSUFBSSxPQUFPSSxJQUFJLEtBQUssV0FBVyxFQUFFO0lBQzdCO0lBQ0FBLElBQUksQ0FBQ0MsSUFBSSxDQUFDO01BQ05DLEtBQUssRUFBRSxJQUFJO01BQ1hDLFFBQVEsRUFBRSxTQUFTO01BQ25CQyxpQkFBaUIsRUFBRSxLQUFLO01BQ3hCQyxLQUFLLEVBQUVOLFFBQVE7TUFDZk8sZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QkMsSUFBSSxFQUFFWixJQUFJO01BQ1ZhLEtBQUssRUFBRWQ7SUFDWCxDQUFDLENBQUM7RUFDTixDQUFDLE1BQU07SUFDSDtJQUNBZSxPQUFPLENBQUNDLEdBQUcsSUFBQUMsTUFBQSxDQUFJaEIsSUFBSSxDQUFDaUIsV0FBVyxDQUFDLENBQUMsUUFBQUQsTUFBQSxDQUFLakIsT0FBTyxDQUFFLENBQUM7SUFDaEQsSUFBSUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtNQUNsQmtCLEtBQUssQ0FBQ25CLE9BQU8sQ0FBQztJQUNsQjtFQUNKO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTW9CLFNBQVMsR0FBRyxTQUFaQSxTQUFTQSxDQUFJTixLQUFLLEVBQUVkLE9BQU8sRUFBSztFQUN6QyxJQUFJLE9BQU9NLElBQUksS0FBSyxXQUFXLEVBQUU7SUFDN0JBLElBQUksQ0FBQ0MsSUFBSSxDQUFDO01BQ05NLElBQUksRUFBRSxPQUFPO01BQ2JDLEtBQUssRUFBRUEsS0FBSztNQUNaTyxJQUFJLEVBQUVyQjtJQUNWLENBQUMsQ0FBQztFQUNOLENBQUMsTUFBTTtJQUNIZSxPQUFPLENBQUNPLEtBQUssSUFBQUwsTUFBQSxDQUFJSCxLQUFLLFFBQUFHLE1BQUEsQ0FBS2pCLE9BQU8sQ0FBRSxDQUFDO0lBQ3JDbUIsS0FBSyxJQUFBRixNQUFBLENBQUlILEtBQUssUUFBQUcsTUFBQSxDQUFLakIsT0FBTyxDQUFFLENBQUM7RUFDakM7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmtib29rLy4vcHVibGljL2pzL3VpL25vdGlmaWNhdGlvbnMuanM/NDZlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIHNob3dpbmcgbm90aWZpY2F0aW9ucyB0byB0aGUgdXNlclxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBTaG93cyBhIHRvYXN0IG5vdGlmaWNhdGlvbiB0byB0aGUgdXNlclxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXlcclxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBub3RpZmljYXRpb24gKHN1Y2Nlc3MsIGVycm9yLCB3YXJuaW5nLCBpbmZvKVxyXG4gKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gLSBIb3cgbG9uZyB0byBzaG93IHRoZSBub3RpZmljYXRpb24gaW4gbXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBzaG93VG9hc3QgPSAobWVzc2FnZSwgdHlwZSA9ICdzdWNjZXNzJywgZHVyYXRpb24gPSAzMDAwKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIFN3YWwgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gSWYgU3dlZXRBbGVydDIgaXMgYXZhaWxhYmxlXHJcbiAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgdG9hc3Q6IHRydWUsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wLWVuZCcsXHJcbiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSxcclxuICAgICAgICAgICAgdGltZXI6IGR1cmF0aW9uLFxyXG4gICAgICAgICAgICB0aW1lclByb2dyZXNzQmFyOiB0cnVlLFxyXG4gICAgICAgICAgICBpY29uOiB0eXBlLFxyXG4gICAgICAgICAgICB0aXRsZTogbWVzc2FnZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGYWxsYmFjayB0byBhbGVydCBpZiBTd2VldEFsZXJ0IGlzIG5vdCBhdmFpbGFibGVcclxuICAgICAgICBjb25zb2xlLmxvZyhgJHt0eXBlLnRvVXBwZXJDYXNlKCl9OiAke21lc3NhZ2V9YCk7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcclxuICAgICAgICAgICAgYWxlcnQobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNob3dzIGFuIGVycm9yIG5vdGlmaWNhdGlvbiB3aXRoIGEgdGl0bGUgYW5kIG1lc3NhZ2VcclxuICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIC0gVGhlIGVycm9yIHRpdGxlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2VcclxuICovXHJcbmV4cG9ydCBjb25zdCBzaG93RXJyb3IgPSAodGl0bGUsIG1lc3NhZ2UpID0+IHtcclxuICAgIGlmICh0eXBlb2YgU3dhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICBpY29uOiAnZXJyb3InLFxyXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXHJcbiAgICAgICAgICAgIHRleHQ6IG1lc3NhZ2VcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgJHt0aXRsZX06ICR7bWVzc2FnZX1gKTtcclxuICAgICAgICBhbGVydChgJHt0aXRsZX06ICR7bWVzc2FnZX1gKTtcclxuICAgIH1cclxufTsgIl0sIm5hbWVzIjpbInNob3dUb2FzdCIsIm1lc3NhZ2UiLCJ0eXBlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZHVyYXRpb24iLCJTd2FsIiwiZmlyZSIsInRvYXN0IiwicG9zaXRpb24iLCJzaG93Q29uZmlybUJ1dHRvbiIsInRpbWVyIiwidGltZXJQcm9ncmVzc0JhciIsImljb24iLCJ0aXRsZSIsImNvbnNvbGUiLCJsb2ciLCJjb25jYXQiLCJ0b1VwcGVyQ2FzZSIsImFsZXJ0Iiwic2hvd0Vycm9yIiwidGV4dCIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/js/ui/notifications.js\n");

/***/ }),

/***/ "./public/js/utils/StringUtils.js":
/*!****************************************!*\
  !*** ./public/js/utils/StringUtils.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringUtils: () => (/* binding */ StringUtils),\n/* harmony export */   decodeHTMLEntities: () => (/* binding */ decodeHTMLEntities)\n/* harmony export */ });\n/**\r\n * A dedicated module for string manipulation utilities\r\n */\nvar StringUtils = {\n  /**\r\n   * Converts a string to title case (first letter of each word capitalized)\r\n   */\n  toTitleCase: function toTitleCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  },\n  /**\r\n   * Capitalizes the first letter of a string\r\n   */\n  capitalize: function capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n  },\n  /**\r\n   * Converts a string to PascalCase\r\n   */\n  pascalCase: function pascalCase(str) {\n    return str.toLowerCase().split(/\\s+/).map(function (word) {\n      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    }).join('');\n  },\n  /**\r\n   * Converts camelCase or PascalCase to a natural display format with spaces\r\n   */\n  naturalDisplay: function naturalDisplay(str) {\n    return str.replace(/([a-z])([A-Z])/g, '$1 $2');\n  },\n  /**\r\n   * Removes all characters except alphanumerics and underscores\r\n   */\n  sanitizeString: function sanitizeString(str) {\n    return str.replace(/[^a-zA-Z0-9_]/g, '');\n  },\n  /**\r\n   * Extracts a subtype from a string by removing prefix and trailing numbers\r\n   */\n  extractSubtype: function extractSubtype(type, prefixLength) {\n    var sub = type.substring(prefixLength);\n    if (sub.startsWith(\"_\")) sub = sub.substring(1);\n    return sub.replace(/\\d+$/, '');\n  }\n};\n\n/**\r\n * Decodes HTML entities in a string\r\n */\nvar decodeHTMLEntities = function decodeHTMLEntities(text) {\n  var textarea = document.createElement(\"textarea\");\n  textarea.innerHTML = text;\n  return textarea.value;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvanMvdXRpbHMvU3RyaW5nVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDTyxJQUFNQSxXQUFXLEdBQUc7RUFDekI7QUFDRjtBQUNBO0VBQ0VDLFdBQVcsRUFBRSxTQUFiQSxXQUFXQSxDQUFHQyxHQUFHO0lBQUEsT0FDZkEsR0FBRyxDQUFDQyxPQUFPLENBQUMsUUFBUSxFQUFFLFVBQUNDLEdBQUc7TUFBQSxPQUFLQSxHQUFHLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUMsR0FBR0YsR0FBRyxDQUFDRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0lBQUEsRUFBQztFQUFBO0VBRTNGO0FBQ0Y7QUFDQTtFQUNFQyxVQUFVLEVBQUUsU0FBWkEsVUFBVUEsQ0FBR1AsR0FBRztJQUFBLE9BQUtBLEdBQUcsQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQyxHQUFHSixHQUFHLENBQUNRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0YsV0FBVyxDQUFDLENBQUM7RUFBQTtFQUU3RTtBQUNGO0FBQ0E7RUFDRUcsVUFBVSxFQUFFLFNBQVpBLFVBQVVBLENBQUdULEdBQUc7SUFBQSxPQUFLQSxHQUFHLENBQUNNLFdBQVcsQ0FBQyxDQUFDLENBQUNJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLFVBQUFDLElBQUk7TUFBQSxPQUFJQSxJQUFJLENBQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUMsR0FBR1EsSUFBSSxDQUFDSixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUNGLFdBQVcsQ0FBQyxDQUFDO0lBQUEsRUFBQyxDQUFDTyxJQUFJLENBQUMsRUFBRSxDQUFDO0VBQUE7RUFFcEk7QUFDRjtBQUNBO0VBQ0VDLGNBQWMsRUFBRSxTQUFoQkEsY0FBY0EsQ0FBR2QsR0FBRztJQUFBLE9BQUtBLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQztFQUFBO0VBRWhFO0FBQ0Y7QUFDQTtFQUNFYyxjQUFjLEVBQUUsU0FBaEJBLGNBQWNBLENBQUdmLEdBQUc7SUFBQSxPQUFLQSxHQUFHLENBQUNDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7RUFBQTtFQUUxRDtBQUNGO0FBQ0E7RUFDRWUsY0FBYyxFQUFFLFNBQWhCQSxjQUFjQSxDQUFHQyxJQUFJLEVBQUVDLFlBQVksRUFBSztJQUN0QyxJQUFJQyxHQUFHLEdBQUdGLElBQUksQ0FBQ0csU0FBUyxDQUFDRixZQUFZLENBQUM7SUFDdEMsSUFBSUMsR0FBRyxDQUFDRSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUVGLEdBQUcsR0FBR0EsR0FBRyxDQUFDQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE9BQU9ELEdBQUcsQ0FBQ2xCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0VBQ2hDO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDTyxJQUFNcUIsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFrQkEsQ0FBSUMsSUFBSSxFQUFLO0VBQzFDLElBQU1DLFFBQVEsR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsVUFBVSxDQUFDO0VBQ25ERixRQUFRLENBQUNHLFNBQVMsR0FBR0osSUFBSTtFQUN6QixPQUFPQyxRQUFRLENBQUNJLEtBQUs7QUFDdkIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rYm9vay8uL3B1YmxpYy9qcy91dGlscy9TdHJpbmdVdGlscy5qcz9lZDQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBBIGRlZGljYXRlZCBtb2R1bGUgZm9yIHN0cmluZyBtYW5pcHVsYXRpb24gdXRpbGl0aWVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU3RyaW5nVXRpbHMgPSB7XHJcbiAgLyoqXHJcbiAgICogQ29udmVydHMgYSBzdHJpbmcgdG8gdGl0bGUgY2FzZSAoZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBjYXBpdGFsaXplZClcclxuICAgKi9cclxuICB0b1RpdGxlQ2FzZTogKHN0cikgPT5cclxuICAgIHN0ci5yZXBsYWNlKC9cXHdcXFMqL2csICh0eHQpID0+IHR4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR4dC5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKSksXHJcbiAgXHJcbiAgLyoqXHJcbiAgICogQ2FwaXRhbGl6ZXMgdGhlIGZpcnN0IGxldHRlciBvZiBhIHN0cmluZ1xyXG4gICAqL1xyXG4gIGNhcGl0YWxpemU6IChzdHIpID0+IHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKS50b0xvd2VyQ2FzZSgpLFxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnRzIGEgc3RyaW5nIHRvIFBhc2NhbENhc2VcclxuICAgKi9cclxuICBwYXNjYWxDYXNlOiAoc3RyKSA9PiBzdHIudG9Mb3dlckNhc2UoKS5zcGxpdCgvXFxzKy8pLm1hcCh3b3JkID0+IHdvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCkpLmpvaW4oJycpLFxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnRzIGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlIHRvIGEgbmF0dXJhbCBkaXNwbGF5IGZvcm1hdCB3aXRoIHNwYWNlc1xyXG4gICAqL1xyXG4gIG5hdHVyYWxEaXNwbGF5OiAoc3RyKSA9PiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxICQyJyksXHJcbiAgXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhbGwgY2hhcmFjdGVycyBleGNlcHQgYWxwaGFudW1lcmljcyBhbmQgdW5kZXJzY29yZXNcclxuICAgKi9cclxuICBzYW5pdGl6ZVN0cmluZzogKHN0cikgPT4gc3RyLnJlcGxhY2UoL1teYS16QS1aMC05X10vZywgJycpLFxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIEV4dHJhY3RzIGEgc3VidHlwZSBmcm9tIGEgc3RyaW5nIGJ5IHJlbW92aW5nIHByZWZpeCBhbmQgdHJhaWxpbmcgbnVtYmVyc1xyXG4gICAqL1xyXG4gIGV4dHJhY3RTdWJ0eXBlOiAodHlwZSwgcHJlZml4TGVuZ3RoKSA9PiB7XHJcbiAgICBsZXQgc3ViID0gdHlwZS5zdWJzdHJpbmcocHJlZml4TGVuZ3RoKTtcclxuICAgIGlmIChzdWIuc3RhcnRzV2l0aChcIl9cIikpIHN1YiA9IHN1Yi5zdWJzdHJpbmcoMSk7XHJcbiAgICByZXR1cm4gc3ViLnJlcGxhY2UoL1xcZCskLywgJycpO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBEZWNvZGVzIEhUTUwgZW50aXRpZXMgaW4gYSBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBjb25zdCBkZWNvZGVIVE1MRW50aXRpZXMgPSAodGV4dCkgPT4ge1xyXG4gIGNvbnN0IHRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xyXG4gIHRleHRhcmVhLmlubmVySFRNTCA9IHRleHQ7XHJcbiAgcmV0dXJuIHRleHRhcmVhLnZhbHVlO1xyXG59OyAiXSwibmFtZXMiOlsiU3RyaW5nVXRpbHMiLCJ0b1RpdGxlQ2FzZSIsInN0ciIsInJlcGxhY2UiLCJ0eHQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsInRvTG93ZXJDYXNlIiwiY2FwaXRhbGl6ZSIsInNsaWNlIiwicGFzY2FsQ2FzZSIsInNwbGl0IiwibWFwIiwid29yZCIsImpvaW4iLCJuYXR1cmFsRGlzcGxheSIsInNhbml0aXplU3RyaW5nIiwiZXh0cmFjdFN1YnR5cGUiLCJ0eXBlIiwicHJlZml4TGVuZ3RoIiwic3ViIiwic3Vic3RyaW5nIiwic3RhcnRzV2l0aCIsImRlY29kZUhUTUxFbnRpdGllcyIsInRleHQiLCJ0ZXh0YXJlYSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/js/utils/StringUtils.js\n");

/***/ }),

/***/ "./public/js/utils/domUtils.js":
/*!*************************************!*\
  !*** ./public/js/utils/domUtils.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearForm: () => (/* binding */ clearForm),\n/* harmony export */   confirmDialog: () => (/* binding */ confirmDialog),\n/* harmony export */   copyToClipboard: () => (/* binding */ copyToClipboard),\n/* harmony export */   createElement: () => (/* binding */ createElement),\n/* harmony export */   downloadTextFile: () => (/* binding */ downloadTextFile),\n/* harmony export */   getElementValue: () => (/* binding */ getElementValue),\n/* harmony export */   getFormData: () => (/* binding */ getFormData),\n/* harmony export */   setElementValue: () => (/* binding */ setElementValue),\n/* harmony export */   showError: () => (/* reexport safe */ _ui_notifications_js__WEBPACK_IMPORTED_MODULE_0__.showError),\n/* harmony export */   showToast: () => (/* reexport safe */ _ui_notifications_js__WEBPACK_IMPORTED_MODULE_0__.showToast),\n/* harmony export */   showView: () => (/* binding */ showView),\n/* harmony export */   toggleClass: () => (/* binding */ toggleClass),\n/* harmony export */   toggleVisibility: () => (/* binding */ toggleVisibility)\n/* harmony export */ });\n/* harmony import */ var _ui_notifications_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ui/notifications.js */ \"./public/js/ui/notifications.js\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// public/js/utils/domUtils.js\n\n/**\r\n * DOM utility functions for working with the story editor and UI\r\n */\n\n// Import the notification functions instead of duplicating them\n\n\n// Re-export them to maintain compatibility\n\n\n// Show a confirmation dialog using SweetAlert\nvar confirmDialog = function confirmDialog(options) {\n  var defaultOptions = {\n    title: 'Are you sure?',\n    text: 'This action cannot be undone.',\n    icon: 'warning',\n    showCancelButton: true,\n    confirmButtonText: 'Yes',\n    cancelButtonText: 'No'\n  };\n  var finalOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n  return Swal.fire(finalOptions);\n};\n\n// Toggle element visibility\nvar toggleVisibility = function toggleVisibility(selector, isVisible) {\n  var element = typeof selector === 'string' ? document.querySelector(selector) : selector;\n  if (element) {\n    element.style.display = isVisible ? '' : 'none';\n  }\n};\n\n// Toggle class on element\nvar toggleClass = function toggleClass(selector, className, shouldAdd) {\n  var element = typeof selector === 'string' ? document.querySelector(selector) : selector;\n  if (element) {\n    if (shouldAdd) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n};\n\n// Show/hide multiple elements by class\nvar showView = function showView(viewName) {\n  // Hide all view containers\n  document.querySelectorAll('.view-container').forEach(function (el) {\n    el.classList.add('d-none');\n  });\n\n  // Show the requested view\n  document.getElementById(viewName).classList.remove('d-none');\n};\n\n// Create element with attributes and content\nvar createElement = function createElement(tag) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var element = document.createElement(tag);\n\n  // Set attributes\n  for (var _i = 0, _Object$entries = Object.entries(attributes); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n    if (key === 'className') {\n      element.className = value;\n    } else if (key === 'style' && _typeof(value) === 'object') {\n      Object.assign(element.style, value);\n    } else if (key.startsWith('on') && typeof value === 'function') {\n      var eventName = key.substring(2).toLowerCase();\n      element.addEventListener(eventName, value);\n    } else if (key === 'html') {\n      element.innerHTML = value;\n    } else if (key === 'text') {\n      element.textContent = value;\n    } else {\n      element.setAttribute(key, value);\n    }\n  }\n\n  // Append children\n  children.forEach(function (child) {\n    if (typeof child === 'string') {\n      element.appendChild(document.createTextNode(child));\n    } else if (child instanceof Node) {\n      element.appendChild(child);\n    }\n  });\n  return element;\n};\n\n// Get DOM element value safely (with default)\nvar getElementValue = function getElementValue(selector) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var element = document.querySelector(selector);\n  if (!element) return defaultValue;\n  if (element.type === 'checkbox') {\n    return element.checked;\n  } else if (element.type === 'radio') {\n    var checkedEl = document.querySelector(\"\".concat(selector, \":checked\"));\n    return checkedEl ? checkedEl.value : defaultValue;\n  } else {\n    return element.value || defaultValue;\n  }\n};\n\n// Set DOM element value safely\nvar setElementValue = function setElementValue(selector, value) {\n  var element = document.querySelector(selector);\n  if (!element) return;\n  if (element.type === 'checkbox') {\n    element.checked = !!value;\n  } else if (element.type === 'radio') {\n    var radio = document.querySelector(\"\".concat(selector, \"[value=\\\"\").concat(value, \"\\\"]\"));\n    if (radio) radio.checked = true;\n  } else {\n    element.value = value;\n  }\n};\n\n// Get form data as object\nvar getFormData = function getFormData(formSelector) {\n  var form = document.querySelector(formSelector);\n  if (!form) return {};\n  var formData = new FormData(form);\n  var data = {};\n  var _iterator = _createForOfIteratorHelper(formData.entries()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n        key = _step$value[0],\n        value = _step$value[1];\n      data[key] = value;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return data;\n};\n\n// Clear form fields\nvar clearForm = function clearForm(formSelector) {\n  var form = document.querySelector(formSelector);\n  if (!form) return;\n  form.reset();\n\n  // Also clear any custom fields that might not be cleared by reset\n  form.querySelectorAll('input:not([type=\"submit\"]):not([type=\"button\"]):not([type=\"reset\"]), textarea, select').forEach(function (el) {\n    if (el.type === 'checkbox' || el.type === 'radio') {\n      el.checked = false;\n    } else {\n      el.value = '';\n    }\n  });\n};\n\n// Fallback method for copying text to clipboard\nvar fallbackCopyTextToClipboard = function fallbackCopyTextToClipboard(text) {\n  var textarea = document.createElement('textarea');\n  textarea.value = text;\n  textarea.style.position = 'fixed';\n  textarea.style.top = '-9999px';\n  document.body.appendChild(textarea);\n  textarea.focus();\n  textarea.select();\n  try {\n    var successful = document.execCommand('copy');\n    document.body.removeChild(textarea);\n    return successful;\n  } catch (err) {\n    document.body.removeChild(textarea);\n    return false;\n  }\n};\n\n// Copy text to clipboard with notification\nvar copyToClipboard = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(text) {\n    var showNotification,\n      success,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          showNotification = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n          success = false;\n          if (!(navigator.clipboard && navigator.clipboard.writeText)) {\n            _context.next = 15;\n            break;\n          }\n          _context.prev = 3;\n          _context.next = 6;\n          return navigator.clipboard.writeText(text);\n        case 6:\n          success = true;\n          _context.next = 13;\n          break;\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](3);\n          console.error('Error copying text: ', _context.t0);\n          success = fallbackCopyTextToClipboard(text);\n        case 13:\n          _context.next = 16;\n          break;\n        case 15:\n          success = fallbackCopyTextToClipboard(text);\n        case 16:\n          if (success && showNotification) {\n            (0,_ui_notifications_js__WEBPACK_IMPORTED_MODULE_0__.showToast)('Copied to clipboard!');\n          }\n          return _context.abrupt(\"return\", success);\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 9]]);\n  }));\n  return function copyToClipboard(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// Download text as file\nvar downloadTextFile = function downloadTextFile(content, filename) {\n  var blob = new Blob([content], {\n    type: 'text/plain;charset=utf-8'\n  });\n  var url = URL.createObjectURL(blob);\n  var a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n  return true;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/utils/domUtils.js\n");

/***/ }),

/***/ "./public/js/utils/typeHelpers.js":
/*!****************************************!*\
  !*** ./public/js/utils/typeHelpers.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeHelpers: () => (/* binding */ TypeHelpers)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/placeholders.js */ \"./public/js/core/placeholders.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./public/js/utils/utils.js\");\n/* harmony import */ var _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StringUtils.js */ \"./public/js/utils/StringUtils.js\");\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// public/js/utils/typeHelpers.js\n\n\n\n\n\nvar TypeHelpers = {\n  // Helper functions for naturalizeType\n  _extractSubtype: function _extractSubtype(type, prefixLength) {\n    return _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.extractSubtype(type, prefixLength);\n  },\n  _formatNounType: function _formatNounType(sub, nounType, isPlural, isProper) {\n    if (sub.toLowerCase() === \"person\") {\n      return \"Person (\".concat(isProper ? 'proper' : 'common', \", \").concat(isPlural ? 'plural' : 'singular', \")\");\n    }\n    var displayText = _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.toTitleCase(_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(sub || (isProper ? \"Proper Noun\" : \"Common Noun\")));\n    return \"\".concat(displayText, \" (\").concat(isPlural ? 'Plural' : 'Singular', \")\");\n  },\n  naturalizeType: function naturalizeType(type) {\n    // Handle noun patterns (NNP/NNPS/NN/NNS)\n    if (type.startsWith(\"NNP\") || type.startsWith(\"NN\")) {\n      var isProper = type.startsWith(\"NNP\");\n      var isPlural = type.startsWith(\"NNS\") || type.startsWith(\"NNPS\");\n      var prefixLength = isProper ? isPlural ? 4 : 3 : isPlural ? 3 : 2;\n      var sub = TypeHelpers._extractSubtype(type, prefixLength);\n      return TypeHelpers._formatNounType(sub, type, isPlural, isProper);\n    }\n    if (type === \"Onomatopoeia\") return \"Onomatopoeia\";\n\n    // Handle modal verbs\n    if (type.startsWith(\"MD_\")) {\n      var tense = type.substring(3);\n      var tenseNatural = \"\";\n      switch (tense) {\n        case \"VB\":\n          tenseNatural = \"Base (run)\";\n          break;\n        case \"VBP\":\n          tenseNatural = \"Present (I walk)\";\n          break;\n        case \"VBZ\":\n          tenseNatural = \"3rd Person (he leaves)\";\n          break;\n        case \"VBD\":\n          tenseNatural = \"Past (slept)\";\n          break;\n        case \"VBG\":\n          tenseNatural = \"Gerund (crying)\";\n          break;\n        case \"VBN\":\n          tenseNatural = \"Past Participle (eaten)\";\n          break;\n        default:\n          tenseNatural = tense;\n      }\n      return \"Modal Verb (\" + tenseNatural + \")\";\n    }\n\n    // Handle verb tenses\n    var verbTenseMap = {\n      \"VBZ\": \"3rd Person (he leaves)\",\n      \"VBD\": \"Past Tense (slept)\",\n      \"VBG\": \"Gerund (crying)\",\n      \"VBN\": \"Past Participle (eaten)\",\n      \"VBP\": \"Present (I walk)\"\n    };\n    for (var _tense in verbTenseMap) {\n      if (type.startsWith(_tense)) {\n        var remainder = type.substring(_tense.length);\n        var category = remainder.startsWith(\"_\") ? remainder.substring(1) : \"\";\n        return category ? _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.toTitleCase(category) + \" Verb (\" + verbTenseMap[_tense] + \")\" : \"Verb (\" + verbTenseMap[_tense] + \")\";\n      }\n    }\n\n    // Handle base verb form\n    if (type.startsWith(\"VB\")) {\n      var rest = type.substring(2).replace(/^_+/, \"\");\n      return rest ? _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.toTitleCase(rest) + \" Verb (Base Form)\" : \"Verb (Base Form)\";\n    }\n\n    // Handle adjectives and other types\n    if (type.startsWith(\"JJ_\")) {\n      return _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.toTitleCase(_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(type.substring(3)));\n    }\n    if (type.startsWith(\"JJS_\")) {\n      var _sub = type.substring(4);\n      if (_sub.toLowerCase() === \"ordinal\") {\n        return \"Ordinal Number\";\n      }\n      return _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.toTitleCase(_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(_sub)) + \" Superlative Adjective\";\n    }\n\n    // Handle standard part-of-speech abbreviations\n    var posMap = {\n      \"JJ\": \"Adjective\",\n      \"JJR\": \"Comparative Adjective\",\n      \"JJS\": \"Superlative Adjective\",\n      \"RB\": \"Adverb\",\n      \"RBR\": \"Comparative Adverb\",\n      \"RBS\": \"Superlative Adverb\",\n      \"WRB\": \"WH-adverb\",\n      \"CC\": \"Coordinating Conjunction\",\n      \"PDT\": \"Pre-determiner\",\n      \"WDT\": \"WH-determiner\",\n      \"FW\": \"Foreign Word\",\n      \"Number\": \"Number\",\n      \"Exclamation\": \"Exclamation\"\n    };\n    return posMap[type] || type;\n  },\n  getTooltipForType: function getTooltipForType(type) {\n    var normalizedType = type.trim().toLowerCase();\n    for (var category in _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders) {\n      var _iterator = _createForOfIteratorHelper(_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders[category]),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          if (p.internalType.trim().toLowerCase() === normalizedType) {\n            return p.tooltip;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    var verbTensePrefixes = [\"VBZ\", \"VBD\", \"VBG\", \"VBN\", \"VBP\"];\n    for (var _i = 0, _verbTensePrefixes = verbTensePrefixes; _i < _verbTensePrefixes.length; _i++) {\n      var prefix = _verbTensePrefixes[_i];\n      if (normalizedType.startsWith(prefix.toLowerCase() + \"_\")) {\n        var baseType = \"vb_\" + normalizedType.substring(prefix.length + 1);\n        for (var _category in _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders) {\n          var _iterator2 = _createForOfIteratorHelper(_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders[_category]),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _p = _step2.value;\n              if (_p.internalType.trim().toLowerCase() === baseType) {\n                return _p.tooltip;\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    }\n    return \"No additional info available.\";\n  },\n  getOriginalDisplayForType: function getOriginalDisplayForType(type) {\n    for (var category in _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders) {\n      var _iterator3 = _createForOfIteratorHelper(_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders[category]),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var p = _step3.value;\n          if (p.internalType === type) {\n            return p.display;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    return type.startsWith(\"NN\") ? TypeHelpers.naturalizeType(type) : type;\n  },\n  guessTypeFromId: function guessTypeFromId(id) {\n    var base = id.replace(/\\d+$/, '');\n    var custom = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.find(function (p) {\n      return p.type === base;\n    });\n    if (custom) return custom.type;\n    var pronounFixedRe = /^PRP(\\d+)(SUB|OBJ|PSA|PSP|REF)$/;\n    if (pronounFixedRe.test(id)) {\n      var match = id.match(pronounFixedRe);\n      var groupNum = match[1];\n      var abbrev = match[2];\n      var formMapReverse = {\n        SUB: \"subject\",\n        OBJ: \"object\",\n        PSA: \"possAdj\",\n        PSP: \"possPron\",\n        REF: \"reflexive\"\n      };\n      return \"PRONOUN|PronounGroup\".concat(groupNum, \"|\").concat(formMapReverse[abbrev]);\n    }\n    var pronounRe = /^([A-Za-z0-9]+)_(subject|object|possAdj|possPron|reflexive)$/;\n    if (pronounRe.test(base)) {\n      var m = base.match(pronounRe);\n      return \"PRONOUN|\".concat(m[1], \"|\").concat(m[2]);\n    }\n    return TypeHelpers.naturalizeType(base);\n  },\n  getNounFinalType: function getNounFinalType(baseInternal, number) {\n    var baseTag = \"\",\n      extra = \"\";\n    if (baseInternal.indexOf(\"_\") !== -1) {\n      var parts = baseInternal.split(\"_\");\n      baseTag = parts[0];\n      extra = parts.slice(1).join(\"_\");\n    } else {\n      baseTag = baseInternal;\n    }\n    var finalTag = baseTag === \"NN\" ? number === \"Singular\" ? \"NN\" : \"NNS\" : baseTag === \"NNP\" ? number === \"Singular\" ? \"NNP\" : \"NNPS\" : number === \"Singular\" ? baseTag : baseTag + \"S\";\n    return extra ? finalTag + \"_\" + extra : finalTag;\n  },\n  computeFinalVerbType: function computeFinalVerbType(baseInternal, tenseTag) {\n    if (baseInternal === \"MD\") return \"MD_\" + tenseTag;\n    var parts = baseInternal.split(\"_\");\n    var baseCategory = parts.slice(1).join(\"_\");\n    return baseCategory ? tenseTag + \"_\" + baseCategory : tenseTag;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/utils/typeHelpers.js\n");

/***/ }),

/***/ "./public/js/utils/utils.js":
/*!**********************************!*\
  !*** ./public/js/utils/utils.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringUtils: () => (/* reexport safe */ _StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils),\n/* harmony export */   Utils: () => (/* binding */ Utils),\n/* harmony export */   decodeHTMLEntities: () => (/* reexport safe */ _StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLEntities)\n/* harmony export */ });\n/* harmony import */ var _StringUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StringUtils.js */ \"./public/js/utils/StringUtils.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// public/js/utils/utils.js\n\n\nvar Utils = _objectSpread({\n  debounce: function debounce(func, delay) {\n    var timeout;\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var context = this;\n      clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        return func.apply(context, args);\n      }, delay);\n    };\n  }\n}, _StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvanMvdXRpbHMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ21FO0FBRXhCO0FBRXBDLElBQU1FLEtBQUssR0FBQUMsYUFBQTtFQUNoQkMsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUdDLElBQUksRUFBRUMsS0FBSyxFQUFLO0lBQ3pCLElBQUlDLE9BQU87SUFDWCxPQUFPLFlBQWtCO01BQUEsU0FBQUMsSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBTkMsSUFBSSxPQUFBQyxLQUFBLENBQUFKLElBQUEsR0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtRQUFKRixJQUFJLENBQUFFLElBQUEsSUFBQUosU0FBQSxDQUFBSSxJQUFBO01BQUE7TUFDckIsSUFBTUMsT0FBTyxHQUFHLElBQUk7TUFDcEJDLFlBQVksQ0FBQ1IsT0FBTyxDQUFDO01BQ3JCQSxPQUFPLEdBQUdTLFVBQVUsQ0FBQztRQUFBLE9BQU1YLElBQUksQ0FBQ1ksS0FBSyxDQUFDSCxPQUFPLEVBQUVILElBQUksQ0FBQztNQUFBLEdBQUVMLEtBQUssQ0FBQztJQUM5RCxDQUFDO0VBQ0g7QUFBQyxHQUVFTix3REFBVyxDQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmtib29rLy4vcHVibGljL2pzL3V0aWxzL3V0aWxzLmpzP2YxMTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcHVibGljL2pzL3V0aWxzL3V0aWxzLmpzXHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzLCBkZWNvZGVIVE1MRW50aXRpZXMgfSBmcm9tICcuL1N0cmluZ1V0aWxzLmpzJztcclxuXHJcbmV4cG9ydCB7IFN0cmluZ1V0aWxzLCBkZWNvZGVIVE1MRW50aXRpZXMgfTtcclxuXHJcbmV4cG9ydCBjb25zdCBVdGlscyA9IHtcclxuICBkZWJvdW5jZTogKGZ1bmMsIGRlbGF5KSA9PiB7XHJcbiAgICBsZXQgdGltZW91dDtcclxuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XHJcbiAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xyXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyksIGRlbGF5KTtcclxuICAgIH07XHJcbiAgfSxcclxuICAvLyBSZS1leHBvcnQgc3RyaW5nIHV0aWxpdGllcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxyXG4gIC4uLlN0cmluZ1V0aWxzXHJcbn07Il0sIm5hbWVzIjpbIlN0cmluZ1V0aWxzIiwiZGVjb2RlSFRNTEVudGl0aWVzIiwiVXRpbHMiLCJfb2JqZWN0U3ByZWFkIiwiZGVib3VuY2UiLCJmdW5jIiwiZGVsYXkiLCJ0aW1lb3V0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb250ZXh0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/js/utils/utils.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./public/js/main.js");
/******/ 	
/******/ })()
;