/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/ansi-html-community/index.js":
/*!**********************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/ansi-html-community/index.js ***!
  \**********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = ansiHTML\n\n// Reference to https://github.com/sindresorhus/ansi-regex\nvar _regANSI = /(?:(?:\\u001b\\[)|\\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\\u001b[A-M]/\n\nvar _defColors = {\n  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]\n  black: '000',\n  red: 'ff0000',\n  green: '209805',\n  yellow: 'e8bf03',\n  blue: '0000ff',\n  magenta: 'ff00ff',\n  cyan: '00ffee',\n  lightgrey: 'f0f0f0',\n  darkgrey: '888'\n}\nvar _styles = {\n  30: 'black',\n  31: 'red',\n  32: 'green',\n  33: 'yellow',\n  34: 'blue',\n  35: 'magenta',\n  36: 'cyan',\n  37: 'lightgrey'\n}\nvar _openTags = {\n  '1': 'font-weight:bold', // bold\n  '2': 'opacity:0.5', // dim\n  '3': '<i>', // italic\n  '4': '<u>', // underscore\n  '8': 'display:none', // hidden\n  '9': '<del>' // delete\n}\nvar _closeTags = {\n  '23': '</i>', // reset italic\n  '24': '</u>', // reset underscore\n  '29': '</del>' // reset delete\n}\n\n;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {\n  _closeTags[n] = '</span>'\n})\n\n/**\n * Converts text with ANSI color codes to HTML markup.\n * @param {String} text\n * @returns {*}\n */\nfunction ansiHTML (text) {\n  // Returns the text if the string has no ANSI escape code.\n  if (!_regANSI.test(text)) {\n    return text\n  }\n\n  // Cache opened sequence.\n  var ansiCodes = []\n  // Replace with markup.\n  var ret = text.replace(/\\033\\[(\\d+)m/g, function (match, seq) {\n    var ot = _openTags[seq]\n    if (ot) {\n      // If current sequence has been opened, close it.\n      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast\n        ansiCodes.pop()\n        return '</span>'\n      }\n      // Open tag.\n      ansiCodes.push(seq)\n      return ot[0] === '<' ? ot : '<span style=\"' + ot + ';\">'\n    }\n\n    var ct = _closeTags[seq]\n    if (ct) {\n      // Pop sequence\n      ansiCodes.pop()\n      return ct\n    }\n    return ''\n  })\n\n  // Make sure tags are closed.\n  var l = ansiCodes.length\n  ;(l > 0) && (ret += Array(l + 1).join('</span>'))\n\n  return ret\n}\n\n/**\n * Customize colors.\n * @param {Object} colors reference to _defColors\n */\nansiHTML.setColors = function (colors) {\n  if (typeof colors !== 'object') {\n    throw new Error('`colors` parameter must be an Object.')\n  }\n\n  var _finalColors = {}\n  for (var key in _defColors) {\n    var hex = colors.hasOwnProperty(key) ? colors[key] : null\n    if (!hex) {\n      _finalColors[key] = _defColors[key]\n      continue\n    }\n    if ('reset' === key) {\n      if (typeof hex === 'string') {\n        hex = [hex]\n      }\n      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {\n        return typeof h !== 'string'\n      })) {\n        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')\n      }\n      var defHexColor = _defColors[key]\n      if (!hex[0]) {\n        hex[0] = defHexColor[0]\n      }\n      if (hex.length === 1 || !hex[1]) {\n        hex = [hex[0]]\n        hex.push(defHexColor[1])\n      }\n\n      hex = hex.slice(0, 2)\n    } else if (typeof hex !== 'string') {\n      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')\n    }\n    _finalColors[key] = hex\n  }\n  _setTags(_finalColors)\n}\n\n/**\n * Reset colors.\n */\nansiHTML.reset = function () {\n  _setTags(_defColors)\n}\n\n/**\n * Expose tags, including open and close.\n * @type {Object}\n */\nansiHTML.tags = {}\n\nif (Object.defineProperty) {\n  Object.defineProperty(ansiHTML.tags, 'open', {\n    get: function () { return _openTags }\n  })\n  Object.defineProperty(ansiHTML.tags, 'close', {\n    get: function () { return _closeTags }\n  })\n} else {\n  ansiHTML.tags.open = _openTags\n  ansiHTML.tags.close = _closeTags\n}\n\nfunction _setTags (colors) {\n  // reset all\n  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]\n  // inverse\n  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]\n  // dark grey\n  _openTags['90'] = 'color:#' + colors.darkgrey\n\n  for (var code in _styles) {\n    var color = _styles[code]\n    var oriColor = colors[color] || '000'\n    _openTags[code] = 'color:#' + oriColor\n    code = parseInt(code)\n    _openTags[(code + 10).toString()] = 'background:#' + oriColor\n  }\n}\n\nansiHTML.reset()\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC1jb21tdW5pdHkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7O0FBRUE7QUFDQSxtREFBbUQsSUFBSSxTQUFTLE1BQU0sSUFBSTs7QUFFMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLEdBQUc7QUFDSDtBQUNBLHVCQUF1QjtBQUN2QixHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUNBQXVDLFVBQVUsK0JBQStCO0FBQ2hGO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rYm9vay8uLi8uLi8uLi9PbmVEcml2ZS9EZXZlbG9wbWVudC9IVE1ML0JsYW5rQm9vay9ub2RlX21vZHVsZXMvYW5zaS1odG1sLWNvbW11bml0eS9pbmRleC5qcz84YTIxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFuc2lIVE1MXG5cbi8vIFJlZmVyZW5jZSB0byBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2Fuc2ktcmVnZXhcbnZhciBfcmVnQU5TSSA9IC8oPzooPzpcXHUwMDFiXFxbKXxcXHUwMDliKSg/Oig/OlswLTldezEsM30pPyg/Oig/OjtbMC05XXswLDN9KSopP1tBLU18Zi1tXSl8XFx1MDAxYltBLU1dL1xuXG52YXIgX2RlZkNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsnZmZmJywgJzAwMCddLCAvLyBbRk9SRUdST1VEX0NPTE9SLCBCQUNLR1JPVU5EX0NPTE9SXVxuICBibGFjazogJzAwMCcsXG4gIHJlZDogJ2ZmMDAwMCcsXG4gIGdyZWVuOiAnMjA5ODA1JyxcbiAgeWVsbG93OiAnZThiZjAzJyxcbiAgYmx1ZTogJzAwMDBmZicsXG4gIG1hZ2VudGE6ICdmZjAwZmYnLFxuICBjeWFuOiAnMDBmZmVlJyxcbiAgbGlnaHRncmV5OiAnZjBmMGYwJyxcbiAgZGFya2dyZXk6ICc4ODgnXG59XG52YXIgX3N0eWxlcyA9IHtcbiAgMzA6ICdibGFjaycsXG4gIDMxOiAncmVkJyxcbiAgMzI6ICdncmVlbicsXG4gIDMzOiAneWVsbG93JyxcbiAgMzQ6ICdibHVlJyxcbiAgMzU6ICdtYWdlbnRhJyxcbiAgMzY6ICdjeWFuJyxcbiAgMzc6ICdsaWdodGdyZXknXG59XG52YXIgX29wZW5UYWdzID0ge1xuICAnMSc6ICdmb250LXdlaWdodDpib2xkJywgLy8gYm9sZFxuICAnMic6ICdvcGFjaXR5OjAuNScsIC8vIGRpbVxuICAnMyc6ICc8aT4nLCAvLyBpdGFsaWNcbiAgJzQnOiAnPHU+JywgLy8gdW5kZXJzY29yZVxuICAnOCc6ICdkaXNwbGF5Om5vbmUnLCAvLyBoaWRkZW5cbiAgJzknOiAnPGRlbD4nIC8vIGRlbGV0ZVxufVxudmFyIF9jbG9zZVRhZ3MgPSB7XG4gICcyMyc6ICc8L2k+JywgLy8gcmVzZXQgaXRhbGljXG4gICcyNCc6ICc8L3U+JywgLy8gcmVzZXQgdW5kZXJzY29yZVxuICAnMjknOiAnPC9kZWw+JyAvLyByZXNldCBkZWxldGVcbn1cblxuO1swLCAyMSwgMjIsIDI3LCAyOCwgMzksIDQ5XS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gIF9jbG9zZVRhZ3Nbbl0gPSAnPC9zcGFuPidcbn0pXG5cbi8qKlxuICogQ29udmVydHMgdGV4dCB3aXRoIEFOU0kgY29sb3IgY29kZXMgdG8gSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGFuc2lIVE1MICh0ZXh0KSB7XG4gIC8vIFJldHVybnMgdGhlIHRleHQgaWYgdGhlIHN0cmluZyBoYXMgbm8gQU5TSSBlc2NhcGUgY29kZS5cbiAgaWYgKCFfcmVnQU5TSS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIC8vIENhY2hlIG9wZW5lZCBzZXF1ZW5jZS5cbiAgdmFyIGFuc2lDb2RlcyA9IFtdXG4gIC8vIFJlcGxhY2Ugd2l0aCBtYXJrdXAuXG4gIHZhciByZXQgPSB0ZXh0LnJlcGxhY2UoL1xcMDMzXFxbKFxcZCspbS9nLCBmdW5jdGlvbiAobWF0Y2gsIHNlcSkge1xuICAgIHZhciBvdCA9IF9vcGVuVGFnc1tzZXFdXG4gICAgaWYgKG90KSB7XG4gICAgICAvLyBJZiBjdXJyZW50IHNlcXVlbmNlIGhhcyBiZWVuIG9wZW5lZCwgY2xvc2UgaXQuXG4gICAgICBpZiAoISF+YW5zaUNvZGVzLmluZGV4T2Yoc2VxKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdFxuICAgICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgICAgcmV0dXJuICc8L3NwYW4+J1xuICAgICAgfVxuICAgICAgLy8gT3BlbiB0YWcuXG4gICAgICBhbnNpQ29kZXMucHVzaChzZXEpXG4gICAgICByZXR1cm4gb3RbMF0gPT09ICc8JyA/IG90IDogJzxzcGFuIHN0eWxlPVwiJyArIG90ICsgJztcIj4nXG4gICAgfVxuXG4gICAgdmFyIGN0ID0gX2Nsb3NlVGFnc1tzZXFdXG4gICAgaWYgKGN0KSB7XG4gICAgICAvLyBQb3Agc2VxdWVuY2VcbiAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgcmV0dXJuIGN0XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9KVxuXG4gIC8vIE1ha2Ugc3VyZSB0YWdzIGFyZSBjbG9zZWQuXG4gIHZhciBsID0gYW5zaUNvZGVzLmxlbmd0aFxuICA7KGwgPiAwKSAmJiAocmV0ICs9IEFycmF5KGwgKyAxKS5qb2luKCc8L3NwYW4+JykpXG5cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIEN1c3RvbWl6ZSBjb2xvcnMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIHJlZmVyZW5jZSB0byBfZGVmQ29sb3JzXG4gKi9cbmFuc2lIVE1MLnNldENvbG9ycyA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgaWYgKHR5cGVvZiBjb2xvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgY29sb3JzYCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBPYmplY3QuJylcbiAgfVxuXG4gIHZhciBfZmluYWxDb2xvcnMgPSB7fVxuICBmb3IgKHZhciBrZXkgaW4gX2RlZkNvbG9ycykge1xuICAgIHZhciBoZXggPSBjb2xvcnMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGNvbG9yc1trZXldIDogbnVsbFxuICAgIGlmICghaGV4KSB7XG4gICAgICBfZmluYWxDb2xvcnNba2V5XSA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKCdyZXNldCcgPT09IGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGhleCA9IFtoZXhdXG4gICAgICB9XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGV4KSB8fCBoZXgubGVuZ3RoID09PSAwIHx8IGhleC5zb21lKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaCAhPT0gJ3N0cmluZydcbiAgICAgIH0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhbiBBcnJheSBhbmQgZWFjaCBpdGVtIGNvdWxkIG9ubHkgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgICAgfVxuICAgICAgdmFyIGRlZkhleENvbG9yID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBpZiAoIWhleFswXSkge1xuICAgICAgICBoZXhbMF0gPSBkZWZIZXhDb2xvclswXVxuICAgICAgfVxuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEgfHwgIWhleFsxXSkge1xuICAgICAgICBoZXggPSBbaGV4WzBdXVxuICAgICAgICBoZXgucHVzaChkZWZIZXhDb2xvclsxXSlcbiAgICAgIH1cblxuICAgICAgaGV4ID0gaGV4LnNsaWNlKDAsIDIpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICB9XG4gICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBoZXhcbiAgfVxuICBfc2V0VGFncyhfZmluYWxDb2xvcnMpXG59XG5cbi8qKlxuICogUmVzZXQgY29sb3JzLlxuICovXG5hbnNpSFRNTC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgX3NldFRhZ3MoX2RlZkNvbG9ycylcbn1cblxuLyoqXG4gKiBFeHBvc2UgdGFncywgaW5jbHVkaW5nIG9wZW4gYW5kIGNsb3NlLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuYW5zaUhUTUwudGFncyA9IHt9XG5cbmlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdvcGVuJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX29wZW5UYWdzIH1cbiAgfSlcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdjbG9zZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9jbG9zZVRhZ3MgfVxuICB9KVxufSBlbHNlIHtcbiAgYW5zaUhUTUwudGFncy5vcGVuID0gX29wZW5UYWdzXG4gIGFuc2lIVE1MLnRhZ3MuY2xvc2UgPSBfY2xvc2VUYWdzXG59XG5cbmZ1bmN0aW9uIF9zZXRUYWdzIChjb2xvcnMpIHtcbiAgLy8gcmVzZXQgYWxsXG4gIF9vcGVuVGFnc1snMCddID0gJ2ZvbnQtd2VpZ2h0Om5vcm1hbDtvcGFjaXR5OjE7Y29sb3I6IycgKyBjb2xvcnMucmVzZXRbMF0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMV1cbiAgLy8gaW52ZXJzZVxuICBfb3BlblRhZ3NbJzcnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5yZXNldFsxXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFswXVxuICAvLyBkYXJrIGdyZXlcbiAgX29wZW5UYWdzWyc5MCddID0gJ2NvbG9yOiMnICsgY29sb3JzLmRhcmtncmV5XG5cbiAgZm9yICh2YXIgY29kZSBpbiBfc3R5bGVzKSB7XG4gICAgdmFyIGNvbG9yID0gX3N0eWxlc1tjb2RlXVxuICAgIHZhciBvcmlDb2xvciA9IGNvbG9yc1tjb2xvcl0gfHwgJzAwMCdcbiAgICBfb3BlblRhZ3NbY29kZV0gPSAnY29sb3I6IycgKyBvcmlDb2xvclxuICAgIGNvZGUgPSBwYXJzZUludChjb2RlKVxuICAgIF9vcGVuVGFnc1soY29kZSArIDEwKS50b1N0cmluZygpXSA9ICdiYWNrZ3JvdW5kOiMnICsgb3JpQ29sb3JcbiAgfVxufVxuXG5hbnNpSFRNTC5yZXNldCgpXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/ansi-html-community/index.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/events/events.js":
/*!**********************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/events/events.js ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/events/events.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/sweetalert2/dist/sweetalert2.all.js":
/*!*****************************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/sweetalert2/dist/sweetalert2.all.js ***!
  \*****************************************************************************************************/
/***/ (function(module) {

eval("/*!\n* sweetalert2 v11.4.8\n* Released under the MIT License.\n*/\n(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, function () { 'use strict';\n\n  const consolePrefix = 'SweetAlert2:';\n  /**\n   * Filter the unique values into a new array\n   * @param arr\n   */\n\n  const uniqueArray = arr => {\n    const result = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n\n    return result;\n  };\n  /**\n   * Capitalize the first letter of a string\n   * @param {string} str\n   * @returns {string}\n   */\n\n  const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);\n  /**\n   * @param {NodeList | HTMLCollection | NamedNodeMap} nodeList\n   * @returns {array}\n   */\n\n  const toArray = nodeList => Array.prototype.slice.call(nodeList);\n  /**\n   * Standardize console warnings\n   * @param {string | array} message\n   */\n\n  const warn = message => {\n    console.warn(\"\".concat(consolePrefix, \" \").concat(typeof message === 'object' ? message.join(' ') : message));\n  };\n  /**\n   * Standardize console errors\n   * @param {string} message\n   */\n\n  const error = message => {\n    console.error(\"\".concat(consolePrefix, \" \").concat(message));\n  };\n  /**\n   * Private global state for `warnOnce`\n   * @type {Array}\n   * @private\n   */\n\n  const previousWarnOnceMessages = [];\n  /**\n   * Show a console warning, but only if it hasn't already been shown\n   * @param {string} message\n   */\n\n  const warnOnce = message => {\n    if (!previousWarnOnceMessages.includes(message)) {\n      previousWarnOnceMessages.push(message);\n      warn(message);\n    }\n  };\n  /**\n   * Show a one-time console warning about deprecated params/methods\n   */\n\n  const warnAboutDeprecation = (deprecatedParam, useInstead) => {\n    warnOnce(\"\\\"\".concat(deprecatedParam, \"\\\" is deprecated and will be removed in the next major release. Please use \\\"\").concat(useInstead, \"\\\" instead.\"));\n  };\n  /**\n   * If `arg` is a function, call it (with no arguments or context) and return the result.\n   * Otherwise, just pass the value through\n   * @param arg\n   */\n\n  const callIfFunction = arg => typeof arg === 'function' ? arg() : arg;\n  const hasToPromiseFn = arg => arg && typeof arg.toPromise === 'function';\n  const asPromise = arg => hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);\n  const isPromise = arg => arg && Promise.resolve(arg) === arg;\n\n  const defaultParams = {\n    title: '',\n    titleText: '',\n    text: '',\n    html: '',\n    footer: '',\n    icon: undefined,\n    iconColor: undefined,\n    iconHtml: undefined,\n    template: undefined,\n    toast: false,\n    showClass: {\n      popup: 'swal2-show',\n      backdrop: 'swal2-backdrop-show',\n      icon: 'swal2-icon-show'\n    },\n    hideClass: {\n      popup: 'swal2-hide',\n      backdrop: 'swal2-backdrop-hide',\n      icon: 'swal2-icon-hide'\n    },\n    customClass: {},\n    target: 'body',\n    color: undefined,\n    backdrop: true,\n    heightAuto: true,\n    allowOutsideClick: true,\n    allowEscapeKey: true,\n    allowEnterKey: true,\n    stopKeydownPropagation: true,\n    keydownListenerCapture: false,\n    showConfirmButton: true,\n    showDenyButton: false,\n    showCancelButton: false,\n    preConfirm: undefined,\n    preDeny: undefined,\n    confirmButtonText: 'OK',\n    confirmButtonAriaLabel: '',\n    confirmButtonColor: undefined,\n    denyButtonText: 'No',\n    denyButtonAriaLabel: '',\n    denyButtonColor: undefined,\n    cancelButtonText: 'Cancel',\n    cancelButtonAriaLabel: '',\n    cancelButtonColor: undefined,\n    buttonsStyling: true,\n    reverseButtons: false,\n    focusConfirm: true,\n    focusDeny: false,\n    focusCancel: false,\n    returnFocus: true,\n    showCloseButton: false,\n    closeButtonHtml: '&times;',\n    closeButtonAriaLabel: 'Close this dialog',\n    loaderHtml: '',\n    showLoaderOnConfirm: false,\n    showLoaderOnDeny: false,\n    imageUrl: undefined,\n    imageWidth: undefined,\n    imageHeight: undefined,\n    imageAlt: '',\n    timer: undefined,\n    timerProgressBar: false,\n    width: undefined,\n    padding: undefined,\n    background: undefined,\n    input: undefined,\n    inputPlaceholder: '',\n    inputLabel: '',\n    inputValue: '',\n    inputOptions: {},\n    inputAutoTrim: true,\n    inputAttributes: {},\n    inputValidator: undefined,\n    returnInputValueOnDeny: false,\n    validationMessage: undefined,\n    grow: false,\n    position: 'center',\n    progressSteps: [],\n    currentProgressStep: undefined,\n    progressStepsDistance: undefined,\n    willOpen: undefined,\n    didOpen: undefined,\n    didRender: undefined,\n    willClose: undefined,\n    didClose: undefined,\n    didDestroy: undefined,\n    scrollbarPadding: true\n  };\n  const updatableParams = ['allowEscapeKey', 'allowOutsideClick', 'background', 'buttonsStyling', 'cancelButtonAriaLabel', 'cancelButtonColor', 'cancelButtonText', 'closeButtonAriaLabel', 'closeButtonHtml', 'color', 'confirmButtonAriaLabel', 'confirmButtonColor', 'confirmButtonText', 'currentProgressStep', 'customClass', 'denyButtonAriaLabel', 'denyButtonColor', 'denyButtonText', 'didClose', 'didDestroy', 'footer', 'hideClass', 'html', 'icon', 'iconColor', 'iconHtml', 'imageAlt', 'imageHeight', 'imageUrl', 'imageWidth', 'preConfirm', 'preDeny', 'progressSteps', 'returnFocus', 'reverseButtons', 'showCancelButton', 'showCloseButton', 'showConfirmButton', 'showDenyButton', 'text', 'title', 'titleText', 'willClose'];\n  const deprecatedParams = {};\n  const toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusDeny', 'focusCancel', 'returnFocus', 'heightAuto', 'keydownListenerCapture'];\n  /**\n   * Is valid parameter\n   * @param {string} paramName\n   */\n\n  const isValidParameter = paramName => {\n    return Object.prototype.hasOwnProperty.call(defaultParams, paramName);\n  };\n  /**\n   * Is valid parameter for Swal.update() method\n   * @param {string} paramName\n   */\n\n  const isUpdatableParameter = paramName => {\n    return updatableParams.indexOf(paramName) !== -1;\n  };\n  /**\n   * Is deprecated parameter\n   * @param {string} paramName\n   */\n\n  const isDeprecatedParameter = paramName => {\n    return deprecatedParams[paramName];\n  };\n\n  const checkIfParamIsValid = param => {\n    if (!isValidParameter(param)) {\n      warn(\"Unknown parameter \\\"\".concat(param, \"\\\"\"));\n    }\n  };\n\n  const checkIfToastParamIsValid = param => {\n    if (toastIncompatibleParams.includes(param)) {\n      warn(\"The parameter \\\"\".concat(param, \"\\\" is incompatible with toasts\"));\n    }\n  };\n\n  const checkIfParamIsDeprecated = param => {\n    if (isDeprecatedParameter(param)) {\n      warnAboutDeprecation(param, isDeprecatedParameter(param));\n    }\n  };\n  /**\n   * Show relevant warnings for given params\n   *\n   * @param params\n   */\n\n\n  const showWarningsForParams = params => {\n    if (!params.backdrop && params.allowOutsideClick) {\n      warn('\"allowOutsideClick\" parameter requires `backdrop` parameter to be set to `true`');\n    }\n\n    for (const param in params) {\n      checkIfParamIsValid(param);\n\n      if (params.toast) {\n        checkIfToastParamIsValid(param);\n      }\n\n      checkIfParamIsDeprecated(param);\n    }\n  };\n\n  const swalPrefix = 'swal2-';\n  const prefix = items => {\n    const result = {};\n\n    for (const i in items) {\n      result[items[i]] = swalPrefix + items[i];\n    }\n\n    return result;\n  };\n  const swalClasses = prefix(['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'no-transition', 'toast', 'toast-shown', 'show', 'hide', 'close', 'title', 'html-container', 'actions', 'confirm', 'deny', 'cancel', 'default-outline', 'footer', 'icon', 'icon-content', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'input-label', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loader', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl', 'timer-progress-bar', 'timer-progress-bar-container', 'scrollbar-measure', 'icon-success', 'icon-warning', 'icon-info', 'icon-question', 'icon-error']);\n  const iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);\n\n  /**\n   * Gets the popup container which contains the backdrop and the popup itself.\n   *\n   * @returns {HTMLElement | null}\n   */\n\n  const getContainer = () => document.body.querySelector(\".\".concat(swalClasses.container));\n  const elementBySelector = selectorString => {\n    const container = getContainer();\n    return container ? container.querySelector(selectorString) : null;\n  };\n\n  const elementByClass = className => {\n    return elementBySelector(\".\".concat(className));\n  };\n\n  const getPopup = () => elementByClass(swalClasses.popup);\n  const getIcon = () => elementByClass(swalClasses.icon);\n  const getTitle = () => elementByClass(swalClasses.title);\n  const getHtmlContainer = () => elementByClass(swalClasses['html-container']);\n  const getImage = () => elementByClass(swalClasses.image);\n  const getProgressSteps = () => elementByClass(swalClasses['progress-steps']);\n  const getValidationMessage = () => elementByClass(swalClasses['validation-message']);\n  const getConfirmButton = () => elementBySelector(\".\".concat(swalClasses.actions, \" .\").concat(swalClasses.confirm));\n  const getDenyButton = () => elementBySelector(\".\".concat(swalClasses.actions, \" .\").concat(swalClasses.deny));\n  const getInputLabel = () => elementByClass(swalClasses['input-label']);\n  const getLoader = () => elementBySelector(\".\".concat(swalClasses.loader));\n  const getCancelButton = () => elementBySelector(\".\".concat(swalClasses.actions, \" .\").concat(swalClasses.cancel));\n  const getActions = () => elementByClass(swalClasses.actions);\n  const getFooter = () => elementByClass(swalClasses.footer);\n  const getTimerProgressBar = () => elementByClass(swalClasses['timer-progress-bar']);\n  const getCloseButton = () => elementByClass(swalClasses.close); // https://github.com/jkup/focusable/blob/master/index.js\n\n  const focusable = \"\\n  a[href],\\n  area[href],\\n  input:not([disabled]),\\n  select:not([disabled]),\\n  textarea:not([disabled]),\\n  button:not([disabled]),\\n  iframe,\\n  object,\\n  embed,\\n  [tabindex=\\\"0\\\"],\\n  [contenteditable],\\n  audio[controls],\\n  video[controls],\\n  summary\\n\";\n  const getFocusableElements = () => {\n    const focusableElementsWithTabindex = toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex=\"-1\"]):not([tabindex=\"0\"])')) // sort according to tabindex\n    .sort((a, b) => {\n      const tabindexA = parseInt(a.getAttribute('tabindex'));\n      const tabindexB = parseInt(b.getAttribute('tabindex'));\n\n      if (tabindexA > tabindexB) {\n        return 1;\n      } else if (tabindexA < tabindexB) {\n        return -1;\n      }\n\n      return 0;\n    });\n    const otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(el => el.getAttribute('tabindex') !== '-1');\n    return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(el => isVisible(el));\n  };\n  const isModal = () => {\n    return hasClass(document.body, swalClasses.shown) && !hasClass(document.body, swalClasses['toast-shown']) && !hasClass(document.body, swalClasses['no-backdrop']);\n  };\n  const isToast = () => {\n    return getPopup() && hasClass(getPopup(), swalClasses.toast);\n  };\n  const isLoading = () => {\n    return getPopup().hasAttribute('data-loading');\n  };\n\n  const states = {\n    previousBodyPadding: null\n  };\n  /**\n   * Securely set innerHTML of an element\n   * https://github.com/sweetalert2/sweetalert2/issues/1926\n   *\n   * @param {HTMLElement} elem\n   * @param {string} html\n   */\n\n  const setInnerHtml = (elem, html) => {\n    elem.textContent = '';\n\n    if (html) {\n      const parser = new DOMParser();\n      const parsed = parser.parseFromString(html, \"text/html\");\n      toArray(parsed.querySelector('head').childNodes).forEach(child => {\n        elem.appendChild(child);\n      });\n      toArray(parsed.querySelector('body').childNodes).forEach(child => {\n        elem.appendChild(child);\n      });\n    }\n  };\n  /**\n   * @param {HTMLElement} elem\n   * @param {string} className\n   * @returns {boolean}\n   */\n\n  const hasClass = (elem, className) => {\n    if (!className) {\n      return false;\n    }\n\n    const classList = className.split(/\\s+/);\n\n    for (let i = 0; i < classList.length; i++) {\n      if (!elem.classList.contains(classList[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const removeCustomClasses = (elem, params) => {\n    toArray(elem.classList).forEach(className => {\n      if (!Object.values(swalClasses).includes(className) && !Object.values(iconTypes).includes(className) && !Object.values(params.showClass).includes(className)) {\n        elem.classList.remove(className);\n      }\n    });\n  };\n\n  const applyCustomClass = (elem, params, className) => {\n    removeCustomClasses(elem, params);\n\n    if (params.customClass && params.customClass[className]) {\n      if (typeof params.customClass[className] !== 'string' && !params.customClass[className].forEach) {\n        return warn(\"Invalid type of customClass.\".concat(className, \"! Expected string or iterable object, got \\\"\").concat(typeof params.customClass[className], \"\\\"\"));\n      }\n\n      addClass(elem, params.customClass[className]);\n    }\n  };\n  /**\n   * @param {HTMLElement} popup\n   * @param {string} inputType\n   * @returns {HTMLInputElement | null}\n   */\n\n  const getInput = (popup, inputType) => {\n    if (!inputType) {\n      return null;\n    }\n\n    switch (inputType) {\n      case 'select':\n      case 'textarea':\n      case 'file':\n        return popup.querySelector(\".\".concat(swalClasses.popup, \" > .\").concat(swalClasses[inputType]));\n\n      case 'checkbox':\n        return popup.querySelector(\".\".concat(swalClasses.popup, \" > .\").concat(swalClasses.checkbox, \" input\"));\n\n      case 'radio':\n        return popup.querySelector(\".\".concat(swalClasses.popup, \" > .\").concat(swalClasses.radio, \" input:checked\")) || popup.querySelector(\".\".concat(swalClasses.popup, \" > .\").concat(swalClasses.radio, \" input:first-child\"));\n\n      case 'range':\n        return popup.querySelector(\".\".concat(swalClasses.popup, \" > .\").concat(swalClasses.range, \" input\"));\n\n      default:\n        return popup.querySelector(\".\".concat(swalClasses.popup, \" > .\").concat(swalClasses.input));\n    }\n  };\n  /**\n   * @param {HTMLInputElement} input\n   */\n\n  const focusInput = input => {\n    input.focus(); // place cursor at end of text in text input\n\n    if (input.type !== 'file') {\n      // http://stackoverflow.com/a/2345915\n      const val = input.value;\n      input.value = '';\n      input.value = val;\n    }\n  };\n  /**\n   * @param {HTMLElement | HTMLElement[] | null} target\n   * @param {string | string[]} classList\n   * @param {boolean} condition\n   */\n\n  const toggleClass = (target, classList, condition) => {\n    if (!target || !classList) {\n      return;\n    }\n\n    if (typeof classList === 'string') {\n      classList = classList.split(/\\s+/).filter(Boolean);\n    }\n\n    classList.forEach(className => {\n      if (Array.isArray(target)) {\n        target.forEach(elem => {\n          condition ? elem.classList.add(className) : elem.classList.remove(className);\n        });\n      } else {\n        condition ? target.classList.add(className) : target.classList.remove(className);\n      }\n    });\n  };\n  /**\n   * @param {HTMLElement | HTMLElement[] | null} target\n   * @param {string | string[]} classList\n   */\n\n  const addClass = (target, classList) => {\n    toggleClass(target, classList, true);\n  };\n  /**\n   * @param {HTMLElement | HTMLElement[] | null} target\n   * @param {string | string[]} classList\n   */\n\n  const removeClass = (target, classList) => {\n    toggleClass(target, classList, false);\n  };\n  /**\n   * Get direct child of an element by class name\n   *\n   * @param {HTMLElement} elem\n   * @param {string} className\n   * @returns {HTMLElement | null}\n   */\n\n  const getDirectChildByClass = (elem, className) => {\n    const childNodes = toArray(elem.childNodes);\n\n    for (let i = 0; i < childNodes.length; i++) {\n      if (hasClass(childNodes[i], className)) {\n        return childNodes[i];\n      }\n    }\n  };\n  /**\n   * @param {HTMLElement} elem\n   * @param {string} property\n   * @param {*} value\n   */\n\n  const applyNumericalStyle = (elem, property, value) => {\n    if (value === \"\".concat(parseInt(value))) {\n      value = parseInt(value);\n    }\n\n    if (value || parseInt(value) === 0) {\n      elem.style[property] = typeof value === 'number' ? \"\".concat(value, \"px\") : value;\n    } else {\n      elem.style.removeProperty(property);\n    }\n  };\n  /**\n   * @param {HTMLElement} elem\n   * @param {string} display\n   */\n\n  const show = function (elem) {\n    let display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';\n    elem.style.display = display;\n  };\n  /**\n   * @param {HTMLElement} elem\n   */\n\n  const hide = elem => {\n    elem.style.display = 'none';\n  };\n  const setStyle = (parent, selector, property, value) => {\n    const el = parent.querySelector(selector);\n\n    if (el) {\n      el.style[property] = value;\n    }\n  };\n  const toggle = (elem, condition, display) => {\n    condition ? show(elem, display) : hide(elem);\n  }; // borrowed from jquery $(elem).is(':visible') implementation\n\n  const isVisible = elem => !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));\n  const allButtonsAreHidden = () => !isVisible(getConfirmButton()) && !isVisible(getDenyButton()) && !isVisible(getCancelButton());\n  const isScrollable = elem => !!(elem.scrollHeight > elem.clientHeight); // borrowed from https://stackoverflow.com/a/46352119\n\n  const hasCssAnimation = elem => {\n    const style = window.getComputedStyle(elem);\n    const animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');\n    const transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');\n    return animDuration > 0 || transDuration > 0;\n  };\n  const animateTimerProgressBar = function (timer) {\n    let reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const timerProgressBar = getTimerProgressBar();\n\n    if (isVisible(timerProgressBar)) {\n      if (reset) {\n        timerProgressBar.style.transition = 'none';\n        timerProgressBar.style.width = '100%';\n      }\n\n      setTimeout(() => {\n        timerProgressBar.style.transition = \"width \".concat(timer / 1000, \"s linear\");\n        timerProgressBar.style.width = '0%';\n      }, 10);\n    }\n  };\n  const stopTimerProgressBar = () => {\n    const timerProgressBar = getTimerProgressBar();\n    const timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\n    timerProgressBar.style.removeProperty('transition');\n    timerProgressBar.style.width = '100%';\n    const timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\n    const timerProgressBarPercent = timerProgressBarWidth / timerProgressBarFullWidth * 100;\n    timerProgressBar.style.removeProperty('transition');\n    timerProgressBar.style.width = \"\".concat(timerProgressBarPercent, \"%\");\n  };\n\n  /**\n   * Detect Node env\n   *\n   * @returns {boolean}\n   */\n  const isNodeEnv = () => typeof window === 'undefined' || typeof document === 'undefined';\n\n  const RESTORE_FOCUS_TIMEOUT = 100;\n\n  const globalState = {};\n\n  const focusPreviousActiveElement = () => {\n    if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {\n      globalState.previousActiveElement.focus();\n      globalState.previousActiveElement = null;\n    } else if (document.body) {\n      document.body.focus();\n    }\n  }; // Restore previous active (focused) element\n\n\n  const restoreActiveElement = returnFocus => {\n    return new Promise(resolve => {\n      if (!returnFocus) {\n        return resolve();\n      }\n\n      const x = window.scrollX;\n      const y = window.scrollY;\n      globalState.restoreFocusTimeout = setTimeout(() => {\n        focusPreviousActiveElement();\n        resolve();\n      }, RESTORE_FOCUS_TIMEOUT); // issues/900\n\n      window.scrollTo(x, y);\n    });\n  };\n\n  const sweetHTML = \"\\n <div aria-labelledby=\\\"\".concat(swalClasses.title, \"\\\" aria-describedby=\\\"\").concat(swalClasses['html-container'], \"\\\" class=\\\"\").concat(swalClasses.popup, \"\\\" tabindex=\\\"-1\\\">\\n   <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.close, \"\\\"></button>\\n   <ul class=\\\"\").concat(swalClasses['progress-steps'], \"\\\"></ul>\\n   <div class=\\\"\").concat(swalClasses.icon, \"\\\"></div>\\n   <img class=\\\"\").concat(swalClasses.image, \"\\\" />\\n   <h2 class=\\\"\").concat(swalClasses.title, \"\\\" id=\\\"\").concat(swalClasses.title, \"\\\"></h2>\\n   <div class=\\\"\").concat(swalClasses['html-container'], \"\\\" id=\\\"\").concat(swalClasses['html-container'], \"\\\"></div>\\n   <input class=\\\"\").concat(swalClasses.input, \"\\\" />\\n   <input type=\\\"file\\\" class=\\\"\").concat(swalClasses.file, \"\\\" />\\n   <div class=\\\"\").concat(swalClasses.range, \"\\\">\\n     <input type=\\\"range\\\" />\\n     <output></output>\\n   </div>\\n   <select class=\\\"\").concat(swalClasses.select, \"\\\"></select>\\n   <div class=\\\"\").concat(swalClasses.radio, \"\\\"></div>\\n   <label for=\\\"\").concat(swalClasses.checkbox, \"\\\" class=\\\"\").concat(swalClasses.checkbox, \"\\\">\\n     <input type=\\\"checkbox\\\" />\\n     <span class=\\\"\").concat(swalClasses.label, \"\\\"></span>\\n   </label>\\n   <textarea class=\\\"\").concat(swalClasses.textarea, \"\\\"></textarea>\\n   <div class=\\\"\").concat(swalClasses['validation-message'], \"\\\" id=\\\"\").concat(swalClasses['validation-message'], \"\\\"></div>\\n   <div class=\\\"\").concat(swalClasses.actions, \"\\\">\\n     <div class=\\\"\").concat(swalClasses.loader, \"\\\"></div>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.confirm, \"\\\"></button>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.deny, \"\\\"></button>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.cancel, \"\\\"></button>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.footer, \"\\\"></div>\\n   <div class=\\\"\").concat(swalClasses['timer-progress-bar-container'], \"\\\">\\n     <div class=\\\"\").concat(swalClasses['timer-progress-bar'], \"\\\"></div>\\n   </div>\\n </div>\\n\").replace(/(^|\\n)\\s*/g, '');\n\n  const resetOldContainer = () => {\n    const oldContainer = getContainer();\n\n    if (!oldContainer) {\n      return false;\n    }\n\n    oldContainer.remove();\n    removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);\n    return true;\n  };\n\n  const resetValidationMessage = () => {\n    globalState.currentInstance.resetValidationMessage();\n  };\n\n  const addInputChangeListeners = () => {\n    const popup = getPopup();\n    const input = getDirectChildByClass(popup, swalClasses.input);\n    const file = getDirectChildByClass(popup, swalClasses.file);\n    const range = popup.querySelector(\".\".concat(swalClasses.range, \" input\"));\n    const rangeOutput = popup.querySelector(\".\".concat(swalClasses.range, \" output\"));\n    const select = getDirectChildByClass(popup, swalClasses.select);\n    const checkbox = popup.querySelector(\".\".concat(swalClasses.checkbox, \" input\"));\n    const textarea = getDirectChildByClass(popup, swalClasses.textarea);\n    input.oninput = resetValidationMessage;\n    file.onchange = resetValidationMessage;\n    select.onchange = resetValidationMessage;\n    checkbox.onchange = resetValidationMessage;\n    textarea.oninput = resetValidationMessage;\n\n    range.oninput = () => {\n      resetValidationMessage();\n      rangeOutput.value = range.value;\n    };\n\n    range.onchange = () => {\n      resetValidationMessage();\n      range.nextSibling.value = range.value;\n    };\n  };\n\n  const getTarget = target => typeof target === 'string' ? document.querySelector(target) : target;\n\n  const setupAccessibility = params => {\n    const popup = getPopup();\n    popup.setAttribute('role', params.toast ? 'alert' : 'dialog');\n    popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');\n\n    if (!params.toast) {\n      popup.setAttribute('aria-modal', 'true');\n    }\n  };\n\n  const setupRTL = targetElement => {\n    if (window.getComputedStyle(targetElement).direction === 'rtl') {\n      addClass(getContainer(), swalClasses.rtl);\n    }\n  };\n  /*\n   * Add modal + backdrop to DOM\n   */\n\n\n  const init = params => {\n    // Clean up the old popup container if it exists\n    const oldContainerExisted = resetOldContainer();\n    /* istanbul ignore if */\n\n    if (isNodeEnv()) {\n      error('SweetAlert2 requires document to initialize');\n      return;\n    }\n\n    const container = document.createElement('div');\n    container.className = swalClasses.container;\n\n    if (oldContainerExisted) {\n      addClass(container, swalClasses['no-transition']);\n    }\n\n    setInnerHtml(container, sweetHTML);\n    const targetElement = getTarget(params.target);\n    targetElement.appendChild(container);\n    setupAccessibility(params);\n    setupRTL(targetElement);\n    addInputChangeListeners();\n  };\n\n  /**\n   * @param {HTMLElement | object | string} param\n   * @param {HTMLElement} target\n   */\n\n  const parseHtmlToContainer = (param, target) => {\n    // DOM element\n    if (param instanceof HTMLElement) {\n      target.appendChild(param);\n    } // Object\n    else if (typeof param === 'object') {\n      handleObject(param, target);\n    } // Plain string\n    else if (param) {\n      setInnerHtml(target, param);\n    }\n  };\n  /**\n   * @param {object} param\n   * @param {HTMLElement} target\n   */\n\n  const handleObject = (param, target) => {\n    // JQuery element(s)\n    if (param.jquery) {\n      handleJqueryElem(target, param);\n    } // For other objects use their string representation\n    else {\n      setInnerHtml(target, param.toString());\n    }\n  };\n\n  const handleJqueryElem = (target, elem) => {\n    target.textContent = '';\n\n    if (0 in elem) {\n      for (let i = 0; (i in elem); i++) {\n        target.appendChild(elem[i].cloneNode(true));\n      }\n    } else {\n      target.appendChild(elem.cloneNode(true));\n    }\n  };\n\n  const animationEndEvent = (() => {\n    // Prevent run in Node env\n\n    /* istanbul ignore if */\n    if (isNodeEnv()) {\n      return false;\n    }\n\n    const testEl = document.createElement('div');\n    const transEndEventNames = {\n      WebkitAnimation: 'webkitAnimationEnd',\n      // Chrome, Safari and Opera\n      animation: 'animationend' // Standard syntax\n\n    };\n\n    for (const i in transEndEventNames) {\n      if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') {\n        return transEndEventNames[i];\n      }\n    }\n\n    return false;\n  })();\n\n  // https://github.com/twbs/bootstrap/blob/master/js/src/modal.js\n\n  const measureScrollbar = () => {\n    const scrollDiv = document.createElement('div');\n    scrollDiv.className = swalClasses['scrollbar-measure'];\n    document.body.appendChild(scrollDiv);\n    const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n    document.body.removeChild(scrollDiv);\n    return scrollbarWidth;\n  };\n\n  const renderActions = (instance, params) => {\n    const actions = getActions();\n    const loader = getLoader(); // Actions (buttons) wrapper\n\n    if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {\n      hide(actions);\n    } else {\n      show(actions);\n    } // Custom class\n\n\n    applyCustomClass(actions, params, 'actions'); // Render all the buttons\n\n    renderButtons(actions, loader, params); // Loader\n\n    setInnerHtml(loader, params.loaderHtml);\n    applyCustomClass(loader, params, 'loader');\n  };\n\n  function renderButtons(actions, loader, params) {\n    const confirmButton = getConfirmButton();\n    const denyButton = getDenyButton();\n    const cancelButton = getCancelButton(); // Render buttons\n\n    renderButton(confirmButton, 'confirm', params);\n    renderButton(denyButton, 'deny', params);\n    renderButton(cancelButton, 'cancel', params);\n    handleButtonsStyling(confirmButton, denyButton, cancelButton, params);\n\n    if (params.reverseButtons) {\n      if (params.toast) {\n        actions.insertBefore(cancelButton, confirmButton);\n        actions.insertBefore(denyButton, confirmButton);\n      } else {\n        actions.insertBefore(cancelButton, loader);\n        actions.insertBefore(denyButton, loader);\n        actions.insertBefore(confirmButton, loader);\n      }\n    }\n  }\n\n  function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {\n    if (!params.buttonsStyling) {\n      return removeClass([confirmButton, denyButton, cancelButton], swalClasses.styled);\n    }\n\n    addClass([confirmButton, denyButton, cancelButton], swalClasses.styled); // Buttons background colors\n\n    if (params.confirmButtonColor) {\n      confirmButton.style.backgroundColor = params.confirmButtonColor;\n      addClass(confirmButton, swalClasses['default-outline']);\n    }\n\n    if (params.denyButtonColor) {\n      denyButton.style.backgroundColor = params.denyButtonColor;\n      addClass(denyButton, swalClasses['default-outline']);\n    }\n\n    if (params.cancelButtonColor) {\n      cancelButton.style.backgroundColor = params.cancelButtonColor;\n      addClass(cancelButton, swalClasses['default-outline']);\n    }\n  }\n\n  function renderButton(button, buttonType, params) {\n    toggle(button, params[\"show\".concat(capitalizeFirstLetter(buttonType), \"Button\")], 'inline-block');\n    setInnerHtml(button, params[\"\".concat(buttonType, \"ButtonText\")]); // Set caption text\n\n    button.setAttribute('aria-label', params[\"\".concat(buttonType, \"ButtonAriaLabel\")]); // ARIA label\n    // Add buttons custom classes\n\n    button.className = swalClasses[buttonType];\n    applyCustomClass(button, params, \"\".concat(buttonType, \"Button\"));\n    addClass(button, params[\"\".concat(buttonType, \"ButtonClass\")]);\n  }\n\n  function handleBackdropParam(container, backdrop) {\n    if (typeof backdrop === 'string') {\n      container.style.background = backdrop;\n    } else if (!backdrop) {\n      addClass([document.documentElement, document.body], swalClasses['no-backdrop']);\n    }\n  }\n\n  function handlePositionParam(container, position) {\n    if (position in swalClasses) {\n      addClass(container, swalClasses[position]);\n    } else {\n      warn('The \"position\" parameter is not valid, defaulting to \"center\"');\n      addClass(container, swalClasses.center);\n    }\n  }\n\n  function handleGrowParam(container, grow) {\n    if (grow && typeof grow === 'string') {\n      const growClass = \"grow-\".concat(grow);\n\n      if (growClass in swalClasses) {\n        addClass(container, swalClasses[growClass]);\n      }\n    }\n  }\n\n  const renderContainer = (instance, params) => {\n    const container = getContainer();\n\n    if (!container) {\n      return;\n    }\n\n    handleBackdropParam(container, params.backdrop);\n    handlePositionParam(container, params.position);\n    handleGrowParam(container, params.grow); // Custom class\n\n    applyCustomClass(container, params, 'container');\n  };\n\n  /**\n   * This module contains `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n   * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n   * This is the approach that Babel will probably take to implement private methods/fields\n   *   https://github.com/tc39/proposal-private-methods\n   *   https://github.com/babel/babel/pull/7555\n   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n   *   then we can use that language feature.\n   */\n  var privateProps = {\n    awaitingPromise: new WeakMap(),\n    promise: new WeakMap(),\n    innerParams: new WeakMap(),\n    domCache: new WeakMap()\n  };\n\n  const inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];\n  const renderInput = (instance, params) => {\n    const popup = getPopup();\n    const innerParams = privateProps.innerParams.get(instance);\n    const rerender = !innerParams || params.input !== innerParams.input;\n    inputTypes.forEach(inputType => {\n      const inputClass = swalClasses[inputType];\n      const inputContainer = getDirectChildByClass(popup, inputClass); // set attributes\n\n      setAttributes(inputType, params.inputAttributes); // set class\n\n      inputContainer.className = inputClass;\n\n      if (rerender) {\n        hide(inputContainer);\n      }\n    });\n\n    if (params.input) {\n      if (rerender) {\n        showInput(params);\n      } // set custom class\n\n\n      setCustomClass(params);\n    }\n  };\n\n  const showInput = params => {\n    if (!renderInputType[params.input]) {\n      return error(\"Unexpected type of input! Expected \\\"text\\\", \\\"email\\\", \\\"password\\\", \\\"number\\\", \\\"tel\\\", \\\"select\\\", \\\"radio\\\", \\\"checkbox\\\", \\\"textarea\\\", \\\"file\\\" or \\\"url\\\", got \\\"\".concat(params.input, \"\\\"\"));\n    }\n\n    const inputContainer = getInputContainer(params.input);\n    const input = renderInputType[params.input](inputContainer, params);\n    show(input); // input autofocus\n\n    setTimeout(() => {\n      focusInput(input);\n    });\n  };\n\n  const removeAttributes = input => {\n    for (let i = 0; i < input.attributes.length; i++) {\n      const attrName = input.attributes[i].name;\n\n      if (!['type', 'value', 'style'].includes(attrName)) {\n        input.removeAttribute(attrName);\n      }\n    }\n  };\n\n  const setAttributes = (inputType, inputAttributes) => {\n    const input = getInput(getPopup(), inputType);\n\n    if (!input) {\n      return;\n    }\n\n    removeAttributes(input);\n\n    for (const attr in inputAttributes) {\n      input.setAttribute(attr, inputAttributes[attr]);\n    }\n  };\n\n  const setCustomClass = params => {\n    const inputContainer = getInputContainer(params.input);\n\n    if (params.customClass) {\n      addClass(inputContainer, params.customClass.input);\n    }\n  };\n\n  const setInputPlaceholder = (input, params) => {\n    if (!input.placeholder || params.inputPlaceholder) {\n      input.placeholder = params.inputPlaceholder;\n    }\n  };\n\n  const setInputLabel = (input, prependTo, params) => {\n    if (params.inputLabel) {\n      input.id = swalClasses.input;\n      const label = document.createElement('label');\n      const labelClass = swalClasses['input-label'];\n      label.setAttribute('for', input.id);\n      label.className = labelClass;\n      addClass(label, params.customClass.inputLabel);\n      label.innerText = params.inputLabel;\n      prependTo.insertAdjacentElement('beforebegin', label);\n    }\n  };\n\n  const getInputContainer = inputType => {\n    const inputClass = swalClasses[inputType] ? swalClasses[inputType] : swalClasses.input;\n    return getDirectChildByClass(getPopup(), inputClass);\n  };\n\n  const renderInputType = {};\n\n  renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = (input, params) => {\n    if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') {\n      input.value = params.inputValue;\n    } else if (!isPromise(params.inputValue)) {\n      warn(\"Unexpected type of inputValue! Expected \\\"string\\\", \\\"number\\\" or \\\"Promise\\\", got \\\"\".concat(typeof params.inputValue, \"\\\"\"));\n    }\n\n    setInputLabel(input, input, params);\n    setInputPlaceholder(input, params);\n    input.type = params.input;\n    return input;\n  };\n\n  renderInputType.file = (input, params) => {\n    setInputLabel(input, input, params);\n    setInputPlaceholder(input, params);\n    return input;\n  };\n\n  renderInputType.range = (range, params) => {\n    const rangeInput = range.querySelector('input');\n    const rangeOutput = range.querySelector('output');\n    rangeInput.value = params.inputValue;\n    rangeInput.type = params.input;\n    rangeOutput.value = params.inputValue;\n    setInputLabel(rangeInput, range, params);\n    return range;\n  };\n\n  renderInputType.select = (select, params) => {\n    select.textContent = '';\n\n    if (params.inputPlaceholder) {\n      const placeholder = document.createElement('option');\n      setInnerHtml(placeholder, params.inputPlaceholder);\n      placeholder.value = '';\n      placeholder.disabled = true;\n      placeholder.selected = true;\n      select.appendChild(placeholder);\n    }\n\n    setInputLabel(select, select, params);\n    return select;\n  };\n\n  renderInputType.radio = radio => {\n    radio.textContent = '';\n    return radio;\n  };\n\n  renderInputType.checkbox = (checkboxContainer, params) => {\n    /** @type {HTMLInputElement} */\n    const checkbox = getInput(getPopup(), 'checkbox');\n    checkbox.value = '1';\n    checkbox.id = swalClasses.checkbox;\n    checkbox.checked = Boolean(params.inputValue);\n    const label = checkboxContainer.querySelector('span');\n    setInnerHtml(label, params.inputPlaceholder);\n    return checkboxContainer;\n  };\n\n  renderInputType.textarea = (textarea, params) => {\n    textarea.value = params.inputValue;\n    setInputPlaceholder(textarea, params);\n    setInputLabel(textarea, textarea, params);\n\n    const getMargin = el => parseInt(window.getComputedStyle(el).marginLeft) + parseInt(window.getComputedStyle(el).marginRight); // https://github.com/sweetalert2/sweetalert2/issues/2291\n\n\n    setTimeout(() => {\n      // https://github.com/sweetalert2/sweetalert2/issues/1699\n      if ('MutationObserver' in window) {\n        const initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);\n\n        const textareaResizeHandler = () => {\n          const textareaWidth = textarea.offsetWidth + getMargin(textarea);\n\n          if (textareaWidth > initialPopupWidth) {\n            getPopup().style.width = \"\".concat(textareaWidth, \"px\");\n          } else {\n            getPopup().style.width = null;\n          }\n        };\n\n        new MutationObserver(textareaResizeHandler).observe(textarea, {\n          attributes: true,\n          attributeFilter: ['style']\n        });\n      }\n    });\n    return textarea;\n  };\n\n  const renderContent = (instance, params) => {\n    const htmlContainer = getHtmlContainer();\n    applyCustomClass(htmlContainer, params, 'htmlContainer'); // Content as HTML\n\n    if (params.html) {\n      parseHtmlToContainer(params.html, htmlContainer);\n      show(htmlContainer, 'block');\n    } // Content as plain text\n    else if (params.text) {\n      htmlContainer.textContent = params.text;\n      show(htmlContainer, 'block');\n    } // No content\n    else {\n      hide(htmlContainer);\n    }\n\n    renderInput(instance, params);\n  };\n\n  const renderFooter = (instance, params) => {\n    const footer = getFooter();\n    toggle(footer, params.footer);\n\n    if (params.footer) {\n      parseHtmlToContainer(params.footer, footer);\n    } // Custom class\n\n\n    applyCustomClass(footer, params, 'footer');\n  };\n\n  const renderCloseButton = (instance, params) => {\n    const closeButton = getCloseButton();\n    setInnerHtml(closeButton, params.closeButtonHtml); // Custom class\n\n    applyCustomClass(closeButton, params, 'closeButton');\n    toggle(closeButton, params.showCloseButton);\n    closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);\n  };\n\n  const renderIcon = (instance, params) => {\n    const innerParams = privateProps.innerParams.get(instance);\n    const icon = getIcon(); // if the given icon already rendered, apply the styling without re-rendering the icon\n\n    if (innerParams && params.icon === innerParams.icon) {\n      // Custom or default content\n      setContent(icon, params);\n      applyStyles(icon, params);\n      return;\n    }\n\n    if (!params.icon && !params.iconHtml) {\n      return hide(icon);\n    }\n\n    if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {\n      error(\"Unknown icon! Expected \\\"success\\\", \\\"error\\\", \\\"warning\\\", \\\"info\\\" or \\\"question\\\", got \\\"\".concat(params.icon, \"\\\"\"));\n      return hide(icon);\n    }\n\n    show(icon); // Custom or default content\n\n    setContent(icon, params);\n    applyStyles(icon, params); // Animate icon\n\n    addClass(icon, params.showClass.icon);\n  };\n\n  const applyStyles = (icon, params) => {\n    for (const iconType in iconTypes) {\n      if (params.icon !== iconType) {\n        removeClass(icon, iconTypes[iconType]);\n      }\n    }\n\n    addClass(icon, iconTypes[params.icon]); // Icon color\n\n    setColor(icon, params); // Success icon background color\n\n    adjustSuccessIconBackgroundColor(); // Custom class\n\n    applyCustomClass(icon, params, 'icon');\n  }; // Adjust success icon background color to match the popup background color\n\n\n  const adjustSuccessIconBackgroundColor = () => {\n    const popup = getPopup();\n    const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');\n    const successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');\n\n    for (let i = 0; i < successIconParts.length; i++) {\n      successIconParts[i].style.backgroundColor = popupBackgroundColor;\n    }\n  };\n\n  const successIconHtml = \"\\n  <div class=\\\"swal2-success-circular-line-left\\\"></div>\\n  <span class=\\\"swal2-success-line-tip\\\"></span> <span class=\\\"swal2-success-line-long\\\"></span>\\n  <div class=\\\"swal2-success-ring\\\"></div> <div class=\\\"swal2-success-fix\\\"></div>\\n  <div class=\\\"swal2-success-circular-line-right\\\"></div>\\n\";\n  const errorIconHtml = \"\\n  <span class=\\\"swal2-x-mark\\\">\\n    <span class=\\\"swal2-x-mark-line-left\\\"></span>\\n    <span class=\\\"swal2-x-mark-line-right\\\"></span>\\n  </span>\\n\";\n\n  const setContent = (icon, params) => {\n    icon.textContent = '';\n\n    if (params.iconHtml) {\n      setInnerHtml(icon, iconContent(params.iconHtml));\n    } else if (params.icon === 'success') {\n      setInnerHtml(icon, successIconHtml);\n    } else if (params.icon === 'error') {\n      setInnerHtml(icon, errorIconHtml);\n    } else {\n      const defaultIconHtml = {\n        question: '?',\n        warning: '!',\n        info: 'i'\n      };\n      setInnerHtml(icon, iconContent(defaultIconHtml[params.icon]));\n    }\n  };\n\n  const setColor = (icon, params) => {\n    if (!params.iconColor) {\n      return;\n    }\n\n    icon.style.color = params.iconColor;\n    icon.style.borderColor = params.iconColor;\n\n    for (const sel of ['.swal2-success-line-tip', '.swal2-success-line-long', '.swal2-x-mark-line-left', '.swal2-x-mark-line-right']) {\n      setStyle(icon, sel, 'backgroundColor', params.iconColor);\n    }\n\n    setStyle(icon, '.swal2-success-ring', 'borderColor', params.iconColor);\n  };\n\n  const iconContent = content => \"<div class=\\\"\".concat(swalClasses['icon-content'], \"\\\">\").concat(content, \"</div>\");\n\n  const renderImage = (instance, params) => {\n    const image = getImage();\n\n    if (!params.imageUrl) {\n      return hide(image);\n    }\n\n    show(image, ''); // Src, alt\n\n    image.setAttribute('src', params.imageUrl);\n    image.setAttribute('alt', params.imageAlt); // Width, height\n\n    applyNumericalStyle(image, 'width', params.imageWidth);\n    applyNumericalStyle(image, 'height', params.imageHeight); // Class\n\n    image.className = swalClasses.image;\n    applyCustomClass(image, params, 'image');\n  };\n\n  const createStepElement = step => {\n    const stepEl = document.createElement('li');\n    addClass(stepEl, swalClasses['progress-step']);\n    setInnerHtml(stepEl, step);\n    return stepEl;\n  };\n\n  const createLineElement = params => {\n    const lineEl = document.createElement('li');\n    addClass(lineEl, swalClasses['progress-step-line']);\n\n    if (params.progressStepsDistance) {\n      lineEl.style.width = params.progressStepsDistance;\n    }\n\n    return lineEl;\n  };\n\n  const renderProgressSteps = (instance, params) => {\n    const progressStepsContainer = getProgressSteps();\n\n    if (!params.progressSteps || params.progressSteps.length === 0) {\n      return hide(progressStepsContainer);\n    }\n\n    show(progressStepsContainer);\n    progressStepsContainer.textContent = '';\n\n    if (params.currentProgressStep >= params.progressSteps.length) {\n      warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');\n    }\n\n    params.progressSteps.forEach((step, index) => {\n      const stepEl = createStepElement(step);\n      progressStepsContainer.appendChild(stepEl);\n\n      if (index === params.currentProgressStep) {\n        addClass(stepEl, swalClasses['active-progress-step']);\n      }\n\n      if (index !== params.progressSteps.length - 1) {\n        const lineEl = createLineElement(params);\n        progressStepsContainer.appendChild(lineEl);\n      }\n    });\n  };\n\n  const renderTitle = (instance, params) => {\n    const title = getTitle();\n    toggle(title, params.title || params.titleText, 'block');\n\n    if (params.title) {\n      parseHtmlToContainer(params.title, title);\n    }\n\n    if (params.titleText) {\n      title.innerText = params.titleText;\n    } // Custom class\n\n\n    applyCustomClass(title, params, 'title');\n  };\n\n  const renderPopup = (instance, params) => {\n    const container = getContainer();\n    const popup = getPopup(); // Width\n    // https://github.com/sweetalert2/sweetalert2/issues/2170\n\n    if (params.toast) {\n      applyNumericalStyle(container, 'width', params.width);\n      popup.style.width = '100%';\n      popup.insertBefore(getLoader(), getIcon());\n    } else {\n      applyNumericalStyle(popup, 'width', params.width);\n    } // Padding\n\n\n    applyNumericalStyle(popup, 'padding', params.padding); // Color\n\n    if (params.color) {\n      popup.style.color = params.color;\n    } // Background\n\n\n    if (params.background) {\n      popup.style.background = params.background;\n    }\n\n    hide(getValidationMessage()); // Classes\n\n    addClasses(popup, params);\n  };\n\n  const addClasses = (popup, params) => {\n    // Default Class + showClass when updating Swal.update({})\n    popup.className = \"\".concat(swalClasses.popup, \" \").concat(isVisible(popup) ? params.showClass.popup : '');\n\n    if (params.toast) {\n      addClass([document.documentElement, document.body], swalClasses['toast-shown']);\n      addClass(popup, swalClasses.toast);\n    } else {\n      addClass(popup, swalClasses.modal);\n    } // Custom class\n\n\n    applyCustomClass(popup, params, 'popup');\n\n    if (typeof params.customClass === 'string') {\n      addClass(popup, params.customClass);\n    } // Icon class (#1842)\n\n\n    if (params.icon) {\n      addClass(popup, swalClasses[\"icon-\".concat(params.icon)]);\n    }\n  };\n\n  const render = (instance, params) => {\n    renderPopup(instance, params);\n    renderContainer(instance, params);\n    renderProgressSteps(instance, params);\n    renderIcon(instance, params);\n    renderImage(instance, params);\n    renderTitle(instance, params);\n    renderCloseButton(instance, params);\n    renderContent(instance, params);\n    renderActions(instance, params);\n    renderFooter(instance, params);\n\n    if (typeof params.didRender === 'function') {\n      params.didRender(getPopup());\n    }\n  };\n\n  const DismissReason = Object.freeze({\n    cancel: 'cancel',\n    backdrop: 'backdrop',\n    close: 'close',\n    esc: 'esc',\n    timer: 'timer'\n  });\n\n  // Adding aria-hidden=\"true\" to elements outside of the active modal dialog ensures that\n  // elements not within the active modal dialog will not be surfaced if a user opens a screen\n  // reader’s list of elements (headings, form controls, landmarks, etc.) in the document.\n\n  const setAriaHidden = () => {\n    const bodyChildren = toArray(document.body.children);\n    bodyChildren.forEach(el => {\n      if (el === getContainer() || el.contains(getContainer())) {\n        return;\n      }\n\n      if (el.hasAttribute('aria-hidden')) {\n        el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));\n      }\n\n      el.setAttribute('aria-hidden', 'true');\n    });\n  };\n  const unsetAriaHidden = () => {\n    const bodyChildren = toArray(document.body.children);\n    bodyChildren.forEach(el => {\n      if (el.hasAttribute('data-previous-aria-hidden')) {\n        el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));\n        el.removeAttribute('data-previous-aria-hidden');\n      } else {\n        el.removeAttribute('aria-hidden');\n      }\n    });\n  };\n\n  const swalStringParams = ['swal-title', 'swal-html', 'swal-footer'];\n  const getTemplateParams = params => {\n    const template = typeof params.template === 'string' ? document.querySelector(params.template) : params.template;\n\n    if (!template) {\n      return {};\n    }\n    /** @type {DocumentFragment} */\n\n\n    const templateContent = template.content;\n    showWarningsForElements(templateContent);\n    const result = Object.assign(getSwalParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));\n    return result;\n  };\n  /**\n   * @param {DocumentFragment} templateContent\n   */\n\n  const getSwalParams = templateContent => {\n    const result = {};\n    toArray(templateContent.querySelectorAll('swal-param')).forEach(param => {\n      showWarningsForAttributes(param, ['name', 'value']);\n      const paramName = param.getAttribute('name');\n      const value = param.getAttribute('value');\n\n      if (typeof defaultParams[paramName] === 'boolean' && value === 'false') {\n        result[paramName] = false;\n      }\n\n      if (typeof defaultParams[paramName] === 'object') {\n        result[paramName] = JSON.parse(value);\n      }\n    });\n    return result;\n  };\n  /**\n   * @param {DocumentFragment} templateContent\n   */\n\n\n  const getSwalButtons = templateContent => {\n    const result = {};\n    toArray(templateContent.querySelectorAll('swal-button')).forEach(button => {\n      showWarningsForAttributes(button, ['type', 'color', 'aria-label']);\n      const type = button.getAttribute('type');\n      result[\"\".concat(type, \"ButtonText\")] = button.innerHTML;\n      result[\"show\".concat(capitalizeFirstLetter(type), \"Button\")] = true;\n\n      if (button.hasAttribute('color')) {\n        result[\"\".concat(type, \"ButtonColor\")] = button.getAttribute('color');\n      }\n\n      if (button.hasAttribute('aria-label')) {\n        result[\"\".concat(type, \"ButtonAriaLabel\")] = button.getAttribute('aria-label');\n      }\n    });\n    return result;\n  };\n  /**\n   * @param {DocumentFragment} templateContent\n   */\n\n\n  const getSwalImage = templateContent => {\n    const result = {};\n    /** @type {HTMLElement} */\n\n    const image = templateContent.querySelector('swal-image');\n\n    if (image) {\n      showWarningsForAttributes(image, ['src', 'width', 'height', 'alt']);\n\n      if (image.hasAttribute('src')) {\n        result.imageUrl = image.getAttribute('src');\n      }\n\n      if (image.hasAttribute('width')) {\n        result.imageWidth = image.getAttribute('width');\n      }\n\n      if (image.hasAttribute('height')) {\n        result.imageHeight = image.getAttribute('height');\n      }\n\n      if (image.hasAttribute('alt')) {\n        result.imageAlt = image.getAttribute('alt');\n      }\n    }\n\n    return result;\n  };\n  /**\n   * @param {DocumentFragment} templateContent\n   */\n\n\n  const getSwalIcon = templateContent => {\n    const result = {};\n    /** @type {HTMLElement} */\n\n    const icon = templateContent.querySelector('swal-icon');\n\n    if (icon) {\n      showWarningsForAttributes(icon, ['type', 'color']);\n\n      if (icon.hasAttribute('type')) {\n        result.icon = icon.getAttribute('type');\n      }\n\n      if (icon.hasAttribute('color')) {\n        result.iconColor = icon.getAttribute('color');\n      }\n\n      result.iconHtml = icon.innerHTML;\n    }\n\n    return result;\n  };\n  /**\n   * @param {DocumentFragment} templateContent\n   */\n\n\n  const getSwalInput = templateContent => {\n    const result = {};\n    /** @type {HTMLElement} */\n\n    const input = templateContent.querySelector('swal-input');\n\n    if (input) {\n      showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value']);\n      result.input = input.getAttribute('type') || 'text';\n\n      if (input.hasAttribute('label')) {\n        result.inputLabel = input.getAttribute('label');\n      }\n\n      if (input.hasAttribute('placeholder')) {\n        result.inputPlaceholder = input.getAttribute('placeholder');\n      }\n\n      if (input.hasAttribute('value')) {\n        result.inputValue = input.getAttribute('value');\n      }\n    }\n\n    const inputOptions = templateContent.querySelectorAll('swal-input-option');\n\n    if (inputOptions.length) {\n      result.inputOptions = {};\n      toArray(inputOptions).forEach(option => {\n        showWarningsForAttributes(option, ['value']);\n        const optionValue = option.getAttribute('value');\n        const optionName = option.innerHTML;\n        result.inputOptions[optionValue] = optionName;\n      });\n    }\n\n    return result;\n  };\n  /**\n   * @param {DocumentFragment} templateContent\n   * @param {string[]} paramNames\n   */\n\n\n  const getSwalStringParams = (templateContent, paramNames) => {\n    const result = {};\n\n    for (const i in paramNames) {\n      const paramName = paramNames[i];\n      /** @type {HTMLElement} */\n\n      const tag = templateContent.querySelector(paramName);\n\n      if (tag) {\n        showWarningsForAttributes(tag, []);\n        result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim();\n      }\n    }\n\n    return result;\n  };\n  /**\n   * @param {DocumentFragment} templateContent\n   */\n\n\n  const showWarningsForElements = templateContent => {\n    const allowedElements = swalStringParams.concat(['swal-param', 'swal-button', 'swal-image', 'swal-icon', 'swal-input', 'swal-input-option']);\n    toArray(templateContent.children).forEach(el => {\n      const tagName = el.tagName.toLowerCase();\n\n      if (allowedElements.indexOf(tagName) === -1) {\n        warn(\"Unrecognized element <\".concat(tagName, \">\"));\n      }\n    });\n  };\n  /**\n   * @param {HTMLElement} el\n   * @param {string[]} allowedAttributes\n   */\n\n\n  const showWarningsForAttributes = (el, allowedAttributes) => {\n    toArray(el.attributes).forEach(attribute => {\n      if (allowedAttributes.indexOf(attribute.name) === -1) {\n        warn([\"Unrecognized attribute \\\"\".concat(attribute.name, \"\\\" on <\").concat(el.tagName.toLowerCase(), \">.\"), \"\".concat(allowedAttributes.length ? \"Allowed attributes are: \".concat(allowedAttributes.join(', ')) : 'To set the value, use HTML within the element.')]);\n      }\n    });\n  };\n\n  var defaultInputValidators = {\n    email: (string, validationMessage) => {\n      return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');\n    },\n    url: (string, validationMessage) => {\n      // taken from https://stackoverflow.com/a/3809435 with a small change from #1306 and #2013\n      return /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');\n    }\n  };\n\n  function setDefaultInputValidators(params) {\n    // Use default `inputValidator` for supported input types if not provided\n    if (!params.inputValidator) {\n      Object.keys(defaultInputValidators).forEach(key => {\n        if (params.input === key) {\n          params.inputValidator = defaultInputValidators[key];\n        }\n      });\n    }\n  }\n\n  function validateCustomTargetElement(params) {\n    // Determine if the custom target element is valid\n    if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {\n      warn('Target parameter is not valid, defaulting to \"body\"');\n      params.target = 'body';\n    }\n  }\n  /**\n   * Set type, text and actions on popup\n   *\n   * @param params\n   */\n\n\n  function setParameters(params) {\n    setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm\n\n    if (params.showLoaderOnConfirm && !params.preConfirm) {\n      warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' + 'https://sweetalert2.github.io/#ajax-request');\n    }\n\n    validateCustomTargetElement(params); // Replace newlines with <br> in title\n\n    if (typeof params.title === 'string') {\n      params.title = params.title.split('\\n').join('<br />');\n    }\n\n    init(params);\n  }\n\n  class Timer {\n    constructor(callback, delay) {\n      this.callback = callback;\n      this.remaining = delay;\n      this.running = false;\n      this.start();\n    }\n\n    start() {\n      if (!this.running) {\n        this.running = true;\n        this.started = new Date();\n        this.id = setTimeout(this.callback, this.remaining);\n      }\n\n      return this.remaining;\n    }\n\n    stop() {\n      if (this.running) {\n        this.running = false;\n        clearTimeout(this.id);\n        this.remaining -= new Date().getTime() - this.started.getTime();\n      }\n\n      return this.remaining;\n    }\n\n    increase(n) {\n      const running = this.running;\n\n      if (running) {\n        this.stop();\n      }\n\n      this.remaining += n;\n\n      if (running) {\n        this.start();\n      }\n\n      return this.remaining;\n    }\n\n    getTimerLeft() {\n      if (this.running) {\n        this.stop();\n        this.start();\n      }\n\n      return this.remaining;\n    }\n\n    isRunning() {\n      return this.running;\n    }\n\n  }\n\n  const fixScrollbar = () => {\n    // for queues, do not do this more than once\n    if (states.previousBodyPadding !== null) {\n      return;\n    } // if the body has overflow\n\n\n    if (document.body.scrollHeight > window.innerHeight) {\n      // add padding so the content doesn't shift after removal of scrollbar\n      states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));\n      document.body.style.paddingRight = \"\".concat(states.previousBodyPadding + measureScrollbar(), \"px\");\n    }\n  };\n  const undoScrollbar = () => {\n    if (states.previousBodyPadding !== null) {\n      document.body.style.paddingRight = \"\".concat(states.previousBodyPadding, \"px\");\n      states.previousBodyPadding = null;\n    }\n  };\n\n  /* istanbul ignore file */\n\n  const iOSfix = () => {\n    const iOS = // @ts-ignore\n    /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;\n\n    if (iOS && !hasClass(document.body, swalClasses.iosfix)) {\n      const offset = document.body.scrollTop;\n      document.body.style.top = \"\".concat(offset * -1, \"px\");\n      addClass(document.body, swalClasses.iosfix);\n      lockBodyScroll();\n      addBottomPaddingForTallPopups();\n    }\n  };\n  /**\n   * https://github.com/sweetalert2/sweetalert2/issues/1948\n   */\n\n  const addBottomPaddingForTallPopups = () => {\n    const ua = navigator.userAgent;\n    const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);\n    const webkit = !!ua.match(/WebKit/i);\n    const iOSSafari = iOS && webkit && !ua.match(/CriOS/i);\n\n    if (iOSSafari) {\n      const bottomPanelHeight = 44;\n\n      if (getPopup().scrollHeight > window.innerHeight - bottomPanelHeight) {\n        getContainer().style.paddingBottom = \"\".concat(bottomPanelHeight, \"px\");\n      }\n    }\n  };\n  /**\n   * https://github.com/sweetalert2/sweetalert2/issues/1246\n   */\n\n\n  const lockBodyScroll = () => {\n    const container = getContainer();\n    let preventTouchMove;\n\n    container.ontouchstart = e => {\n      preventTouchMove = shouldPreventTouchMove(e);\n    };\n\n    container.ontouchmove = e => {\n      if (preventTouchMove) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    };\n  };\n\n  const shouldPreventTouchMove = event => {\n    const target = event.target;\n    const container = getContainer();\n\n    if (isStylus(event) || isZoom(event)) {\n      return false;\n    }\n\n    if (target === container) {\n      return true;\n    }\n\n    if (!isScrollable(container) && target.tagName !== 'INPUT' && // #1603\n    target.tagName !== 'TEXTAREA' && // #2266\n    !(isScrollable(getHtmlContainer()) && // #1944\n    getHtmlContainer().contains(target))) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * https://github.com/sweetalert2/sweetalert2/issues/1786\n   *\n   * @param {*} event\n   * @returns {boolean}\n   */\n\n\n  const isStylus = event => {\n    return event.touches && event.touches.length && event.touches[0].touchType === 'stylus';\n  };\n  /**\n   * https://github.com/sweetalert2/sweetalert2/issues/1891\n   *\n   * @param {TouchEvent} event\n   * @returns {boolean}\n   */\n\n\n  const isZoom = event => {\n    return event.touches && event.touches.length > 1;\n  };\n\n  const undoIOSfix = () => {\n    if (hasClass(document.body, swalClasses.iosfix)) {\n      const offset = parseInt(document.body.style.top, 10);\n      removeClass(document.body, swalClasses.iosfix);\n      document.body.style.top = '';\n      document.body.scrollTop = offset * -1;\n    }\n  };\n\n  const SHOW_CLASS_TIMEOUT = 10;\n  /**\n   * Open popup, add necessary classes and styles, fix scrollbar\n   *\n   * @param params\n   */\n\n  const openPopup = params => {\n    const container = getContainer();\n    const popup = getPopup();\n\n    if (typeof params.willOpen === 'function') {\n      params.willOpen(popup);\n    }\n\n    const bodyStyles = window.getComputedStyle(document.body);\n    const initialBodyOverflow = bodyStyles.overflowY;\n    addClasses$1(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'\n\n    setTimeout(() => {\n      setScrollingVisibility(container, popup);\n    }, SHOW_CLASS_TIMEOUT);\n\n    if (isModal()) {\n      fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);\n      setAriaHidden();\n    }\n\n    if (!isToast() && !globalState.previousActiveElement) {\n      globalState.previousActiveElement = document.activeElement;\n    }\n\n    if (typeof params.didOpen === 'function') {\n      setTimeout(() => params.didOpen(popup));\n    }\n\n    removeClass(container, swalClasses['no-transition']);\n  };\n\n  const swalOpenAnimationFinished = event => {\n    const popup = getPopup();\n\n    if (event.target !== popup) {\n      return;\n    }\n\n    const container = getContainer();\n    popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);\n    container.style.overflowY = 'auto';\n  };\n\n  const setScrollingVisibility = (container, popup) => {\n    if (animationEndEvent && hasCssAnimation(popup)) {\n      container.style.overflowY = 'hidden';\n      popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);\n    } else {\n      container.style.overflowY = 'auto';\n    }\n  };\n\n  const fixScrollContainer = (container, scrollbarPadding, initialBodyOverflow) => {\n    iOSfix();\n\n    if (scrollbarPadding && initialBodyOverflow !== 'hidden') {\n      fixScrollbar();\n    } // sweetalert2/issues/1247\n\n\n    setTimeout(() => {\n      container.scrollTop = 0;\n    });\n  };\n\n  const addClasses$1 = (container, popup, params) => {\n    addClass(container, params.showClass.backdrop); // this workaround with opacity is needed for https://github.com/sweetalert2/sweetalert2/issues/2059\n\n    popup.style.setProperty('opacity', '0', 'important');\n    show(popup, 'grid');\n    setTimeout(() => {\n      // Animate popup right after showing it\n      addClass(popup, params.showClass.popup); // and remove the opacity workaround\n\n      popup.style.removeProperty('opacity');\n    }, SHOW_CLASS_TIMEOUT); // 10ms in order to fix #2062\n\n    addClass([document.documentElement, document.body], swalClasses.shown);\n\n    if (params.heightAuto && params.backdrop && !params.toast) {\n      addClass([document.documentElement, document.body], swalClasses['height-auto']);\n    }\n  };\n\n  /**\n   * Shows loader (spinner), this is useful with AJAX requests.\n   * By default the loader be shown instead of the \"Confirm\" button.\n   */\n\n  const showLoading = buttonToReplace => {\n    let popup = getPopup();\n\n    if (!popup) {\n      new Swal(); // eslint-disable-line no-new\n    }\n\n    popup = getPopup();\n    const loader = getLoader();\n\n    if (isToast()) {\n      hide(getIcon());\n    } else {\n      replaceButton(popup, buttonToReplace);\n    }\n\n    show(loader);\n    popup.setAttribute('data-loading', true);\n    popup.setAttribute('aria-busy', true);\n    popup.focus();\n  };\n\n  const replaceButton = (popup, buttonToReplace) => {\n    const actions = getActions();\n    const loader = getLoader();\n\n    if (!buttonToReplace && isVisible(getConfirmButton())) {\n      buttonToReplace = getConfirmButton();\n    }\n\n    show(actions);\n\n    if (buttonToReplace) {\n      hide(buttonToReplace);\n      loader.setAttribute('data-button-to-replace', buttonToReplace.className);\n    }\n\n    loader.parentNode.insertBefore(loader, buttonToReplace);\n    addClass([popup, actions], swalClasses.loading);\n  };\n\n  const handleInputOptionsAndValue = (instance, params) => {\n    if (params.input === 'select' || params.input === 'radio') {\n      handleInputOptions(instance, params);\n    } else if (['text', 'email', 'number', 'tel', 'textarea'].includes(params.input) && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {\n      showLoading(getConfirmButton());\n      handleInputValue(instance, params);\n    }\n  };\n  const getInputValue = (instance, innerParams) => {\n    const input = instance.getInput();\n\n    if (!input) {\n      return null;\n    }\n\n    switch (innerParams.input) {\n      case 'checkbox':\n        return getCheckboxValue(input);\n\n      case 'radio':\n        return getRadioValue(input);\n\n      case 'file':\n        return getFileValue(input);\n\n      default:\n        return innerParams.inputAutoTrim ? input.value.trim() : input.value;\n    }\n  };\n\n  const getCheckboxValue = input => input.checked ? 1 : 0;\n\n  const getRadioValue = input => input.checked ? input.value : null;\n\n  const getFileValue = input => input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;\n\n  const handleInputOptions = (instance, params) => {\n    const popup = getPopup();\n\n    const processInputOptions = inputOptions => populateInputOptions[params.input](popup, formatInputOptions(inputOptions), params);\n\n    if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {\n      showLoading(getConfirmButton());\n      asPromise(params.inputOptions).then(inputOptions => {\n        instance.hideLoading();\n        processInputOptions(inputOptions);\n      });\n    } else if (typeof params.inputOptions === 'object') {\n      processInputOptions(params.inputOptions);\n    } else {\n      error(\"Unexpected type of inputOptions! Expected object, Map or Promise, got \".concat(typeof params.inputOptions));\n    }\n  };\n\n  const handleInputValue = (instance, params) => {\n    const input = instance.getInput();\n    hide(input);\n    asPromise(params.inputValue).then(inputValue => {\n      input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : \"\".concat(inputValue);\n      show(input);\n      input.focus();\n      instance.hideLoading();\n    }).catch(err => {\n      error(\"Error in inputValue promise: \".concat(err));\n      input.value = '';\n      show(input);\n      input.focus();\n      instance.hideLoading();\n    });\n  };\n\n  const populateInputOptions = {\n    select: (popup, inputOptions, params) => {\n      const select = getDirectChildByClass(popup, swalClasses.select);\n\n      const renderOption = (parent, optionLabel, optionValue) => {\n        const option = document.createElement('option');\n        option.value = optionValue;\n        setInnerHtml(option, optionLabel);\n        option.selected = isSelected(optionValue, params.inputValue);\n        parent.appendChild(option);\n      };\n\n      inputOptions.forEach(inputOption => {\n        const optionValue = inputOption[0];\n        const optionLabel = inputOption[1]; // <optgroup> spec:\n        // https://www.w3.org/TR/html401/interact/forms.html#h-17.6\n        // \"...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)...\"\n        // check whether this is a <optgroup>\n\n        if (Array.isArray(optionLabel)) {\n          // if it is an array, then it is an <optgroup>\n          const optgroup = document.createElement('optgroup');\n          optgroup.label = optionValue;\n          optgroup.disabled = false; // not configurable for now\n\n          select.appendChild(optgroup);\n          optionLabel.forEach(o => renderOption(optgroup, o[1], o[0]));\n        } else {\n          // case of <option>\n          renderOption(select, optionLabel, optionValue);\n        }\n      });\n      select.focus();\n    },\n    radio: (popup, inputOptions, params) => {\n      const radio = getDirectChildByClass(popup, swalClasses.radio);\n      inputOptions.forEach(inputOption => {\n        const radioValue = inputOption[0];\n        const radioLabel = inputOption[1];\n        const radioInput = document.createElement('input');\n        const radioLabelElement = document.createElement('label');\n        radioInput.type = 'radio';\n        radioInput.name = swalClasses.radio;\n        radioInput.value = radioValue;\n\n        if (isSelected(radioValue, params.inputValue)) {\n          radioInput.checked = true;\n        }\n\n        const label = document.createElement('span');\n        setInnerHtml(label, radioLabel);\n        label.className = swalClasses.label;\n        radioLabelElement.appendChild(radioInput);\n        radioLabelElement.appendChild(label);\n        radio.appendChild(radioLabelElement);\n      });\n      const radios = radio.querySelectorAll('input');\n\n      if (radios.length) {\n        radios[0].focus();\n      }\n    }\n  };\n  /**\n   * Converts `inputOptions` into an array of `[value, label]`s\n   * @param inputOptions\n   */\n\n  const formatInputOptions = inputOptions => {\n    const result = [];\n\n    if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n      inputOptions.forEach((value, key) => {\n        let valueFormatted = value;\n\n        if (typeof valueFormatted === 'object') {\n          // case of <optgroup>\n          valueFormatted = formatInputOptions(valueFormatted);\n        }\n\n        result.push([key, valueFormatted]);\n      });\n    } else {\n      Object.keys(inputOptions).forEach(key => {\n        let valueFormatted = inputOptions[key];\n\n        if (typeof valueFormatted === 'object') {\n          // case of <optgroup>\n          valueFormatted = formatInputOptions(valueFormatted);\n        }\n\n        result.push([key, valueFormatted]);\n      });\n    }\n\n    return result;\n  };\n\n  const isSelected = (optionValue, inputValue) => {\n    return inputValue && inputValue.toString() === optionValue.toString();\n  };\n\n  /**\n   * Hides loader and shows back the button which was hidden by .showLoading()\n   */\n\n  function hideLoading() {\n    // do nothing if popup is closed\n    const innerParams = privateProps.innerParams.get(this);\n\n    if (!innerParams) {\n      return;\n    }\n\n    const domCache = privateProps.domCache.get(this);\n    hide(domCache.loader);\n\n    if (isToast()) {\n      if (innerParams.icon) {\n        show(getIcon());\n      }\n    } else {\n      showRelatedButton(domCache);\n    }\n\n    removeClass([domCache.popup, domCache.actions], swalClasses.loading);\n    domCache.popup.removeAttribute('aria-busy');\n    domCache.popup.removeAttribute('data-loading');\n    domCache.confirmButton.disabled = false;\n    domCache.denyButton.disabled = false;\n    domCache.cancelButton.disabled = false;\n  }\n\n  const showRelatedButton = domCache => {\n    const buttonToReplace = domCache.popup.getElementsByClassName(domCache.loader.getAttribute('data-button-to-replace'));\n\n    if (buttonToReplace.length) {\n      show(buttonToReplace[0], 'inline-block');\n    } else if (allButtonsAreHidden()) {\n      hide(domCache.actions);\n    }\n  };\n\n  /**\n   * Gets the input DOM node, this method works with input parameter.\n   * @returns {HTMLElement | null}\n   */\n\n  function getInput$1(instance) {\n    const innerParams = privateProps.innerParams.get(instance || this);\n    const domCache = privateProps.domCache.get(instance || this);\n\n    if (!domCache) {\n      return null;\n    }\n\n    return getInput(domCache.popup, innerParams.input);\n  }\n\n  /**\n   * This module contains `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n   * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n   * This is the approach that Babel will probably take to implement private methods/fields\n   *   https://github.com/tc39/proposal-private-methods\n   *   https://github.com/babel/babel/pull/7555\n   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n   *   then we can use that language feature.\n   */\n  var privateMethods = {\n    swalPromiseResolve: new WeakMap(),\n    swalPromiseReject: new WeakMap()\n  };\n\n  /*\n   * Global function to determine if SweetAlert2 popup is shown\n   */\n\n  const isVisible$1 = () => {\n    return isVisible(getPopup());\n  };\n  /*\n   * Global function to click 'Confirm' button\n   */\n\n  const clickConfirm = () => getConfirmButton() && getConfirmButton().click();\n  /*\n   * Global function to click 'Deny' button\n   */\n\n  const clickDeny = () => getDenyButton() && getDenyButton().click();\n  /*\n   * Global function to click 'Cancel' button\n   */\n\n  const clickCancel = () => getCancelButton() && getCancelButton().click();\n\n  const removeKeydownHandler = globalState => {\n    if (globalState.keydownTarget && globalState.keydownHandlerAdded) {\n      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n        capture: globalState.keydownListenerCapture\n      });\n      globalState.keydownHandlerAdded = false;\n    }\n  };\n  const addKeydownHandler = (instance, globalState, innerParams, dismissWith) => {\n    removeKeydownHandler(globalState);\n\n    if (!innerParams.toast) {\n      globalState.keydownHandler = e => keydownHandler(instance, e, dismissWith);\n\n      globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();\n      globalState.keydownListenerCapture = innerParams.keydownListenerCapture;\n      globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {\n        capture: globalState.keydownListenerCapture\n      });\n      globalState.keydownHandlerAdded = true;\n    }\n  }; // Focus handling\n\n  const setFocus = (innerParams, index, increment) => {\n    const focusableElements = getFocusableElements(); // search for visible elements and select the next possible match\n\n    if (focusableElements.length) {\n      index = index + increment; // rollover to first item\n\n      if (index === focusableElements.length) {\n        index = 0; // go to last item\n      } else if (index === -1) {\n        index = focusableElements.length - 1;\n      }\n\n      return focusableElements[index].focus();\n    } // no visible focusable elements, focus the popup\n\n\n    getPopup().focus();\n  };\n  const arrowKeysNextButton = ['ArrowRight', 'ArrowDown'];\n  const arrowKeysPreviousButton = ['ArrowLeft', 'ArrowUp'];\n\n  const keydownHandler = (instance, e, dismissWith) => {\n    const innerParams = privateProps.innerParams.get(instance);\n\n    if (!innerParams) {\n      return; // This instance has already been destroyed\n    } // Ignore keydown during IME composition\n    // https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event#ignoring_keydown_during_ime_composition\n    // https://github.com/sweetalert2/sweetalert2/issues/720\n    // https://github.com/sweetalert2/sweetalert2/issues/2406\n\n\n    if (e.isComposing || e.keyCode === 229) {\n      return;\n    }\n\n    if (innerParams.stopKeydownPropagation) {\n      e.stopPropagation();\n    } // ENTER\n\n\n    if (e.key === 'Enter') {\n      handleEnter(instance, e, innerParams);\n    } // TAB\n    else if (e.key === 'Tab') {\n      handleTab(e, innerParams);\n    } // ARROWS - switch focus between buttons\n    else if ([...arrowKeysNextButton, ...arrowKeysPreviousButton].includes(e.key)) {\n      handleArrows(e.key);\n    } // ESC\n    else if (e.key === 'Escape') {\n      handleEsc(e, innerParams, dismissWith);\n    }\n  };\n\n  const handleEnter = (instance, e, innerParams) => {\n    // https://github.com/sweetalert2/sweetalert2/issues/2386\n    if (!callIfFunction(innerParams.allowEnterKey)) {\n      return;\n    }\n\n    if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {\n      if (['textarea', 'file'].includes(innerParams.input)) {\n        return; // do not submit\n      }\n\n      clickConfirm();\n      e.preventDefault();\n    }\n  };\n\n  const handleTab = (e, innerParams) => {\n    const targetElement = e.target;\n    const focusableElements = getFocusableElements();\n    let btnIndex = -1;\n\n    for (let i = 0; i < focusableElements.length; i++) {\n      if (targetElement === focusableElements[i]) {\n        btnIndex = i;\n        break;\n      }\n    } // Cycle to the next button\n\n\n    if (!e.shiftKey) {\n      setFocus(innerParams, btnIndex, 1);\n    } // Cycle to the prev button\n    else {\n      setFocus(innerParams, btnIndex, -1);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleArrows = key => {\n    const confirmButton = getConfirmButton();\n    const denyButton = getDenyButton();\n    const cancelButton = getCancelButton();\n\n    if (![confirmButton, denyButton, cancelButton].includes(document.activeElement)) {\n      return;\n    }\n\n    const sibling = arrowKeysNextButton.includes(key) ? 'nextElementSibling' : 'previousElementSibling';\n    let buttonToFocus = document.activeElement;\n\n    for (let i = 0; i < getActions().children.length; i++) {\n      buttonToFocus = buttonToFocus[sibling];\n\n      if (!buttonToFocus) {\n        return;\n      }\n\n      if (isVisible(buttonToFocus) && buttonToFocus instanceof HTMLButtonElement) {\n        break;\n      }\n    }\n\n    if (buttonToFocus instanceof HTMLButtonElement) {\n      buttonToFocus.focus();\n    }\n  };\n\n  const handleEsc = (e, innerParams, dismissWith) => {\n    if (callIfFunction(innerParams.allowEscapeKey)) {\n      e.preventDefault();\n      dismissWith(DismissReason.esc);\n    }\n  };\n\n  /*\n   * Instance method to close sweetAlert\n   */\n\n  function removePopupAndResetState(instance, container, returnFocus, didClose) {\n    if (isToast()) {\n      triggerDidCloseAndDispose(instance, didClose);\n    } else {\n      restoreActiveElement(returnFocus).then(() => triggerDidCloseAndDispose(instance, didClose));\n      removeKeydownHandler(globalState);\n    }\n\n    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // workaround for #2088\n    // for some reason removing the container in Safari will scroll the document to bottom\n\n    if (isSafari) {\n      container.setAttribute('style', 'display:none !important');\n      container.removeAttribute('class');\n      container.innerHTML = '';\n    } else {\n      container.remove();\n    }\n\n    if (isModal()) {\n      undoScrollbar();\n      undoIOSfix();\n      unsetAriaHidden();\n    }\n\n    removeBodyClasses();\n  }\n\n  function removeBodyClasses() {\n    removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown']]);\n  }\n\n  function close(resolveValue) {\n    resolveValue = prepareResolveValue(resolveValue);\n    const swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);\n    const didClose = triggerClosePopup(this);\n\n    if (this.isAwaitingPromise()) {\n      // A swal awaiting for a promise (after a click on Confirm or Deny) cannot be dismissed anymore #2335\n      if (!resolveValue.isDismissed) {\n        handleAwaitingPromise(this);\n        swalPromiseResolve(resolveValue);\n      }\n    } else if (didClose) {\n      // Resolve Swal promise\n      swalPromiseResolve(resolveValue);\n    }\n  }\n  function isAwaitingPromise() {\n    return !!privateProps.awaitingPromise.get(this);\n  }\n\n  const triggerClosePopup = instance => {\n    const popup = getPopup();\n\n    if (!popup) {\n      return false;\n    }\n\n    const innerParams = privateProps.innerParams.get(instance);\n\n    if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {\n      return false;\n    }\n\n    removeClass(popup, innerParams.showClass.popup);\n    addClass(popup, innerParams.hideClass.popup);\n    const backdrop = getContainer();\n    removeClass(backdrop, innerParams.showClass.backdrop);\n    addClass(backdrop, innerParams.hideClass.backdrop);\n    handlePopupAnimation(instance, popup, innerParams);\n    return true;\n  };\n\n  function rejectPromise(error) {\n    const rejectPromise = privateMethods.swalPromiseReject.get(this);\n    handleAwaitingPromise(this);\n\n    if (rejectPromise) {\n      // Reject Swal promise\n      rejectPromise(error);\n    }\n  }\n  const handleAwaitingPromise = instance => {\n    if (instance.isAwaitingPromise()) {\n      privateProps.awaitingPromise.delete(instance); // The instance might have been previously partly destroyed, we must resume the destroy process in this case #2335\n\n      if (!privateProps.innerParams.get(instance)) {\n        instance._destroy();\n      }\n    }\n  };\n\n  const prepareResolveValue = resolveValue => {\n    // When user calls Swal.close()\n    if (typeof resolveValue === 'undefined') {\n      return {\n        isConfirmed: false,\n        isDenied: false,\n        isDismissed: true\n      };\n    }\n\n    return Object.assign({\n      isConfirmed: false,\n      isDenied: false,\n      isDismissed: false\n    }, resolveValue);\n  };\n\n  const handlePopupAnimation = (instance, popup, innerParams) => {\n    const container = getContainer(); // If animation is supported, animate\n\n    const animationIsSupported = animationEndEvent && hasCssAnimation(popup);\n\n    if (typeof innerParams.willClose === 'function') {\n      innerParams.willClose(popup);\n    }\n\n    if (animationIsSupported) {\n      animatePopup(instance, popup, container, innerParams.returnFocus, innerParams.didClose);\n    } else {\n      // Otherwise, remove immediately\n      removePopupAndResetState(instance, container, innerParams.returnFocus, innerParams.didClose);\n    }\n  };\n\n  const animatePopup = (instance, popup, container, returnFocus, didClose) => {\n    globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, returnFocus, didClose);\n    popup.addEventListener(animationEndEvent, function (e) {\n      if (e.target === popup) {\n        globalState.swalCloseEventFinishedCallback();\n        delete globalState.swalCloseEventFinishedCallback;\n      }\n    });\n  };\n\n  const triggerDidCloseAndDispose = (instance, didClose) => {\n    setTimeout(() => {\n      if (typeof didClose === 'function') {\n        didClose.bind(instance.params)();\n      }\n\n      instance._destroy();\n    });\n  };\n\n  function setButtonsDisabled(instance, buttons, disabled) {\n    const domCache = privateProps.domCache.get(instance);\n    buttons.forEach(button => {\n      domCache[button].disabled = disabled;\n    });\n  }\n\n  function setInputDisabled(input, disabled) {\n    if (!input) {\n      return false;\n    }\n\n    if (input.type === 'radio') {\n      const radiosContainer = input.parentNode.parentNode;\n      const radios = radiosContainer.querySelectorAll('input');\n\n      for (let i = 0; i < radios.length; i++) {\n        radios[i].disabled = disabled;\n      }\n    } else {\n      input.disabled = disabled;\n    }\n  }\n\n  function enableButtons() {\n    setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], false);\n  }\n  function disableButtons() {\n    setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], true);\n  }\n  function enableInput() {\n    return setInputDisabled(this.getInput(), false);\n  }\n  function disableInput() {\n    return setInputDisabled(this.getInput(), true);\n  }\n\n  function showValidationMessage(error) {\n    const domCache = privateProps.domCache.get(this);\n    const params = privateProps.innerParams.get(this);\n    setInnerHtml(domCache.validationMessage, error);\n    domCache.validationMessage.className = swalClasses['validation-message'];\n\n    if (params.customClass && params.customClass.validationMessage) {\n      addClass(domCache.validationMessage, params.customClass.validationMessage);\n    }\n\n    show(domCache.validationMessage);\n    const input = this.getInput();\n\n    if (input) {\n      input.setAttribute('aria-invalid', true);\n      input.setAttribute('aria-describedby', swalClasses['validation-message']);\n      focusInput(input);\n      addClass(input, swalClasses.inputerror);\n    }\n  } // Hide block with validation message\n\n  function resetValidationMessage$1() {\n    const domCache = privateProps.domCache.get(this);\n\n    if (domCache.validationMessage) {\n      hide(domCache.validationMessage);\n    }\n\n    const input = this.getInput();\n\n    if (input) {\n      input.removeAttribute('aria-invalid');\n      input.removeAttribute('aria-describedby');\n      removeClass(input, swalClasses.inputerror);\n    }\n  }\n\n  function getProgressSteps$1() {\n    const domCache = privateProps.domCache.get(this);\n    return domCache.progressSteps;\n  }\n\n  /**\n   * Updates popup parameters.\n   */\n\n  function update(params) {\n    const popup = getPopup();\n    const innerParams = privateProps.innerParams.get(this);\n\n    if (!popup || hasClass(popup, innerParams.hideClass.popup)) {\n      return warn(\"You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.\");\n    }\n\n    const validUpdatableParams = filterValidParams(params);\n    const updatedParams = Object.assign({}, innerParams, validUpdatableParams);\n    render(this, updatedParams);\n    privateProps.innerParams.set(this, updatedParams);\n    Object.defineProperties(this, {\n      params: {\n        value: Object.assign({}, this.params, params),\n        writable: false,\n        enumerable: true\n      }\n    });\n  }\n\n  const filterValidParams = params => {\n    const validUpdatableParams = {};\n    Object.keys(params).forEach(param => {\n      if (isUpdatableParameter(param)) {\n        validUpdatableParams[param] = params[param];\n      } else {\n        warn(\"Invalid parameter to update: \\\"\".concat(param, \"\\\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\\n\\nIf you think this parameter should be updatable, request it here: https://github.com/sweetalert2/sweetalert2/issues/new?template=02_feature_request.md\"));\n      }\n    });\n    return validUpdatableParams;\n  };\n\n  function _destroy() {\n    const domCache = privateProps.domCache.get(this);\n    const innerParams = privateProps.innerParams.get(this);\n\n    if (!innerParams) {\n      disposeWeakMaps(this); // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n\n      return; // This instance has already been destroyed\n    } // Check if there is another Swal closing\n\n\n    if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n      globalState.swalCloseEventFinishedCallback();\n      delete globalState.swalCloseEventFinishedCallback;\n    } // Check if there is a swal disposal defer timer\n\n\n    if (globalState.deferDisposalTimer) {\n      clearTimeout(globalState.deferDisposalTimer);\n      delete globalState.deferDisposalTimer;\n    }\n\n    if (typeof innerParams.didDestroy === 'function') {\n      innerParams.didDestroy();\n    }\n\n    disposeSwal(this);\n  }\n\n  const disposeSwal = instance => {\n    disposeWeakMaps(instance); // Unset this.params so GC will dispose it (#1569)\n\n    delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)\n\n    delete globalState.keydownHandler;\n    delete globalState.keydownTarget; // Unset currentInstance\n\n    delete globalState.currentInstance;\n  };\n\n  const disposeWeakMaps = instance => {\n    // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n    if (instance.isAwaitingPromise()) {\n      unsetWeakMaps(privateProps, instance);\n      privateProps.awaitingPromise.set(instance, true);\n    } else {\n      unsetWeakMaps(privateMethods, instance);\n      unsetWeakMaps(privateProps, instance);\n    }\n  };\n\n  const unsetWeakMaps = (obj, instance) => {\n    for (const i in obj) {\n      obj[i].delete(instance);\n    }\n  };\n\n\n\n  var instanceMethods = /*#__PURE__*/Object.freeze({\n    hideLoading: hideLoading,\n    disableLoading: hideLoading,\n    getInput: getInput$1,\n    close: close,\n    isAwaitingPromise: isAwaitingPromise,\n    rejectPromise: rejectPromise,\n    handleAwaitingPromise: handleAwaitingPromise,\n    closePopup: close,\n    closeModal: close,\n    closeToast: close,\n    enableButtons: enableButtons,\n    disableButtons: disableButtons,\n    enableInput: enableInput,\n    disableInput: disableInput,\n    showValidationMessage: showValidationMessage,\n    resetValidationMessage: resetValidationMessage$1,\n    getProgressSteps: getProgressSteps$1,\n    update: update,\n    _destroy: _destroy\n  });\n\n  const handleConfirmButtonClick = instance => {\n    const innerParams = privateProps.innerParams.get(instance);\n    instance.disableButtons();\n\n    if (innerParams.input) {\n      handleConfirmOrDenyWithInput(instance, 'confirm');\n    } else {\n      confirm(instance, true);\n    }\n  };\n  const handleDenyButtonClick = instance => {\n    const innerParams = privateProps.innerParams.get(instance);\n    instance.disableButtons();\n\n    if (innerParams.returnInputValueOnDeny) {\n      handleConfirmOrDenyWithInput(instance, 'deny');\n    } else {\n      deny(instance, false);\n    }\n  };\n  const handleCancelButtonClick = (instance, dismissWith) => {\n    instance.disableButtons();\n    dismissWith(DismissReason.cancel);\n  };\n\n  const handleConfirmOrDenyWithInput = (instance, type\n  /* 'confirm' | 'deny' */\n  ) => {\n    const innerParams = privateProps.innerParams.get(instance);\n\n    if (!innerParams.input) {\n      return error(\"The \\\"input\\\" parameter is needed to be set when using returnInputValueOn\".concat(capitalizeFirstLetter(type)));\n    }\n\n    const inputValue = getInputValue(instance, innerParams);\n\n    if (innerParams.inputValidator) {\n      handleInputValidator(instance, inputValue, type);\n    } else if (!instance.getInput().checkValidity()) {\n      instance.enableButtons();\n      instance.showValidationMessage(innerParams.validationMessage);\n    } else if (type === 'deny') {\n      deny(instance, inputValue);\n    } else {\n      confirm(instance, inputValue);\n    }\n  };\n\n  const handleInputValidator = (instance, inputValue, type\n  /* 'confirm' | 'deny' */\n  ) => {\n    const innerParams = privateProps.innerParams.get(instance);\n    instance.disableInput();\n    const validationPromise = Promise.resolve().then(() => asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));\n    validationPromise.then(validationMessage => {\n      instance.enableButtons();\n      instance.enableInput();\n\n      if (validationMessage) {\n        instance.showValidationMessage(validationMessage);\n      } else if (type === 'deny') {\n        deny(instance, inputValue);\n      } else {\n        confirm(instance, inputValue);\n      }\n    });\n  };\n\n  const deny = (instance, value) => {\n    const innerParams = privateProps.innerParams.get(instance || undefined);\n\n    if (innerParams.showLoaderOnDeny) {\n      showLoading(getDenyButton());\n    }\n\n    if (innerParams.preDeny) {\n      privateProps.awaitingPromise.set(instance || undefined, true); // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received\n\n      const preDenyPromise = Promise.resolve().then(() => asPromise(innerParams.preDeny(value, innerParams.validationMessage)));\n      preDenyPromise.then(preDenyValue => {\n        if (preDenyValue === false) {\n          instance.hideLoading();\n          handleAwaitingPromise(instance);\n        } else {\n          instance.closePopup({\n            isDenied: true,\n            value: typeof preDenyValue === 'undefined' ? value : preDenyValue\n          });\n        }\n      }).catch(error$$1 => rejectWith(instance || undefined, error$$1));\n    } else {\n      instance.closePopup({\n        isDenied: true,\n        value\n      });\n    }\n  };\n\n  const succeedWith = (instance, value) => {\n    instance.closePopup({\n      isConfirmed: true,\n      value\n    });\n  };\n\n  const rejectWith = (instance, error$$1) => {\n    instance.rejectPromise(error$$1);\n  };\n\n  const confirm = (instance, value) => {\n    const innerParams = privateProps.innerParams.get(instance || undefined);\n\n    if (innerParams.showLoaderOnConfirm) {\n      showLoading();\n    }\n\n    if (innerParams.preConfirm) {\n      instance.resetValidationMessage();\n      privateProps.awaitingPromise.set(instance || undefined, true); // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received\n\n      const preConfirmPromise = Promise.resolve().then(() => asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));\n      preConfirmPromise.then(preConfirmValue => {\n        if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n          instance.hideLoading();\n          handleAwaitingPromise(instance);\n        } else {\n          succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\n        }\n      }).catch(error$$1 => rejectWith(instance || undefined, error$$1));\n    } else {\n      succeedWith(instance, value);\n    }\n  };\n\n  const handlePopupClick = (instance, domCache, dismissWith) => {\n    const innerParams = privateProps.innerParams.get(instance);\n\n    if (innerParams.toast) {\n      handleToastClick(instance, domCache, dismissWith);\n    } else {\n      // Ignore click events that had mousedown on the popup but mouseup on the container\n      // This can happen when the user drags a slider\n      handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup\n\n      handleContainerMousedown(domCache);\n      handleModalClick(instance, domCache, dismissWith);\n    }\n  };\n\n  const handleToastClick = (instance, domCache, dismissWith) => {\n    // Closing toast by internal click\n    domCache.popup.onclick = () => {\n      const innerParams = privateProps.innerParams.get(instance);\n\n      if (innerParams && (isAnyButtonShown(innerParams) || innerParams.timer || innerParams.input)) {\n        return;\n      }\n\n      dismissWith(DismissReason.close);\n    };\n  };\n  /**\n   * @param {*} innerParams\n   * @returns {boolean}\n   */\n\n\n  const isAnyButtonShown = innerParams => {\n    return innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton;\n  };\n\n  let ignoreOutsideClick = false;\n\n  const handleModalMousedown = domCache => {\n    domCache.popup.onmousedown = () => {\n      domCache.container.onmouseup = function (e) {\n        domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't\n        // have any other direct children aside of the popup\n\n        if (e.target === domCache.container) {\n          ignoreOutsideClick = true;\n        }\n      };\n    };\n  };\n\n  const handleContainerMousedown = domCache => {\n    domCache.container.onmousedown = () => {\n      domCache.popup.onmouseup = function (e) {\n        domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup\n\n        if (e.target === domCache.popup || domCache.popup.contains(e.target)) {\n          ignoreOutsideClick = true;\n        }\n      };\n    };\n  };\n\n  const handleModalClick = (instance, domCache, dismissWith) => {\n    domCache.container.onclick = e => {\n      const innerParams = privateProps.innerParams.get(instance);\n\n      if (ignoreOutsideClick) {\n        ignoreOutsideClick = false;\n        return;\n      }\n\n      if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {\n        dismissWith(DismissReason.backdrop);\n      }\n    };\n  };\n\n  const isJqueryElement = elem => typeof elem === 'object' && elem.jquery;\n\n  const isElement = elem => elem instanceof Element || isJqueryElement(elem);\n\n  const argsToParams = args => {\n    const params = {};\n\n    if (typeof args[0] === 'object' && !isElement(args[0])) {\n      Object.assign(params, args[0]);\n    } else {\n      ['title', 'html', 'icon'].forEach((name, index) => {\n        const arg = args[index];\n\n        if (typeof arg === 'string' || isElement(arg)) {\n          params[name] = arg;\n        } else if (arg !== undefined) {\n          error(\"Unexpected type of \".concat(name, \"! Expected \\\"string\\\" or \\\"Element\\\", got \").concat(typeof arg));\n        }\n      });\n    }\n\n    return params;\n  };\n\n  function fire() {\n    const Swal = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new Swal(...args);\n  }\n\n  /**\n   * Returns an extended version of `Swal` containing `params` as defaults.\n   * Useful for reusing Swal configuration.\n   *\n   * For example:\n   *\n   * Before:\n   * const textPromptOptions = { input: 'text', showCancelButton: true }\n   * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })\n   * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })\n   *\n   * After:\n   * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })\n   * const {value: firstName} = await TextPrompt('What is your first name?')\n   * const {value: lastName} = await TextPrompt('What is your last name?')\n   *\n   * @param mixinParams\n   */\n  function mixin(mixinParams) {\n    class MixinSwal extends this {\n      _main(params, priorityMixinParams) {\n        return super._main(params, Object.assign({}, mixinParams, priorityMixinParams));\n      }\n\n    }\n\n    return MixinSwal;\n  }\n\n  /**\n   * If `timer` parameter is set, returns number of milliseconds of timer remained.\n   * Otherwise, returns undefined.\n   */\n\n  const getTimerLeft = () => {\n    return globalState.timeout && globalState.timeout.getTimerLeft();\n  };\n  /**\n   * Stop timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  const stopTimer = () => {\n    if (globalState.timeout) {\n      stopTimerProgressBar();\n      return globalState.timeout.stop();\n    }\n  };\n  /**\n   * Resume timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  const resumeTimer = () => {\n    if (globalState.timeout) {\n      const remaining = globalState.timeout.start();\n      animateTimerProgressBar(remaining);\n      return remaining;\n    }\n  };\n  /**\n   * Resume timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  const toggleTimer = () => {\n    const timer = globalState.timeout;\n    return timer && (timer.running ? stopTimer() : resumeTimer());\n  };\n  /**\n   * Increase timer. Returns number of milliseconds of an updated timer.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  const increaseTimer = n => {\n    if (globalState.timeout) {\n      const remaining = globalState.timeout.increase(n);\n      animateTimerProgressBar(remaining, true);\n      return remaining;\n    }\n  };\n  /**\n   * Check if timer is running. Returns true if timer is running\n   * or false if timer is paused or stopped.\n   * If `timer` parameter isn't set, returns undefined\n   */\n\n  const isTimerRunning = () => {\n    return globalState.timeout && globalState.timeout.isRunning();\n  };\n\n  let bodyClickListenerAdded = false;\n  const clickHandlers = {};\n  function bindClickHandler() {\n    let attr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data-swal-template';\n    clickHandlers[attr] = this;\n\n    if (!bodyClickListenerAdded) {\n      document.body.addEventListener('click', bodyClickListener);\n      bodyClickListenerAdded = true;\n    }\n  }\n\n  const bodyClickListener = event => {\n    for (let el = event.target; el && el !== document; el = el.parentNode) {\n      for (const attr in clickHandlers) {\n        const template = el.getAttribute(attr);\n\n        if (template) {\n          clickHandlers[attr].fire({\n            template\n          });\n          return;\n        }\n      }\n    }\n  };\n\n\n\n  var staticMethods = /*#__PURE__*/Object.freeze({\n    isValidParameter: isValidParameter,\n    isUpdatableParameter: isUpdatableParameter,\n    isDeprecatedParameter: isDeprecatedParameter,\n    argsToParams: argsToParams,\n    isVisible: isVisible$1,\n    clickConfirm: clickConfirm,\n    clickDeny: clickDeny,\n    clickCancel: clickCancel,\n    getContainer: getContainer,\n    getPopup: getPopup,\n    getTitle: getTitle,\n    getHtmlContainer: getHtmlContainer,\n    getImage: getImage,\n    getIcon: getIcon,\n    getInputLabel: getInputLabel,\n    getCloseButton: getCloseButton,\n    getActions: getActions,\n    getConfirmButton: getConfirmButton,\n    getDenyButton: getDenyButton,\n    getCancelButton: getCancelButton,\n    getLoader: getLoader,\n    getFooter: getFooter,\n    getTimerProgressBar: getTimerProgressBar,\n    getFocusableElements: getFocusableElements,\n    getValidationMessage: getValidationMessage,\n    isLoading: isLoading,\n    fire: fire,\n    mixin: mixin,\n    showLoading: showLoading,\n    enableLoading: showLoading,\n    getTimerLeft: getTimerLeft,\n    stopTimer: stopTimer,\n    resumeTimer: resumeTimer,\n    toggleTimer: toggleTimer,\n    increaseTimer: increaseTimer,\n    isTimerRunning: isTimerRunning,\n    bindClickHandler: bindClickHandler\n  });\n\n  let currentInstance;\n\n  class SweetAlert {\n    constructor() {\n      // Prevent run in Node env\n      if (typeof window === 'undefined') {\n        return;\n      }\n\n      currentInstance = this; // @ts-ignore\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const outerParams = Object.freeze(this.constructor.argsToParams(args));\n      Object.defineProperties(this, {\n        params: {\n          value: outerParams,\n          writable: false,\n          enumerable: true,\n          configurable: true\n        }\n      }); // @ts-ignore\n\n      const promise = this._main(this.params);\n\n      privateProps.promise.set(this, promise);\n    }\n\n    _main(userParams) {\n      let mixinParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      showWarningsForParams(Object.assign({}, mixinParams, userParams));\n\n      if (globalState.currentInstance) {\n        globalState.currentInstance._destroy();\n\n        if (isModal()) {\n          unsetAriaHidden();\n        }\n      }\n\n      globalState.currentInstance = this;\n      const innerParams = prepareParams(userParams, mixinParams);\n      setParameters(innerParams);\n      Object.freeze(innerParams); // clear the previous timer\n\n      if (globalState.timeout) {\n        globalState.timeout.stop();\n        delete globalState.timeout;\n      } // clear the restore focus timeout\n\n\n      clearTimeout(globalState.restoreFocusTimeout);\n      const domCache = populateDomCache(this);\n      render(this, innerParams);\n      privateProps.innerParams.set(this, innerParams);\n      return swalPromise(this, domCache, innerParams);\n    } // `catch` cannot be the name of a module export, so we define our thenable methods here instead\n\n\n    then(onFulfilled) {\n      const promise = privateProps.promise.get(this);\n      return promise.then(onFulfilled);\n    }\n\n    finally(onFinally) {\n      const promise = privateProps.promise.get(this);\n      return promise.finally(onFinally);\n    }\n\n  }\n\n  const swalPromise = (instance, domCache, innerParams) => {\n    return new Promise((resolve, reject) => {\n      // functions to handle all closings/dismissals\n      const dismissWith = dismiss => {\n        instance.closePopup({\n          isDismissed: true,\n          dismiss\n        });\n      };\n\n      privateMethods.swalPromiseResolve.set(instance, resolve);\n      privateMethods.swalPromiseReject.set(instance, reject);\n\n      domCache.confirmButton.onclick = () => handleConfirmButtonClick(instance);\n\n      domCache.denyButton.onclick = () => handleDenyButtonClick(instance);\n\n      domCache.cancelButton.onclick = () => handleCancelButtonClick(instance, dismissWith);\n\n      domCache.closeButton.onclick = () => dismissWith(DismissReason.close);\n\n      handlePopupClick(instance, domCache, dismissWith);\n      addKeydownHandler(instance, globalState, innerParams, dismissWith);\n      handleInputOptionsAndValue(instance, innerParams);\n      openPopup(innerParams);\n      setupTimer(globalState, innerParams, dismissWith);\n      initFocus(domCache, innerParams); // Scroll container to top on open (#1247, #1946)\n\n      setTimeout(() => {\n        domCache.container.scrollTop = 0;\n      });\n    });\n  };\n\n  const prepareParams = (userParams, mixinParams) => {\n    const templateParams = getTemplateParams(userParams);\n    const params = Object.assign({}, defaultParams, mixinParams, templateParams, userParams); // precedence is described in #2131\n\n    params.showClass = Object.assign({}, defaultParams.showClass, params.showClass);\n    params.hideClass = Object.assign({}, defaultParams.hideClass, params.hideClass);\n    return params;\n  };\n\n  const populateDomCache = instance => {\n    const domCache = {\n      popup: getPopup(),\n      container: getContainer(),\n      actions: getActions(),\n      confirmButton: getConfirmButton(),\n      denyButton: getDenyButton(),\n      cancelButton: getCancelButton(),\n      loader: getLoader(),\n      closeButton: getCloseButton(),\n      validationMessage: getValidationMessage(),\n      progressSteps: getProgressSteps()\n    };\n    privateProps.domCache.set(instance, domCache);\n    return domCache;\n  };\n\n  const setupTimer = (globalState$$1, innerParams, dismissWith) => {\n    const timerProgressBar = getTimerProgressBar();\n    hide(timerProgressBar);\n\n    if (innerParams.timer) {\n      globalState$$1.timeout = new Timer(() => {\n        dismissWith('timer');\n        delete globalState$$1.timeout;\n      }, innerParams.timer);\n\n      if (innerParams.timerProgressBar) {\n        show(timerProgressBar);\n        applyCustomClass(timerProgressBar, innerParams, 'timerProgressBar');\n        setTimeout(() => {\n          if (globalState$$1.timeout && globalState$$1.timeout.running) {\n            // timer can be already stopped or unset at this point\n            animateTimerProgressBar(innerParams.timer);\n          }\n        });\n      }\n    }\n  };\n\n  const initFocus = (domCache, innerParams) => {\n    if (innerParams.toast) {\n      return;\n    }\n\n    if (!callIfFunction(innerParams.allowEnterKey)) {\n      return blurActiveElement();\n    }\n\n    if (!focusButton(domCache, innerParams)) {\n      setFocus(innerParams, -1, 1);\n    }\n  };\n\n  const focusButton = (domCache, innerParams) => {\n    if (innerParams.focusDeny && isVisible(domCache.denyButton)) {\n      domCache.denyButton.focus();\n      return true;\n    }\n\n    if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {\n      domCache.cancelButton.focus();\n      return true;\n    }\n\n    if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {\n      domCache.confirmButton.focus();\n      return true;\n    }\n\n    return false;\n  };\n\n  const blurActiveElement = () => {\n    if (document.activeElement instanceof HTMLElement && typeof document.activeElement.blur === 'function') {\n      document.activeElement.blur();\n    }\n  }; // Assign instance methods from src/instanceMethods/*.js to prototype\n\n\n  Object.assign(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor\n\n  Object.assign(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility\n\n  Object.keys(instanceMethods).forEach(key => {\n    SweetAlert[key] = function () {\n      if (currentInstance) {\n        return currentInstance[key](...arguments);\n      }\n    };\n  });\n  SweetAlert.DismissReason = DismissReason;\n  SweetAlert.version = '11.4.8';\n\n  const Swal = SweetAlert; // @ts-ignore\n\n  Swal.default = Swal;\n\n  return Swal;\n\n}));\nif (typeof this !== 'undefined' && this.Sweetalert2){  this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2}\n\n\"undefined\"!=typeof document&&function(e,t){var n=e.createElement(\"style\");if(e.getElementsByTagName(\"head\")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,\".swal2-popup.swal2-toast{box-sizing:border-box;grid-column:1/4!important;grid-row:1/4!important;grid-template-columns:1fr 99fr 1fr;padding:1em;overflow-y:hidden;background:#fff;box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-popup.swal2-toast>*{grid-column:2}.swal2-popup.swal2-toast .swal2-title{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-loading{justify-content:center}.swal2-popup.swal2-toast .swal2-input{height:2em;margin:.5em;font-size:1em}.swal2-popup.swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-popup.swal2-toast .swal2-html-container{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-html-container:empty{padding:0}.swal2-popup.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-popup.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:700}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-popup.swal2-toast .swal2-styled{margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-container{display:grid;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;box-sizing:border-box;grid-template-areas:\\\"top-start     top            top-end\\\" \\\"center-start  center         center-end\\\" \\\"bottom-start  bottom-center  bottom-end\\\";grid-template-rows:minmax(-webkit-min-content,auto) minmax(-webkit-min-content,auto) minmax(-webkit-min-content,auto);grid-template-rows:minmax(min-content,auto) minmax(min-content,auto) minmax(min-content,auto);height:100%;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:0 0!important}.swal2-container.swal2-bottom-start,.swal2-container.swal2-center-start,.swal2-container.swal2-top-start{grid-template-columns:minmax(0,1fr) auto auto}.swal2-container.swal2-bottom,.swal2-container.swal2-center,.swal2-container.swal2-top{grid-template-columns:auto minmax(0,1fr) auto}.swal2-container.swal2-bottom-end,.swal2-container.swal2-center-end,.swal2-container.swal2-top-end{grid-template-columns:auto auto minmax(0,1fr)}.swal2-container.swal2-top-start>.swal2-popup{align-self:start}.swal2-container.swal2-top>.swal2-popup{grid-column:2;align-self:start;justify-self:center}.swal2-container.swal2-top-end>.swal2-popup,.swal2-container.swal2-top-right>.swal2-popup{grid-column:3;align-self:start;justify-self:end}.swal2-container.swal2-center-left>.swal2-popup,.swal2-container.swal2-center-start>.swal2-popup{grid-row:2;align-self:center}.swal2-container.swal2-center>.swal2-popup{grid-column:2;grid-row:2;align-self:center;justify-self:center}.swal2-container.swal2-center-end>.swal2-popup,.swal2-container.swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;align-self:center;justify-self:end}.swal2-container.swal2-bottom-left>.swal2-popup,.swal2-container.swal2-bottom-start>.swal2-popup{grid-column:1;grid-row:3;align-self:end}.swal2-container.swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;justify-self:center;align-self:end}.swal2-container.swal2-bottom-end>.swal2-popup,.swal2-container.swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;align-self:end;justify-self:end}.swal2-container.swal2-grow-fullscreen>.swal2-popup,.swal2-container.swal2-grow-row>.swal2-popup{grid-column:1/4;width:100%}.swal2-container.swal2-grow-column>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}.swal2-container.swal2-no-transition{transition:none!important}.swal2-popup{display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0,100%);width:32em;max-width:100%;padding:0 0 1.25em;border:none;border-radius:5px;background:#fff;color:#545454;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-title{position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 transparent #2778c4 transparent}.swal2-styled{margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px transparent;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}.swal2-styled.swal2-confirm:focus{box-shadow:0 0 0 3px rgba(112,102,224,.5)}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}.swal2-styled.swal2-deny:focus{box-shadow:0 0 0 3px rgba(220,55,65,.5)}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}.swal2-styled.swal2-cancel:focus{box-shadow:0 0 0 3px rgba(110,120,129,.5)}.swal2-styled.swal2-default-outline:focus{box-shadow:0 0 0 3px rgba(100,150,200,.5)}.swal2-styled:focus{outline:0}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1em 0 0;padding:1em 1em 0;border-top:1px solid #eee;color:inherit;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto!important;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:2em auto 1em}.swal2-close{z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:5px;background:0 0;color:#ccc;font-family:serif;font-family:monospace;font-size:2.5em;cursor:pointer;justify-self:end}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-close:focus{outline:0;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}.swal2-close::-moz-focus-inner{border:0}.swal2-html-container{z-index:1;justify-content:center;margin:1em 1.6em .3em;padding:0;overflow:auto;color:inherit;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em 2em 3px}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px transparent;color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em 2em 3px;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-file{width:75%;margin-right:auto;margin-left:auto;background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{flex-shrink:0;margin:0 .4em}.swal2-input-label{display:flex;justify-content:center;margin:1em auto 0}.swal2-validation-message{align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:\\\"!\\\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:.25em solid transparent;border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-warning.swal2-icon-show .swal2-icon-content{-webkit-animation:swal2-animate-i-mark .5s;animation:swal2-animate-i-mark .5s}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-info.swal2-icon-show .swal2-icon-content{-webkit-animation:swal2-animate-i-mark .8s;animation:swal2-animate-i-mark .8s}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-question.swal2-icon-show .swal2-icon-content{-webkit-animation:swal2-animate-question-mark .8s;animation:swal2-animate-question-mark .8s}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@-webkit-keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@-webkit-keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-container{background-color:transparent!important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:transparent;pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/sweetalert2/dist/sweetalert2.all.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/clients/WebSocketClient.js":
/*!**********************************************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/clients/WebSocketClient.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WebSocketClient)\n/* harmony export */ });\n/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/log.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/utils/log.js\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\nvar WebSocketClient = /*#__PURE__*/function () {\n  /**\n   * @param {string} url\n   */\n  function WebSocketClient(url) {\n    _classCallCheck(this, WebSocketClient);\n    this.client = new WebSocket(url);\n    this.client.onerror = function (error) {\n      _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.error(error);\n    };\n  }\n\n  /**\n   * @param {(...args: any[]) => void} f\n   */\n  return _createClass(WebSocketClient, [{\n    key: \"onOpen\",\n    value: function onOpen(f) {\n      this.client.onopen = f;\n    }\n\n    /**\n     * @param {(...args: any[]) => void} f\n     */\n  }, {\n    key: \"onClose\",\n    value: function onClose(f) {\n      this.client.onclose = f;\n    }\n\n    // call f with the message string as the first argument\n    /**\n     * @param {(...args: any[]) => void} f\n     */\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(f) {\n      this.client.onmessage = function (e) {\n        f(e.data);\n      };\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxpQ0FBaUM7QUFDakMsbUNBQW1DLGdCQUFnQixjQUFjLE9BQU8sY0FBYztBQUN0RixpQ0FBaUMscUhBQXFILGNBQWM7QUFDcEssNkJBQTZCLG1DQUFtQztBQUNoRSw4QkFBOEIsMENBQTBDLCtCQUErQixvQkFBb0IsbUNBQW1DLG9DQUFvQyx1RUFBdUU7QUFDbk87QUFDdEM7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSw4Q0FBRztBQUNUO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLDBCQUEwQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLDBCQUEwQjtBQUN6QztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSwwQkFBMEI7QUFDekM7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFua2Jvb2svLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanM/MGU3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IHR5cGVvZiBpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgaSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vdXRpbHMvbG9nLmpzXCI7XG52YXIgV2ViU29ja2V0Q2xpZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICovXG4gIGZ1bmN0aW9uIFdlYlNvY2tldENsaWVudCh1cmwpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2ViU29ja2V0Q2xpZW50KTtcbiAgICB0aGlzLmNsaWVudCA9IG5ldyBXZWJTb2NrZXQodXJsKTtcbiAgICB0aGlzLmNsaWVudC5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoV2ViU29ja2V0Q2xpZW50LCBbe1xuICAgIGtleTogXCJvbk9wZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25PcGVuKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9ub3BlbiA9IGY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJvbkNsb3NlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xvc2UoZikge1xuICAgICAgdGhpcy5jbGllbnQub25jbG9zZSA9IGY7XG4gICAgfVxuXG4gICAgLy8gY2FsbCBmIHdpdGggdGhlIG1lc3NhZ2Ugc3RyaW5nIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwib25NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVzc2FnZShmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmKGUuZGF0YSk7XG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xufSgpO1xuZXhwb3J0IHsgV2ViU29ja2V0Q2xpZW50IGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/clients/WebSocketClient.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("var __resourceQuery = \"?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSocketURL: () => (/* binding */ createSocketURL),\n/* harmony export */   getCurrentScriptSource: () => (/* binding */ getCurrentScriptSource),\n/* harmony export */   parseURL: () => (/* binding */ parseURL)\n/* harmony export */ });\n/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/log.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/log.js\");\n/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpack/hot/emitter.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/emitter.js\");\n/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./socket.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/socket.js\");\n/* harmony import */ var _overlay_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./overlay.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/overlay.js\");\n/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/log.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/utils/log.js\");\n/* harmony import */ var _utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/sendMessage.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/utils/sendMessage.js\");\n/* harmony import */ var _progress_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./progress.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/progress.js\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* global __resourceQuery, __webpack_hash__ */\n/// <reference types=\"webpack/module\" />\n\n\n\n\n\n\n\n\n/**\n * @typedef {Object} OverlayOptions\n * @property {boolean | (error: Error) => boolean} [warnings]\n * @property {boolean | (error: Error) => boolean} [errors]\n * @property {boolean | (error: Error) => boolean} [runtimeErrors]\n * @property {string} [trustedTypesPolicyName]\n */\n\n/**\n * @typedef {Object} Options\n * @property {boolean} hot\n * @property {boolean} liveReload\n * @property {boolean} progress\n * @property {boolean | OverlayOptions} overlay\n * @property {string} [logging]\n * @property {number} [reconnect]\n */\n\n/**\n * @typedef {Object} Status\n * @property {boolean} isUnloading\n * @property {string} currentHash\n * @property {string} [previousHash]\n */\n\n/**\n * @param {boolean | { warnings?: boolean | string; errors?: boolean | string; runtimeErrors?: boolean | string; }} overlayOptions\n */\nvar decodeOverlayOptions = function decodeOverlayOptions(overlayOptions) {\n  if (typeof overlayOptions === \"object\") {\n    [\"warnings\", \"errors\", \"runtimeErrors\"].forEach(function (property) {\n      if (typeof overlayOptions[property] === \"string\") {\n        var overlayFilterFunctionString = decodeURIComponent(overlayOptions[property]);\n\n        // eslint-disable-next-line no-new-func\n        overlayOptions[property] = new Function(\"message\", \"var callback = \".concat(overlayFilterFunctionString, \"\\n        return callback(message)\"));\n      }\n    });\n  }\n};\n\n/**\n * @type {Status}\n */\nvar status = {\n  isUnloading: false,\n  // eslint-disable-next-line camelcase\n  currentHash: __webpack_require__.h()\n};\n\n/**\n * @returns {string}\n */\nvar getCurrentScriptSource = function getCurrentScriptSource() {\n  // `document.currentScript` is the most accurate way to find the current script,\n  // but is not supported in all browsers.\n  if (document.currentScript) {\n    return document.currentScript.getAttribute(\"src\");\n  }\n\n  // Fallback to getting all scripts running in the document.\n  var scriptElements = document.scripts || [];\n  var scriptElementsWithSrc = Array.prototype.filter.call(scriptElements, function (element) {\n    return element.getAttribute(\"src\");\n  });\n  if (scriptElementsWithSrc.length > 0) {\n    var currentScript = scriptElementsWithSrc[scriptElementsWithSrc.length - 1];\n    return currentScript.getAttribute(\"src\");\n  }\n\n  // Fail as there was no script to use.\n  throw new Error(\"[webpack-dev-server] Failed to get current script source.\");\n};\n\n/**\n * @param {string} resourceQuery\n * @returns {{ [key: string]: string | boolean }}\n */\nvar parseURL = function parseURL(resourceQuery) {\n  /** @type {{ [key: string]: string }} */\n  var result = {};\n  if (typeof resourceQuery === \"string\" && resourceQuery !== \"\") {\n    var searchParams = resourceQuery.slice(1).split(\"&\");\n    for (var i = 0; i < searchParams.length; i++) {\n      var pair = searchParams[i].split(\"=\");\n      result[pair[0]] = decodeURIComponent(pair[1]);\n    }\n  } else {\n    // Else, get the url from the <script> this file was called with.\n    var scriptSource = getCurrentScriptSource();\n    var scriptSourceURL;\n    try {\n      // The placeholder `baseURL` with `window.location.href`,\n      // is to allow parsing of path-relative or protocol-relative URLs,\n      // and will have no effect if `scriptSource` is a fully valid URL.\n      scriptSourceURL = new URL(scriptSource, self.location.href);\n    } catch (error) {\n      // URL parsing failed, do nothing.\n      // We will still proceed to see if we can recover using `resourceQuery`\n    }\n    if (scriptSourceURL) {\n      result = scriptSourceURL;\n      result.fromCurrentScript = true;\n    }\n  }\n  return result;\n};\nvar parsedResourceQuery = parseURL(__resourceQuery);\nvar enabledFeatures = {\n  \"Hot Module Replacement\": false,\n  \"Live Reloading\": false,\n  Progress: false,\n  Overlay: false\n};\n\n/** @type {Options} */\nvar options = {\n  hot: false,\n  liveReload: false,\n  progress: false,\n  overlay: false\n};\nif (parsedResourceQuery.hot === \"true\") {\n  options.hot = true;\n  enabledFeatures[\"Hot Module Replacement\"] = true;\n}\nif (parsedResourceQuery[\"live-reload\"] === \"true\") {\n  options.liveReload = true;\n  enabledFeatures[\"Live Reloading\"] = true;\n}\nif (parsedResourceQuery.progress === \"true\") {\n  options.progress = true;\n  enabledFeatures.Progress = true;\n}\nif (parsedResourceQuery.overlay) {\n  try {\n    options.overlay = JSON.parse(parsedResourceQuery.overlay);\n  } catch (e) {\n    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.error(\"Error parsing overlay options from resource query:\", e);\n  }\n\n  // Fill in default \"true\" params for partially-specified objects.\n  if (typeof options.overlay === \"object\") {\n    options.overlay = _objectSpread({\n      errors: true,\n      warnings: true,\n      runtimeErrors: true\n    }, options.overlay);\n    decodeOverlayOptions(options.overlay);\n  }\n  enabledFeatures.Overlay = true;\n}\nif (parsedResourceQuery.logging) {\n  options.logging = parsedResourceQuery.logging;\n}\nif (typeof parsedResourceQuery.reconnect !== \"undefined\") {\n  options.reconnect = Number(parsedResourceQuery.reconnect);\n}\n\n/**\n * @param {string} level\n */\nvar setAllLogLevel = function setAllLogLevel(level) {\n  // This is needed because the HMR logger operate separately from dev server logger\n  webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default().setLogLevel(level === \"verbose\" || level === \"log\" ? \"info\" : level);\n  (0,_utils_log_js__WEBPACK_IMPORTED_MODULE_4__.setLogLevel)(level);\n};\nif (options.logging) {\n  setAllLogLevel(options.logging);\n}\nvar logEnabledFeatures = function logEnabledFeatures(features) {\n  var listEnabledFeatures = Object.keys(features);\n  if (!features || listEnabledFeatures.length === 0) {\n    return;\n  }\n  var logString = \"Server started:\";\n\n  // Server started: Hot Module Replacement enabled, Live Reloading enabled, Overlay disabled.\n  for (var i = 0; i < listEnabledFeatures.length; i++) {\n    var key = listEnabledFeatures[i];\n    logString += \" \".concat(key, \" \").concat(features[key] ? \"enabled\" : \"disabled\", \",\");\n  }\n  // replace last comma with a period\n  logString = logString.slice(0, -1).concat(\".\");\n  _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info(logString);\n};\nlogEnabledFeatures(enabledFeatures);\nself.addEventListener(\"beforeunload\", function () {\n  status.isUnloading = true;\n});\nvar overlay = typeof window !== \"undefined\" ? (0,_overlay_js__WEBPACK_IMPORTED_MODULE_3__.createOverlay)(typeof options.overlay === \"object\" ? {\n  trustedTypesPolicyName: options.overlay.trustedTypesPolicyName,\n  catchRuntimeError: options.overlay.runtimeErrors\n} : {\n  trustedTypesPolicyName: false,\n  catchRuntimeError: options.overlay\n}) : {\n  send: function send() {}\n};\n\n/**\n * @param {Options} options\n * @param {Status} currentStatus\n */\nvar reloadApp = function reloadApp(_ref, currentStatus) {\n  var hot = _ref.hot,\n    liveReload = _ref.liveReload;\n  if (currentStatus.isUnloading) {\n    return;\n  }\n  var currentHash = currentStatus.currentHash,\n    previousHash = currentStatus.previousHash;\n  var isInitial = currentHash.indexOf(/** @type {string} */previousHash) >= 0;\n  if (isInitial) {\n    return;\n  }\n\n  /**\n   * @param {Window} rootWindow\n   * @param {number} intervalId\n   */\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info(\"App updated. Reloading...\");\n    rootWindow.location.reload();\n  }\n  var search = self.location.search.toLowerCase();\n  var allowToHot = search.indexOf(\"webpack-dev-server-hot=false\") === -1;\n  var allowToLiveReload = search.indexOf(\"webpack-dev-server-live-reload=false\") === -1;\n  if (hot && allowToHot) {\n    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info(\"App hot update...\");\n    webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_1___default().emit(\"webpackHotUpdate\", currentStatus.currentHash);\n    if (typeof self !== \"undefined\" && self.window) {\n      // broadcast update to window\n      self.postMessage(\"webpackHotUpdate\".concat(currentStatus.currentHash), \"*\");\n    }\n  }\n  // allow refreshing the page only if liveReload isn't disabled\n  else if (liveReload && allowToLiveReload) {\n    var rootWindow = self;\n\n    // use parent window for reload (in case we're in an iframe with no valid src)\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== \"about:\") {\n        // reload immediately if protocol is valid\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n        if (rootWindow.parent === rootWindow) {\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n};\nvar ansiRegex = new RegExp([\"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\", \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))\"].join(\"|\"), \"g\");\n\n/**\n *\n * Strip [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code) from a string.\n * Adapted from code originally released by Sindre Sorhus\n * Licensed the MIT License\n *\n * @param {string} string\n * @return {string}\n */\nvar stripAnsi = function stripAnsi(string) {\n  if (typeof string !== \"string\") {\n    throw new TypeError(\"Expected a `string`, got `\".concat(typeof string, \"`\"));\n  }\n  return string.replace(ansiRegex, \"\");\n};\nvar onSocketMessage = {\n  hot: function hot() {\n    if (parsedResourceQuery.hot === \"false\") {\n      return;\n    }\n    options.hot = true;\n  },\n  liveReload: function liveReload() {\n    if (parsedResourceQuery[\"live-reload\"] === \"false\") {\n      return;\n    }\n    options.liveReload = true;\n  },\n  invalid: function invalid() {\n    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info(\"App updated. Recompiling...\");\n\n    // Fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.\n    if (options.overlay) {\n      overlay.send({\n        type: \"DISMISS\"\n      });\n    }\n    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"Invalid\");\n  },\n  /**\n   * @param {string} hash\n   */\n  hash: function hash(_hash) {\n    status.previousHash = status.currentHash;\n    status.currentHash = _hash;\n  },\n  logging: setAllLogLevel,\n  /**\n   * @param {boolean} value\n   */\n  overlay: function overlay(value) {\n    if (typeof document === \"undefined\") {\n      return;\n    }\n    options.overlay = value;\n    decodeOverlayOptions(options.overlay);\n  },\n  /**\n   * @param {number} value\n   */\n  reconnect: function reconnect(value) {\n    if (parsedResourceQuery.reconnect === \"false\") {\n      return;\n    }\n    options.reconnect = value;\n  },\n  /**\n   * @param {boolean} value\n   */\n  progress: function progress(value) {\n    options.progress = value;\n  },\n  /**\n   * @param {{ pluginName?: string, percent: number, msg: string }} data\n   */\n  \"progress-update\": function progressUpdate(data) {\n    if (options.progress) {\n      _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info(\"\".concat(data.pluginName ? \"[\".concat(data.pluginName, \"] \") : \"\").concat(data.percent, \"% - \").concat(data.msg, \".\"));\n    }\n    if ((0,_progress_js__WEBPACK_IMPORTED_MODULE_6__.isProgressSupported)()) {\n      if (typeof options.progress === \"string\") {\n        var progress = document.querySelector(\"wds-progress\");\n        if (!progress) {\n          (0,_progress_js__WEBPACK_IMPORTED_MODULE_6__.defineProgressElement)();\n          progress = document.createElement(\"wds-progress\");\n          document.body.appendChild(progress);\n        }\n        progress.setAttribute(\"progress\", data.percent);\n        progress.setAttribute(\"type\", options.progress);\n      }\n    }\n    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"Progress\", data);\n  },\n  \"still-ok\": function stillOk() {\n    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info(\"Nothing changed.\");\n    if (options.overlay) {\n      overlay.send({\n        type: \"DISMISS\"\n      });\n    }\n    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"StillOk\");\n  },\n  ok: function ok() {\n    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"Ok\");\n    if (options.overlay) {\n      overlay.send({\n        type: \"DISMISS\"\n      });\n    }\n    reloadApp(options, status);\n  },\n  /**\n   * @param {string} file\n   */\n  \"static-changed\": function staticChanged(file) {\n    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info(\"\".concat(file ? \"\\\"\".concat(file, \"\\\"\") : \"Content\", \" from static directory was changed. Reloading...\"));\n    self.location.reload();\n  },\n  /**\n   * @param {Error[]} warnings\n   * @param {any} params\n   */\n  warnings: function warnings(_warnings, params) {\n    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.warn(\"Warnings while compiling.\");\n    var printableWarnings = _warnings.map(function (error) {\n      var _formatProblem = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_3__.formatProblem)(\"warning\", error),\n        header = _formatProblem.header,\n        body = _formatProblem.body;\n      return \"\".concat(header, \"\\n\").concat(stripAnsi(body));\n    });\n    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"Warnings\", printableWarnings);\n    for (var i = 0; i < printableWarnings.length; i++) {\n      _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.warn(printableWarnings[i]);\n    }\n    var overlayWarningsSetting = typeof options.overlay === \"boolean\" ? options.overlay : options.overlay && options.overlay.warnings;\n    if (overlayWarningsSetting) {\n      var warningsToDisplay = typeof overlayWarningsSetting === \"function\" ? _warnings.filter(overlayWarningsSetting) : _warnings;\n      if (warningsToDisplay.length) {\n        overlay.send({\n          type: \"BUILD_ERROR\",\n          level: \"warning\",\n          messages: _warnings\n        });\n      }\n    }\n    if (params && params.preventReloading) {\n      return;\n    }\n    reloadApp(options, status);\n  },\n  /**\n   * @param {Error[]} errors\n   */\n  errors: function errors(_errors) {\n    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.error(\"Errors while compiling. Reload prevented.\");\n    var printableErrors = _errors.map(function (error) {\n      var _formatProblem2 = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_3__.formatProblem)(\"error\", error),\n        header = _formatProblem2.header,\n        body = _formatProblem2.body;\n      return \"\".concat(header, \"\\n\").concat(stripAnsi(body));\n    });\n    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"Errors\", printableErrors);\n    for (var i = 0; i < printableErrors.length; i++) {\n      _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.error(printableErrors[i]);\n    }\n    var overlayErrorsSettings = typeof options.overlay === \"boolean\" ? options.overlay : options.overlay && options.overlay.errors;\n    if (overlayErrorsSettings) {\n      var errorsToDisplay = typeof overlayErrorsSettings === \"function\" ? _errors.filter(overlayErrorsSettings) : _errors;\n      if (errorsToDisplay.length) {\n        overlay.send({\n          type: \"BUILD_ERROR\",\n          level: \"error\",\n          messages: _errors\n        });\n      }\n    }\n  },\n  /**\n   * @param {Error} error\n   */\n  error: function error(_error) {\n    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.error(_error);\n  },\n  close: function close() {\n    _utils_log_js__WEBPACK_IMPORTED_MODULE_4__.log.info(\"Disconnected!\");\n    if (options.overlay) {\n      overlay.send({\n        type: \"DISMISS\"\n      });\n    }\n    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"Close\");\n  }\n};\n\n/**\n * @param {{ protocol?: string, auth?: string, hostname?: string, port?: string, pathname?: string, search?: string, hash?: string, slashes?: boolean }} objURL\n * @returns {string}\n */\nvar formatURL = function formatURL(objURL) {\n  var protocol = objURL.protocol || \"\";\n  if (protocol && protocol.substr(-1) !== \":\") {\n    protocol += \":\";\n  }\n  var auth = objURL.auth || \"\";\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, \":\");\n    auth += \"@\";\n  }\n  var host = \"\";\n  if (objURL.hostname) {\n    host = auth + (objURL.hostname.indexOf(\":\") === -1 ? objURL.hostname : \"[\".concat(objURL.hostname, \"]\"));\n    if (objURL.port) {\n      host += \":\".concat(objURL.port);\n    }\n  }\n  var pathname = objURL.pathname || \"\";\n  if (objURL.slashes) {\n    host = \"//\".concat(host || \"\");\n    if (pathname && pathname.charAt(0) !== \"/\") {\n      pathname = \"/\".concat(pathname);\n    }\n  } else if (!host) {\n    host = \"\";\n  }\n  var search = objURL.search || \"\";\n  if (search && search.charAt(0) !== \"?\") {\n    search = \"?\".concat(search);\n  }\n  var hash = objURL.hash || \"\";\n  if (hash && hash.charAt(0) !== \"#\") {\n    hash = \"#\".concat(hash);\n  }\n  pathname = pathname.replace(/[?#]/g,\n  /**\n   * @param {string} match\n   * @returns {string}\n   */\n  function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace(\"#\", \"%23\");\n  return \"\".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);\n};\n\n/**\n * @param {URL & { fromCurrentScript?: boolean }} parsedURL\n * @returns {string}\n */\nvar createSocketURL = function createSocketURL(parsedURL) {\n  var hostname = parsedURL.hostname;\n\n  // Node.js module parses it as `::`\n  // `new URL(urlString, [baseURLString])` parses it as '[::]'\n  var isInAddrAny = hostname === \"0.0.0.0\" || hostname === \"::\" || hostname === \"[::]\";\n\n  // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n  if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf(\"http\") === 0) {\n    hostname = self.location.hostname;\n  }\n  var socketURLProtocol = parsedURL.protocol || self.location.protocol;\n\n  // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.\n  if (socketURLProtocol === \"auto:\" || hostname && isInAddrAny && self.location.protocol === \"https:\") {\n    socketURLProtocol = self.location.protocol;\n  }\n  socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, \"ws\");\n  var socketURLAuth = \"\";\n\n  // `new URL(urlString, [baseURLstring])` doesn't have `auth` property\n  // Parse authentication credentials in case we need them\n  if (parsedURL.username) {\n    socketURLAuth = parsedURL.username;\n\n    // Since HTTP basic authentication does not allow empty username,\n    // we only include password if the username is not empty.\n    if (parsedURL.password) {\n      // Result: <username>:<password>\n      socketURLAuth = socketURLAuth.concat(\":\", parsedURL.password);\n    }\n  }\n\n  // In case the host is a raw IPv6 address, it can be enclosed in\n  // the brackets as the brackets are needed in the final URL string.\n  // Need to remove those as url.format blindly adds its own set of brackets\n  // if the host string contains colons. That would lead to non-working\n  // double brackets (e.g. [[::]]) host\n  //\n  // All of these web socket url params are optionally passed in through resourceQuery,\n  // so we need to fall back to the default if they are not provided\n  var socketURLHostname = (hostname || self.location.hostname || \"localhost\").replace(/^\\[(.*)\\]$/, \"$1\");\n  var socketURLPort = parsedURL.port;\n  if (!socketURLPort || socketURLPort === \"0\") {\n    socketURLPort = self.location.port;\n  }\n\n  // If path is provided it'll be passed in via the resourceQuery as a\n  // query param so it has to be parsed out of the querystring in order for the\n  // client to open the socket to the correct location.\n  var socketURLPathname = \"/ws\";\n  if (parsedURL.pathname && !parsedURL.fromCurrentScript) {\n    socketURLPathname = parsedURL.pathname;\n  }\n  return formatURL({\n    protocol: socketURLProtocol,\n    auth: socketURLAuth,\n    hostname: socketURLHostname,\n    port: socketURLPort,\n    pathname: socketURLPathname,\n    slashes: true\n  });\n};\nvar socketURL = createSocketURL(parsedResourceQuery);\n(0,_socket_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(socketURL, onSocketMessage, options.reconnect);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/modules/logger/index.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/modules/logger/index.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/******/ (function() { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./client-src/modules/logger/tapable.js\":\n/*!**********************************************!*\\\n  !*** ./client-src/modules/logger/tapable.js ***!\n  \\**********************************************/\n/***/ (function(__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_372__) {\n\n__nested_webpack_require_372__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_372__.d(__nested_webpack_exports__, {\n/* harmony export */   SyncBailHook: function() { return /* binding */ SyncBailHook; }\n/* harmony export */ });\nfunction SyncBailHook() {\n  return {\n    call: function call() {}\n  };\n}\n\n/**\n * Client stub for tapable SyncBailHook\n */\n// eslint-disable-next-line import/prefer-default-export\n\n\n/***/ }),\n\n/***/ \"./node_modules/webpack/lib/logging/Logger.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/webpack/lib/logging/Logger.js ***!\n  \\****************************************************/\n/***/ (function(module) {\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\n\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof (typeof Symbol !== \"undefined\" ? Symbol : function (i) { return i; }) && null != r[(typeof Symbol !== \"undefined\" ? Symbol : function (i) { return i; }).iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[(typeof Symbol !== \"undefined\" ? Symbol : function (i) { return i; }).toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar LogType = Object.freeze({\n  error: (/** @type {\"error\"} */\"error\"),\n  // message, c style arguments\n  warn: (/** @type {\"warn\"} */\"warn\"),\n  // message, c style arguments\n  info: (/** @type {\"info\"} */\"info\"),\n  // message, c style arguments\n  log: (/** @type {\"log\"} */\"log\"),\n  // message, c style arguments\n  debug: (/** @type {\"debug\"} */\"debug\"),\n  // message, c style arguments\n\n  trace: (/** @type {\"trace\"} */\"trace\"),\n  // no arguments\n\n  group: (/** @type {\"group\"} */\"group\"),\n  // [label]\n  groupCollapsed: (/** @type {\"groupCollapsed\"} */\"groupCollapsed\"),\n  // [label]\n  groupEnd: (/** @type {\"groupEnd\"} */\"groupEnd\"),\n  // [label]\n\n  profile: (/** @type {\"profile\"} */\"profile\"),\n  // [profileName]\n  profileEnd: (/** @type {\"profileEnd\"} */\"profileEnd\"),\n  // [profileName]\n\n  time: (/** @type {\"time\"} */\"time\"),\n  // name, time as [seconds, nanoseconds]\n\n  clear: (/** @type {\"clear\"} */\"clear\"),\n  // no arguments\n  status: (/** @type {\"status\"} */\"status\") // message, arguments\n});\nmodule.exports.LogType = LogType;\n\n/** @typedef {typeof LogType[keyof typeof LogType]} LogTypeEnum */\n\nvar LOG_SYMBOL = (typeof Symbol !== \"undefined\" ? Symbol : function (i) { return i; })(\"webpack logger raw log method\");\nvar TIMERS_SYMBOL = (typeof Symbol !== \"undefined\" ? Symbol : function (i) { return i; })(\"webpack logger times\");\nvar TIMERS_AGGREGATES_SYMBOL = (typeof Symbol !== \"undefined\" ? Symbol : function (i) { return i; })(\"webpack logger aggregated times\");\nvar WebpackLogger = /*#__PURE__*/function () {\n  /**\n   * @param {function(LogTypeEnum, EXPECTED_ANY[]=): void} log log function\n   * @param {function(string | function(): string): WebpackLogger} getChildLogger function to create child logger\n   */\n  function WebpackLogger(log, getChildLogger) {\n    _classCallCheck(this, WebpackLogger);\n    this[LOG_SYMBOL] = log;\n    this.getChildLogger = getChildLogger;\n  }\n\n  /**\n   * @param {...EXPECTED_ANY} args args\n   */\n  return _createClass(WebpackLogger, [{\n    key: \"error\",\n    value: function error() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      this[LOG_SYMBOL](LogType.error, args);\n    }\n\n    /**\n     * @param {...EXPECTED_ANY} args args\n     */\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      this[LOG_SYMBOL](LogType.warn, args);\n    }\n\n    /**\n     * @param {...EXPECTED_ANY} args args\n     */\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      this[LOG_SYMBOL](LogType.info, args);\n    }\n\n    /**\n     * @param {...EXPECTED_ANY} args args\n     */\n  }, {\n    key: \"log\",\n    value: function log() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      this[LOG_SYMBOL](LogType.log, args);\n    }\n\n    /**\n     * @param {...EXPECTED_ANY} args args\n     */\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      this[LOG_SYMBOL](LogType.debug, args);\n    }\n\n    /**\n     * @param {EXPECTED_ANY} assertion assertion\n     * @param {...EXPECTED_ANY} args args\n     */\n  }, {\n    key: \"assert\",\n    value: function assert(assertion) {\n      if (!assertion) {\n        for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n          args[_key6 - 1] = arguments[_key6];\n        }\n        this[LOG_SYMBOL](LogType.error, args);\n      }\n    }\n  }, {\n    key: \"trace\",\n    value: function trace() {\n      this[LOG_SYMBOL](LogType.trace, [\"Trace\"]);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this[LOG_SYMBOL](LogType.clear);\n    }\n\n    /**\n     * @param {...EXPECTED_ANY} args args\n     */\n  }, {\n    key: \"status\",\n    value: function status() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      this[LOG_SYMBOL](LogType.status, args);\n    }\n\n    /**\n     * @param {...EXPECTED_ANY} args args\n     */\n  }, {\n    key: \"group\",\n    value: function group() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      this[LOG_SYMBOL](LogType.group, args);\n    }\n\n    /**\n     * @param {...EXPECTED_ANY} args args\n     */\n  }, {\n    key: \"groupCollapsed\",\n    value: function groupCollapsed() {\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n      this[LOG_SYMBOL](LogType.groupCollapsed, args);\n    }\n  }, {\n    key: \"groupEnd\",\n    value: function groupEnd() {\n      this[LOG_SYMBOL](LogType.groupEnd);\n    }\n\n    /**\n     * @param {string=} label label\n     */\n  }, {\n    key: \"profile\",\n    value: function profile(label) {\n      this[LOG_SYMBOL](LogType.profile, [label]);\n    }\n\n    /**\n     * @param {string=} label label\n     */\n  }, {\n    key: \"profileEnd\",\n    value: function profileEnd(label) {\n      this[LOG_SYMBOL](LogType.profileEnd, [label]);\n    }\n\n    /**\n     * @param {string} label label\n     */\n  }, {\n    key: \"time\",\n    value: function time(label) {\n      /** @type {Map<string | undefined, [number, number]>} */\n      this[TIMERS_SYMBOL] = this[TIMERS_SYMBOL] || new Map();\n      this[TIMERS_SYMBOL].set(label, process.hrtime());\n    }\n\n    /**\n     * @param {string=} label label\n     */\n  }, {\n    key: \"timeLog\",\n    value: function timeLog(label) {\n      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);\n      if (!prev) {\n        throw new Error(\"No such label '\".concat(label, \"' for WebpackLogger.timeLog()\"));\n      }\n      var time = process.hrtime(prev);\n      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));\n    }\n\n    /**\n     * @param {string=} label label\n     */\n  }, {\n    key: \"timeEnd\",\n    value: function timeEnd(label) {\n      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);\n      if (!prev) {\n        throw new Error(\"No such label '\".concat(label, \"' for WebpackLogger.timeEnd()\"));\n      }\n      var time = process.hrtime(prev);\n      /** @type {Map<string | undefined, [number, number]>} */\n      this[TIMERS_SYMBOL].delete(label);\n      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));\n    }\n\n    /**\n     * @param {string=} label label\n     */\n  }, {\n    key: \"timeAggregate\",\n    value: function timeAggregate(label) {\n      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);\n      if (!prev) {\n        throw new Error(\"No such label '\".concat(label, \"' for WebpackLogger.timeAggregate()\"));\n      }\n      var time = process.hrtime(prev);\n      /** @type {Map<string | undefined, [number, number]>} */\n      this[TIMERS_SYMBOL].delete(label);\n      /** @type {Map<string | undefined, [number, number]>} */\n      this[TIMERS_AGGREGATES_SYMBOL] = this[TIMERS_AGGREGATES_SYMBOL] || new Map();\n      var current = this[TIMERS_AGGREGATES_SYMBOL].get(label);\n      if (current !== undefined) {\n        if (time[1] + current[1] > 1e9) {\n          time[0] += current[0] + 1;\n          time[1] = time[1] - 1e9 + current[1];\n        } else {\n          time[0] += current[0];\n          time[1] += current[1];\n        }\n      }\n      this[TIMERS_AGGREGATES_SYMBOL].set(label, time);\n    }\n\n    /**\n     * @param {string=} label label\n     */\n  }, {\n    key: \"timeAggregateEnd\",\n    value: function timeAggregateEnd(label) {\n      if (this[TIMERS_AGGREGATES_SYMBOL] === undefined) return;\n      var time = this[TIMERS_AGGREGATES_SYMBOL].get(label);\n      if (time === undefined) return;\n      this[TIMERS_AGGREGATES_SYMBOL].delete(label);\n      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));\n    }\n  }]);\n}();\nmodule.exports.Logger = WebpackLogger;\n\n/***/ }),\n\n/***/ \"./node_modules/webpack/lib/logging/createConsoleLogger.js\":\n/*!*****************************************************************!*\\\n  !*** ./node_modules/webpack/lib/logging/createConsoleLogger.js ***!\n  \\*****************************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_12144__) {\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\n\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof (typeof Symbol !== \"undefined\" ? Symbol : function (i) { return i; }) && r[(typeof Symbol !== \"undefined\" ? Symbol : function (i) { return i; }).iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof (typeof Symbol !== \"undefined\" ? Symbol : function (i) { return i; }) && null != r[(typeof Symbol !== \"undefined\" ? Symbol : function (i) { return i; }).iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nvar _require = __nested_webpack_require_12144__(/*! ./Logger */ \"./node_modules/webpack/lib/logging/Logger.js\"),\n  LogType = _require.LogType;\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").FilterItemTypes} FilterItemTypes */\n/** @typedef {import(\"../../declarations/WebpackOptions\").FilterTypes} FilterTypes */\n/** @typedef {import(\"./Logger\").LogTypeEnum} LogTypeEnum */\n\n/** @typedef {function(string): boolean} FilterFunction */\n/** @typedef {function(string, LogTypeEnum, EXPECTED_ANY[]=): void} LoggingFunction */\n\n/**\n * @typedef {object} LoggerConsole\n * @property {function(): void} clear\n * @property {function(): void} trace\n * @property {(...args: EXPECTED_ANY[]) => void} info\n * @property {(...args: EXPECTED_ANY[]) => void} log\n * @property {(...args: EXPECTED_ANY[]) => void} warn\n * @property {(...args: EXPECTED_ANY[]) => void} error\n * @property {(...args: EXPECTED_ANY[]) => void=} debug\n * @property {(...args: EXPECTED_ANY[]) => void=} group\n * @property {(...args: EXPECTED_ANY[]) => void=} groupCollapsed\n * @property {(...args: EXPECTED_ANY[]) => void=} groupEnd\n * @property {(...args: EXPECTED_ANY[]) => void=} status\n * @property {(...args: EXPECTED_ANY[]) => void=} profile\n * @property {(...args: EXPECTED_ANY[]) => void=} profileEnd\n * @property {(...args: EXPECTED_ANY[]) => void=} logTime\n */\n\n/**\n * @typedef {object} LoggerOptions\n * @property {false|true|\"none\"|\"error\"|\"warn\"|\"info\"|\"log\"|\"verbose\"} level loglevel\n * @property {FilterTypes|boolean} debug filter for debug logging\n * @property {LoggerConsole} console the console to log to\n */\n\n/**\n * @param {FilterItemTypes} item an input item\n * @returns {FilterFunction | undefined} filter function\n */\nvar filterToFunction = function filterToFunction(item) {\n  if (typeof item === \"string\") {\n    var regExp = new RegExp(\"[\\\\\\\\/]\".concat(item.replace(/[-[\\]{}()*+?.\\\\^$|]/g, \"\\\\$&\"), \"([\\\\\\\\/]|$|!|\\\\?)\"));\n    return function (ident) {\n      return regExp.test(ident);\n    };\n  }\n  if (item && typeof item === \"object\" && typeof item.test === \"function\") {\n    return function (ident) {\n      return item.test(ident);\n    };\n  }\n  if (typeof item === \"function\") {\n    return item;\n  }\n  if (typeof item === \"boolean\") {\n    return function () {\n      return item;\n    };\n  }\n};\n\n/**\n * @enum {number}\n */\nvar LogLevel = {\n  none: 6,\n  false: 6,\n  error: 5,\n  warn: 4,\n  info: 3,\n  log: 2,\n  true: 2,\n  verbose: 1\n};\n\n/**\n * @param {LoggerOptions} options options object\n * @returns {LoggingFunction} logging function\n */\nmodule.exports = function (_ref) {\n  var _ref$level = _ref.level,\n    level = _ref$level === void 0 ? \"info\" : _ref$level,\n    _ref$debug = _ref.debug,\n    debug = _ref$debug === void 0 ? false : _ref$debug,\n    console = _ref.console;\n  var debugFilters = /** @type {FilterFunction[]} */\n\n  typeof debug === \"boolean\" ? [function () {\n    return debug;\n  }] : /** @type {FilterItemTypes[]} */[].concat(debug).map(filterToFunction);\n  /** @type {number} */\n  var loglevel = LogLevel[\"\".concat(level)] || 0;\n\n  /**\n   * @param {string} name name of the logger\n   * @param {LogTypeEnum} type type of the log entry\n   * @param {EXPECTED_ANY[]=} args arguments of the log entry\n   * @returns {void}\n   */\n  var logger = function logger(name, type, args) {\n    var labeledArgs = function labeledArgs() {\n      if (Array.isArray(args)) {\n        if (args.length > 0 && typeof args[0] === \"string\") {\n          return [\"[\".concat(name, \"] \").concat(args[0])].concat(_toConsumableArray(args.slice(1)));\n        }\n        return [\"[\".concat(name, \"]\")].concat(_toConsumableArray(args));\n      }\n      return [];\n    };\n    var debug = debugFilters.some(function (f) {\n      return f(name);\n    });\n    switch (type) {\n      case LogType.debug:\n        if (!debug) return;\n        if (typeof console.debug === \"function\") {\n          console.debug.apply(console, _toConsumableArray(labeledArgs()));\n        } else {\n          console.log.apply(console, _toConsumableArray(labeledArgs()));\n        }\n        break;\n      case LogType.log:\n        if (!debug && loglevel > LogLevel.log) return;\n        console.log.apply(console, _toConsumableArray(labeledArgs()));\n        break;\n      case LogType.info:\n        if (!debug && loglevel > LogLevel.info) return;\n        console.info.apply(console, _toConsumableArray(labeledArgs()));\n        break;\n      case LogType.warn:\n        if (!debug && loglevel > LogLevel.warn) return;\n        console.warn.apply(console, _toConsumableArray(labeledArgs()));\n        break;\n      case LogType.error:\n        if (!debug && loglevel > LogLevel.error) return;\n        console.error.apply(console, _toConsumableArray(labeledArgs()));\n        break;\n      case LogType.trace:\n        if (!debug) return;\n        console.trace();\n        break;\n      case LogType.groupCollapsed:\n        if (!debug && loglevel > LogLevel.log) return;\n        if (!debug && loglevel > LogLevel.verbose) {\n          if (typeof console.groupCollapsed === \"function\") {\n            console.groupCollapsed.apply(console, _toConsumableArray(labeledArgs()));\n          } else {\n            console.log.apply(console, _toConsumableArray(labeledArgs()));\n          }\n          break;\n        }\n      // falls through\n      case LogType.group:\n        if (!debug && loglevel > LogLevel.log) return;\n        if (typeof console.group === \"function\") {\n          console.group.apply(console, _toConsumableArray(labeledArgs()));\n        } else {\n          console.log.apply(console, _toConsumableArray(labeledArgs()));\n        }\n        break;\n      case LogType.groupEnd:\n        if (!debug && loglevel > LogLevel.log) return;\n        if (typeof console.groupEnd === \"function\") {\n          console.groupEnd();\n        }\n        break;\n      case LogType.time:\n        {\n          if (!debug && loglevel > LogLevel.log) return;\n          var _args = _slicedToArray(/** @type {[string, number, number]} */\n            args, 3),\n            label = _args[0],\n            start = _args[1],\n            end = _args[2];\n          var ms = start * 1000 + end / 1000000;\n          var msg = \"[\".concat(name, \"] \").concat(label, \": \").concat(ms, \" ms\");\n          if (typeof console.logTime === \"function\") {\n            console.logTime(msg);\n          } else {\n            console.log(msg);\n          }\n          break;\n        }\n      case LogType.profile:\n        if (typeof console.profile === \"function\") {\n          console.profile.apply(console, _toConsumableArray(labeledArgs()));\n        }\n        break;\n      case LogType.profileEnd:\n        if (typeof console.profileEnd === \"function\") {\n          console.profileEnd.apply(console, _toConsumableArray(labeledArgs()));\n        }\n        break;\n      case LogType.clear:\n        if (!debug && loglevel > LogLevel.log) return;\n        if (typeof console.clear === \"function\") {\n          console.clear();\n        }\n        break;\n      case LogType.status:\n        if (!debug && loglevel > LogLevel.info) return;\n        if (typeof console.status === \"function\") {\n          if (!args || args.length === 0) {\n            console.status();\n          } else {\n            console.status.apply(console, _toConsumableArray(labeledArgs()));\n          }\n        } else if (args && args.length !== 0) {\n          console.info.apply(console, _toConsumableArray(labeledArgs()));\n        }\n        break;\n      default:\n        throw new Error(\"Unexpected LogType \".concat(type));\n    }\n  };\n  return logger;\n};\n\n/***/ }),\n\n/***/ \"./node_modules/webpack/lib/logging/runtime.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/webpack/lib/logging/runtime.js ***!\n  \\*****************************************************/\n/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_22489__) {\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\n\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nvar _require = __nested_webpack_require_22489__(/*! tapable */ \"./client-src/modules/logger/tapable.js\"),\n  SyncBailHook = _require.SyncBailHook;\nvar _require2 = __nested_webpack_require_22489__(/*! ./Logger */ \"./node_modules/webpack/lib/logging/Logger.js\"),\n  Logger = _require2.Logger;\nvar createConsoleLogger = __nested_webpack_require_22489__(/*! ./createConsoleLogger */ \"./node_modules/webpack/lib/logging/createConsoleLogger.js\");\n\n/** @type {createConsoleLogger.LoggerOptions} */\nvar currentDefaultLoggerOptions = {\n  level: \"info\",\n  debug: false,\n  console: console\n};\nvar currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);\n\n/**\n * @param {string} name name of the logger\n * @returns {Logger} a logger\n */\nmodule.exports.getLogger = function (name) {\n  return new Logger(function (type, args) {\n    if (module.exports.hooks.log.call(name, type, args) === undefined) {\n      currentDefaultLogger(name, type, args);\n    }\n  }, function (childName) {\n    return module.exports.getLogger(\"\".concat(name, \"/\").concat(childName));\n  });\n};\n\n/**\n * @param {createConsoleLogger.LoggerOptions} options new options, merge with old options\n * @returns {void}\n */\nmodule.exports.configureDefaultLogger = function (options) {\n  _extends(currentDefaultLoggerOptions, options);\n  currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);\n};\nmodule.exports.hooks = {\n  log: new SyncBailHook([\"origin\", \"type\", \"args\"])\n};\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_24566__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_24566__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t!function() {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_24566__.d = function(exports, definition) {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_24566__.o(definition, key) && !__nested_webpack_require_24566__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t!function() {\n/******/ \t\t__nested_webpack_require_24566__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t!function() {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_24566__.r = function(exports) {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/************************************************************************/\nvar __nested_webpack_exports__ = {};\n// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.\n!function() {\n/*!********************************************!*\\\n  !*** ./client-src/modules/logger/index.js ***!\n  \\********************************************/\n__nested_webpack_require_24566__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_24566__.d(__nested_webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* reexport default export from named module */ webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__; }\n/* harmony export */ });\n/* harmony import */ var webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_24566__(/*! webpack/lib/logging/runtime.js */ \"./node_modules/webpack/lib/logging/runtime.js\");\n\n}();\nvar __webpack_export_target__ = exports;\nfor(var __webpack_i__ in __nested_webpack_exports__) __webpack_export_target__[__webpack_i__] = __nested_webpack_exports__[__webpack_i__];\nif(__nested_webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, \"__esModule\", { value: true });\n/******/ })()\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/modules/logger/index.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/overlay.js":
/*!******************************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/overlay.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOverlay: () => (/* binding */ createOverlay),\n/* harmony export */   formatProblem: () => (/* binding */ formatProblem)\n/* harmony export */ });\n/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-html-community */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/ansi-html-community/index.js\");\n/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ansi_html_community__WEBPACK_IMPORTED_MODULE_0__);\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)\n// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).\n\n\n\n/**\n * @type {(input: string, position: number) => string}\n */\nvar getCodePoint = String.prototype.codePointAt ? function (input, position) {\n  return input.codePointAt(position);\n} : function (input, position) {\n  return (input.charCodeAt(position) - 0xd800) * 0x400 + input.charCodeAt(position + 1) - 0xdc00 + 0x10000;\n};\n\n/**\n * @param {string} macroText\n * @param {RegExp} macroRegExp\n * @param {(input: string) => string} macroReplacer\n * @returns {string}\n */\nvar replaceUsingRegExp = function replaceUsingRegExp(macroText, macroRegExp, macroReplacer) {\n  macroRegExp.lastIndex = 0;\n  var replaceMatch = macroRegExp.exec(macroText);\n  var replaceResult;\n  if (replaceMatch) {\n    replaceResult = \"\";\n    var replaceLastIndex = 0;\n    do {\n      if (replaceLastIndex !== replaceMatch.index) {\n        replaceResult += macroText.substring(replaceLastIndex, replaceMatch.index);\n      }\n      var replaceInput = replaceMatch[0];\n      replaceResult += macroReplacer(replaceInput);\n      replaceLastIndex = replaceMatch.index + replaceInput.length;\n      // eslint-disable-next-line no-cond-assign\n    } while (replaceMatch = macroRegExp.exec(macroText));\n    if (replaceLastIndex !== macroText.length) {\n      replaceResult += macroText.substring(replaceLastIndex);\n    }\n  } else {\n    replaceResult = macroText;\n  }\n  return replaceResult;\n};\nvar references = {\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&apos;\",\n  \"&\": \"&amp;\"\n};\n\n/**\n * @param {string} text text\n * @returns {string}\n */\nfunction encode(text) {\n  if (!text) {\n    return \"\";\n  }\n  return replaceUsingRegExp(text, /[<>'\"&]/g, function (input) {\n    var result = references[input];\n    if (!result) {\n      var code = input.length > 1 ? getCodePoint(input, 0) : input.charCodeAt(0);\n      result = \"&#\".concat(code, \";\");\n    }\n    return result;\n  });\n}\n\n/**\n * @typedef {Object} StateDefinitions\n * @property {{[event: string]: { target: string; actions?: Array<string> }}} [on]\n */\n\n/**\n * @typedef {Object} Options\n * @property {{[state: string]: StateDefinitions}} states\n * @property {object} context;\n * @property {string} initial\n */\n\n/**\n * @typedef {Object} Implementation\n * @property {{[actionName: string]: (ctx: object, event: any) => object}} actions\n */\n\n/**\n * A simplified `createMachine` from `@xstate/fsm` with the following differences:\n *\n *  - the returned machine is technically a \"service\". No `interpret(machine).start()` is needed.\n *  - the state definition only support `on` and target must be declared with { target: 'nextState', actions: [] } explicitly.\n *  - event passed to `send` must be an object with `type` property.\n *  - actions implementation will be [assign action](https://xstate.js.org/docs/guides/context.html#assign-action) if you return any value.\n *  Do not return anything if you just want to invoke side effect.\n *\n * The goal of this custom function is to avoid installing the entire `'xstate/fsm'` package, while enabling modeling using\n * state machine. You can copy the first parameter into the editor at https://stately.ai/viz to visualize the state machine.\n *\n * @param {Options} options\n * @param {Implementation} implementation\n */\nfunction createMachine(_ref, _ref2) {\n  var states = _ref.states,\n    context = _ref.context,\n    initial = _ref.initial;\n  var actions = _ref2.actions;\n  var currentState = initial;\n  var currentContext = context;\n  return {\n    send: function send(event) {\n      var currentStateOn = states[currentState].on;\n      var transitionConfig = currentStateOn && currentStateOn[event.type];\n      if (transitionConfig) {\n        currentState = transitionConfig.target;\n        if (transitionConfig.actions) {\n          transitionConfig.actions.forEach(function (actName) {\n            var actionImpl = actions[actName];\n            var nextContextValue = actionImpl && actionImpl(currentContext, event);\n            if (nextContextValue) {\n              currentContext = _objectSpread(_objectSpread({}, currentContext), nextContextValue);\n            }\n          });\n        }\n      }\n    }\n  };\n}\n\n/**\n * @typedef {Object} ShowOverlayData\n * @property {'warning' | 'error'} level\n * @property {Array<string  | { moduleIdentifier?: string, moduleName?: string, loc?: string, message?: string }>} messages\n * @property {'build' | 'runtime'} messageSource\n */\n\n/**\n * @typedef {Object} CreateOverlayMachineOptions\n * @property {(data: ShowOverlayData) => void} showOverlay\n * @property {() => void} hideOverlay\n */\n\n/**\n * @param {CreateOverlayMachineOptions} options\n */\nvar createOverlayMachine = function createOverlayMachine(options) {\n  var hideOverlay = options.hideOverlay,\n    showOverlay = options.showOverlay;\n  return createMachine({\n    initial: \"hidden\",\n    context: {\n      level: \"error\",\n      messages: [],\n      messageSource: \"build\"\n    },\n    states: {\n      hidden: {\n        on: {\n          BUILD_ERROR: {\n            target: \"displayBuildError\",\n            actions: [\"setMessages\", \"showOverlay\"]\n          },\n          RUNTIME_ERROR: {\n            target: \"displayRuntimeError\",\n            actions: [\"setMessages\", \"showOverlay\"]\n          }\n        }\n      },\n      displayBuildError: {\n        on: {\n          DISMISS: {\n            target: \"hidden\",\n            actions: [\"dismissMessages\", \"hideOverlay\"]\n          },\n          BUILD_ERROR: {\n            target: \"displayBuildError\",\n            actions: [\"appendMessages\", \"showOverlay\"]\n          }\n        }\n      },\n      displayRuntimeError: {\n        on: {\n          DISMISS: {\n            target: \"hidden\",\n            actions: [\"dismissMessages\", \"hideOverlay\"]\n          },\n          RUNTIME_ERROR: {\n            target: \"displayRuntimeError\",\n            actions: [\"appendMessages\", \"showOverlay\"]\n          },\n          BUILD_ERROR: {\n            target: \"displayBuildError\",\n            actions: [\"setMessages\", \"showOverlay\"]\n          }\n        }\n      }\n    }\n  }, {\n    actions: {\n      dismissMessages: function dismissMessages() {\n        return {\n          messages: [],\n          level: \"error\",\n          messageSource: \"build\"\n        };\n      },\n      appendMessages: function appendMessages(context, event) {\n        return {\n          messages: context.messages.concat(event.messages),\n          level: event.level || context.level,\n          messageSource: event.type === \"RUNTIME_ERROR\" ? \"runtime\" : \"build\"\n        };\n      },\n      setMessages: function setMessages(context, event) {\n        return {\n          messages: event.messages,\n          level: event.level || context.level,\n          messageSource: event.type === \"RUNTIME_ERROR\" ? \"runtime\" : \"build\"\n        };\n      },\n      hideOverlay: hideOverlay,\n      showOverlay: showOverlay\n    }\n  });\n};\n\n/**\n *\n * @param {Error} error\n */\nvar parseErrorToStacks = function parseErrorToStacks(error) {\n  if (!error || !(error instanceof Error)) {\n    throw new Error(\"parseErrorToStacks expects Error object\");\n  }\n  if (typeof error.stack === \"string\") {\n    return error.stack.split(\"\\n\").filter(function (stack) {\n      return stack !== \"Error: \".concat(error.message);\n    });\n  }\n};\n\n/**\n * @callback ErrorCallback\n * @param {ErrorEvent} error\n * @returns {void}\n */\n\n/**\n * @param {ErrorCallback} callback\n */\nvar listenToRuntimeError = function listenToRuntimeError(callback) {\n  window.addEventListener(\"error\", callback);\n  return function cleanup() {\n    window.removeEventListener(\"error\", callback);\n  };\n};\n\n/**\n * @callback UnhandledRejectionCallback\n * @param {PromiseRejectionEvent} rejectionEvent\n * @returns {void}\n */\n\n/**\n * @param {UnhandledRejectionCallback} callback\n */\nvar listenToUnhandledRejection = function listenToUnhandledRejection(callback) {\n  window.addEventListener(\"unhandledrejection\", callback);\n  return function cleanup() {\n    window.removeEventListener(\"unhandledrejection\", callback);\n  };\n};\n\n// Styles are inspired by `react-error-overlay`\n\nvar msgStyles = {\n  error: {\n    backgroundColor: \"rgba(206, 17, 38, 0.1)\",\n    color: \"#fccfcf\"\n  },\n  warning: {\n    backgroundColor: \"rgba(251, 245, 180, 0.1)\",\n    color: \"#fbf5b4\"\n  }\n};\nvar iframeStyle = {\n  position: \"fixed\",\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  width: \"100vw\",\n  height: \"100vh\",\n  border: \"none\",\n  \"z-index\": 9999999999\n};\nvar containerStyle = {\n  position: \"fixed\",\n  boxSizing: \"border-box\",\n  left: 0,\n  top: 0,\n  right: 0,\n  bottom: 0,\n  width: \"100vw\",\n  height: \"100vh\",\n  fontSize: \"large\",\n  padding: \"2rem 2rem 4rem 2rem\",\n  lineHeight: \"1.2\",\n  whiteSpace: \"pre-wrap\",\n  overflow: \"auto\",\n  backgroundColor: \"rgba(0, 0, 0, 0.9)\",\n  color: \"white\"\n};\nvar headerStyle = {\n  color: \"#e83b46\",\n  fontSize: \"2em\",\n  whiteSpace: \"pre-wrap\",\n  fontFamily: \"sans-serif\",\n  margin: \"0 2rem 2rem 0\",\n  flex: \"0 0 auto\",\n  maxHeight: \"50%\",\n  overflow: \"auto\"\n};\nvar dismissButtonStyle = {\n  color: \"#ffffff\",\n  lineHeight: \"1rem\",\n  fontSize: \"1.5rem\",\n  padding: \"1rem\",\n  cursor: \"pointer\",\n  position: \"absolute\",\n  right: 0,\n  top: 0,\n  backgroundColor: \"transparent\",\n  border: \"none\"\n};\nvar msgTypeStyle = {\n  color: \"#e83b46\",\n  fontSize: \"1.2em\",\n  marginBottom: \"1rem\",\n  fontFamily: \"sans-serif\"\n};\nvar msgTextStyle = {\n  lineHeight: \"1.5\",\n  fontSize: \"1rem\",\n  fontFamily: \"Menlo, Consolas, monospace\"\n};\n\n// ANSI HTML\n\nvar colors = {\n  reset: [\"transparent\", \"transparent\"],\n  black: \"181818\",\n  red: \"E36049\",\n  green: \"B3CB74\",\n  yellow: \"FFD080\",\n  blue: \"7CAFC2\",\n  magenta: \"7FACCA\",\n  cyan: \"C3C2EF\",\n  lightgrey: \"EBE7E3\",\n  darkgrey: \"6D7891\"\n};\nansi_html_community__WEBPACK_IMPORTED_MODULE_0___default().setColors(colors);\n\n/**\n * @param {string} type\n * @param {string  | { file?: string, moduleName?: string, loc?: string, message?: string; stack?: string[] }} item\n * @returns {{ header: string, body: string }}\n */\nvar formatProblem = function formatProblem(type, item) {\n  var header = type === \"warning\" ? \"WARNING\" : \"ERROR\";\n  var body = \"\";\n  if (typeof item === \"string\") {\n    body += item;\n  } else {\n    var file = item.file || \"\";\n    // eslint-disable-next-line no-nested-ternary\n    var moduleName = item.moduleName ? item.moduleName.indexOf(\"!\") !== -1 ? \"\".concat(item.moduleName.replace(/^(\\s|\\S)*!/, \"\"), \" (\").concat(item.moduleName, \")\") : \"\".concat(item.moduleName) : \"\";\n    var loc = item.loc;\n    header += \"\".concat(moduleName || file ? \" in \".concat(moduleName ? \"\".concat(moduleName).concat(file ? \" (\".concat(file, \")\") : \"\") : file).concat(loc ? \" \".concat(loc) : \"\") : \"\");\n    body += item.message || \"\";\n  }\n  if (Array.isArray(item.stack)) {\n    item.stack.forEach(function (stack) {\n      if (typeof stack === \"string\") {\n        body += \"\\r\\n\".concat(stack);\n      }\n    });\n  }\n  return {\n    header: header,\n    body: body\n  };\n};\n\n/**\n * @typedef {Object} CreateOverlayOptions\n * @property {string | null} trustedTypesPolicyName\n * @property {boolean | (error: Error) => void} [catchRuntimeError]\n */\n\n/**\n *\n * @param {CreateOverlayOptions} options\n */\nvar createOverlay = function createOverlay(options) {\n  /** @type {HTMLIFrameElement | null | undefined} */\n  var iframeContainerElement;\n  /** @type {HTMLDivElement | null | undefined} */\n  var containerElement;\n  /** @type {HTMLDivElement | null | undefined} */\n  var headerElement;\n  /** @type {Array<(element: HTMLDivElement) => void>} */\n  var onLoadQueue = [];\n  /** @type {TrustedTypePolicy | undefined} */\n  var overlayTrustedTypesPolicy;\n\n  /**\n   *\n   * @param {HTMLElement} element\n   * @param {CSSStyleDeclaration} style\n   */\n  function applyStyle(element, style) {\n    Object.keys(style).forEach(function (prop) {\n      element.style[prop] = style[prop];\n    });\n  }\n\n  /**\n   * @param {string | null} trustedTypesPolicyName\n   */\n  function createContainer(trustedTypesPolicyName) {\n    // Enable Trusted Types if they are available in the current browser.\n    if (window.trustedTypes) {\n      overlayTrustedTypesPolicy = window.trustedTypes.createPolicy(trustedTypesPolicyName || \"webpack-dev-server#overlay\", {\n        createHTML: function createHTML(value) {\n          return value;\n        }\n      });\n    }\n    iframeContainerElement = document.createElement(\"iframe\");\n    iframeContainerElement.id = \"webpack-dev-server-client-overlay\";\n    iframeContainerElement.src = \"about:blank\";\n    applyStyle(iframeContainerElement, iframeStyle);\n    iframeContainerElement.onload = function () {\n      var contentElement = /** @type {Document} */\n      (/** @type {HTMLIFrameElement} */\n      iframeContainerElement.contentDocument).createElement(\"div\");\n      containerElement = /** @type {Document} */\n      (/** @type {HTMLIFrameElement} */\n      iframeContainerElement.contentDocument).createElement(\"div\");\n      contentElement.id = \"webpack-dev-server-client-overlay-div\";\n      applyStyle(contentElement, containerStyle);\n      headerElement = document.createElement(\"div\");\n      headerElement.innerText = \"Compiled with problems:\";\n      applyStyle(headerElement, headerStyle);\n      var closeButtonElement = document.createElement(\"button\");\n      applyStyle(closeButtonElement, dismissButtonStyle);\n      closeButtonElement.innerText = \"×\";\n      closeButtonElement.ariaLabel = \"Dismiss\";\n      closeButtonElement.addEventListener(\"click\", function () {\n        // eslint-disable-next-line no-use-before-define\n        overlayService.send({\n          type: \"DISMISS\"\n        });\n      });\n      contentElement.appendChild(headerElement);\n      contentElement.appendChild(closeButtonElement);\n      contentElement.appendChild(containerElement);\n\n      /** @type {Document} */\n      (/** @type {HTMLIFrameElement} */\n      iframeContainerElement.contentDocument).body.appendChild(contentElement);\n      onLoadQueue.forEach(function (onLoad) {\n        onLoad(/** @type {HTMLDivElement} */contentElement);\n      });\n      onLoadQueue = [];\n\n      /** @type {HTMLIFrameElement} */\n      iframeContainerElement.onload = null;\n    };\n    document.body.appendChild(iframeContainerElement);\n  }\n\n  /**\n   * @param {(element: HTMLDivElement) => void} callback\n   * @param {string | null} trustedTypesPolicyName\n   */\n  function ensureOverlayExists(callback, trustedTypesPolicyName) {\n    if (containerElement) {\n      containerElement.innerHTML = overlayTrustedTypesPolicy ? overlayTrustedTypesPolicy.createHTML(\"\") : \"\";\n      // Everything is ready, call the callback right away.\n      callback(containerElement);\n      return;\n    }\n    onLoadQueue.push(callback);\n    if (iframeContainerElement) {\n      return;\n    }\n    createContainer(trustedTypesPolicyName);\n  }\n\n  // Successful compilation.\n  function hide() {\n    if (!iframeContainerElement) {\n      return;\n    }\n\n    // Clean up and reset internal state.\n    document.body.removeChild(iframeContainerElement);\n    iframeContainerElement = null;\n    containerElement = null;\n  }\n\n  // Compilation with errors (e.g. syntax error or missing modules).\n  /**\n   * @param {string} type\n   * @param {Array<string  | { moduleIdentifier?: string, moduleName?: string, loc?: string, message?: string }>} messages\n   * @param {string | null} trustedTypesPolicyName\n   * @param {'build' | 'runtime'} messageSource\n   */\n  function show(type, messages, trustedTypesPolicyName, messageSource) {\n    ensureOverlayExists(function () {\n      headerElement.innerText = messageSource === \"runtime\" ? \"Uncaught runtime errors:\" : \"Compiled with problems:\";\n      messages.forEach(function (message) {\n        var entryElement = document.createElement(\"div\");\n        var msgStyle = type === \"warning\" ? msgStyles.warning : msgStyles.error;\n        applyStyle(entryElement, _objectSpread(_objectSpread({}, msgStyle), {}, {\n          padding: \"1rem 1rem 1.5rem 1rem\"\n        }));\n        var typeElement = document.createElement(\"div\");\n        var _formatProblem = formatProblem(type, message),\n          header = _formatProblem.header,\n          body = _formatProblem.body;\n        typeElement.innerText = header;\n        applyStyle(typeElement, msgTypeStyle);\n        if (message.moduleIdentifier) {\n          applyStyle(typeElement, {\n            cursor: \"pointer\"\n          });\n          // element.dataset not supported in IE\n          typeElement.setAttribute(\"data-can-open\", true);\n          typeElement.addEventListener(\"click\", function () {\n            fetch(\"/webpack-dev-server/open-editor?fileName=\".concat(message.moduleIdentifier));\n          });\n        }\n\n        // Make it look similar to our terminal.\n        var text = ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default()(encode(body));\n        var messageTextNode = document.createElement(\"div\");\n        applyStyle(messageTextNode, msgTextStyle);\n        messageTextNode.innerHTML = overlayTrustedTypesPolicy ? overlayTrustedTypesPolicy.createHTML(text) : text;\n        entryElement.appendChild(typeElement);\n        entryElement.appendChild(messageTextNode);\n\n        /** @type {HTMLDivElement} */\n        containerElement.appendChild(entryElement);\n      });\n    }, trustedTypesPolicyName);\n  }\n  var overlayService = createOverlayMachine({\n    showOverlay: function showOverlay(_ref3) {\n      var _ref3$level = _ref3.level,\n        level = _ref3$level === void 0 ? \"error\" : _ref3$level,\n        messages = _ref3.messages,\n        messageSource = _ref3.messageSource;\n      return show(level, messages, options.trustedTypesPolicyName, messageSource);\n    },\n    hideOverlay: hide\n  });\n  if (options.catchRuntimeError) {\n    /**\n     * @param {Error | undefined} error\n     * @param {string} fallbackMessage\n     */\n    var handleError = function handleError(error, fallbackMessage) {\n      var errorObject = error instanceof Error ? error : new Error(error || fallbackMessage);\n      var shouldDisplay = typeof options.catchRuntimeError === \"function\" ? options.catchRuntimeError(errorObject) : true;\n      if (shouldDisplay) {\n        overlayService.send({\n          type: \"RUNTIME_ERROR\",\n          messages: [{\n            message: errorObject.message,\n            stack: parseErrorToStacks(errorObject)\n          }]\n        });\n      }\n    };\n    listenToRuntimeError(function (errorEvent) {\n      // error property may be empty in older browser like IE\n      var error = errorEvent.error,\n        message = errorEvent.message;\n      if (!error && !message) {\n        return;\n      }\n      handleError(error, message);\n    });\n    listenToUnhandledRejection(function (promiseRejectionEvent) {\n      var reason = promiseRejectionEvent.reason;\n      handleError(reason, \"Unknown promise rejection reason\");\n    });\n  }\n  return overlayService;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEseUJBQXlCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3BQLDRCQUE0QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHNEQUFzRCw4QkFBOEIsbUpBQW1KLHFFQUFxRSxLQUFLO0FBQzVhLG9DQUFvQyxvRUFBb0UsMERBQTBEO0FBQ2xLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDBDQUEwQywrQkFBK0Isb0JBQW9CLG1DQUFtQyxvQ0FBb0MsdUVBQXVFO0FBQ3pRO0FBQ0E7O0FBRTJDOztBQUUzQztBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVywyQkFBMkI7QUFDdEMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLFlBQVk7QUFDWixjQUFjO0FBQ2QsY0FBYztBQUNkLGFBQWE7QUFDYjs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxtQkFBbUIsZ0JBQWdCLDRCQUE0QjtBQUM5RTs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFl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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxrQkFBa0IsZ0ZBQWdGLEdBQUc7QUFDbEgsYUFBYSxlQUFlO0FBQzVCLGFBQWEscUJBQXFCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELGVBQWU7QUFDOUU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0EsbUJBQW1CLDBEQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLGdCQUFnQjtBQUNuQztBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEMsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmtib29rLy4uLy4uLy4uL09uZURyaXZlL0RldmVsb3BtZW50L0hUTUwvQmxhbmtCb29rL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkuanM/YjRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7IHJldHVybiAociA9IF90b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHsgdmFsdWU6IHQsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3JdID0gdCwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gdHlwZW9mIGkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiB0IHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiBpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8vIFRoZSBlcnJvciBvdmVybGF5IGlzIGluc3BpcmVkIChhbmQgbW9zdGx5IGNvcGllZCkgZnJvbSBDcmVhdGUgUmVhY3QgQXBwIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcClcbi8vIFRoZXksIGluIHR1cm4sIGdvdCBpbnNwaXJlZCBieSB3ZWJwYWNrLWhvdC1taWRkbGV3YXJlIChodHRwczovL2dpdGh1Yi5jb20vZ2xlbmphbWluL3dlYnBhY2staG90LW1pZGRsZXdhcmUpLlxuXG5pbXBvcnQgYW5zaUhUTUwgZnJvbSBcImFuc2ktaHRtbC1jb21tdW5pdHlcIjtcblxuLyoqXG4gKiBAdHlwZSB7KGlucHV0OiBzdHJpbmcsIHBvc2l0aW9uOiBudW1iZXIpID0+IHN0cmluZ31cbiAqL1xudmFyIGdldENvZGVQb2ludCA9IFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQgPyBmdW5jdGlvbiAoaW5wdXQsIHBvc2l0aW9uKSB7XG4gIHJldHVybiBpbnB1dC5jb2RlUG9pbnRBdChwb3NpdGlvbik7XG59IDogZnVuY3Rpb24gKGlucHV0LCBwb3NpdGlvbikge1xuICByZXR1cm4gKGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24pIC0gMHhkODAwKSAqIDB4NDAwICsgaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpIC0gMHhkYzAwICsgMHgxMDAwMDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hY3JvVGV4dFxuICogQHBhcmFtIHtSZWdFeHB9IG1hY3JvUmVnRXhwXG4gKiBAcGFyYW0geyhpbnB1dDogc3RyaW5nKSA9PiBzdHJpbmd9IG1hY3JvUmVwbGFjZXJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnZhciByZXBsYWNlVXNpbmdSZWdFeHAgPSBmdW5jdGlvbiByZXBsYWNlVXNpbmdSZWdFeHAobWFjcm9UZXh0LCBtYWNyb1JlZ0V4cCwgbWFjcm9SZXBsYWNlcikge1xuICBtYWNyb1JlZ0V4cC5sYXN0SW5kZXggPSAwO1xuICB2YXIgcmVwbGFjZU1hdGNoID0gbWFjcm9SZWdFeHAuZXhlYyhtYWNyb1RleHQpO1xuICB2YXIgcmVwbGFjZVJlc3VsdDtcbiAgaWYgKHJlcGxhY2VNYXRjaCkge1xuICAgIHJlcGxhY2VSZXN1bHQgPSBcIlwiO1xuICAgIHZhciByZXBsYWNlTGFzdEluZGV4ID0gMDtcbiAgICBkbyB7XG4gICAgICBpZiAocmVwbGFjZUxhc3RJbmRleCAhPT0gcmVwbGFjZU1hdGNoLmluZGV4KSB7XG4gICAgICAgIHJlcGxhY2VSZXN1bHQgKz0gbWFjcm9UZXh0LnN1YnN0cmluZyhyZXBsYWNlTGFzdEluZGV4LCByZXBsYWNlTWF0Y2guaW5kZXgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlcGxhY2VJbnB1dCA9IHJlcGxhY2VNYXRjaFswXTtcbiAgICAgIHJlcGxhY2VSZXN1bHQgKz0gbWFjcm9SZXBsYWNlcihyZXBsYWNlSW5wdXQpO1xuICAgICAgcmVwbGFjZUxhc3RJbmRleCA9IHJlcGxhY2VNYXRjaC5pbmRleCArIHJlcGxhY2VJbnB1dC5sZW5ndGg7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgICB9IHdoaWxlIChyZXBsYWNlTWF0Y2ggPSBtYWNyb1JlZ0V4cC5leGVjKG1hY3JvVGV4dCkpO1xuICAgIGlmIChyZXBsYWNlTGFzdEluZGV4ICE9PSBtYWNyb1RleHQubGVuZ3RoKSB7XG4gICAgICByZXBsYWNlUmVzdWx0ICs9IG1hY3JvVGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcGxhY2VSZXN1bHQgPSBtYWNyb1RleHQ7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2VSZXN1bHQ7XG59O1xudmFyIHJlZmVyZW5jZXMgPSB7XG4gIFwiPFwiOiBcIiZsdDtcIixcbiAgXCI+XCI6IFwiJmd0O1wiLFxuICAnXCInOiBcIiZxdW90O1wiLFxuICBcIidcIjogXCImYXBvcztcIixcbiAgXCImXCI6IFwiJmFtcDtcIlxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCB0ZXh0XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGUodGV4dCkge1xuICBpZiAoIXRleHQpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICByZXR1cm4gcmVwbGFjZVVzaW5nUmVnRXhwKHRleHQsIC9bPD4nXCImXS9nLCBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVmZXJlbmNlc1tpbnB1dF07XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHZhciBjb2RlID0gaW5wdXQubGVuZ3RoID4gMSA/IGdldENvZGVQb2ludChpbnB1dCwgMCkgOiBpbnB1dC5jaGFyQ29kZUF0KDApO1xuICAgICAgcmVzdWx0ID0gXCImI1wiLmNvbmNhdChjb2RlLCBcIjtcIik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0YXRlRGVmaW5pdGlvbnNcbiAqIEBwcm9wZXJ0eSB7e1tldmVudDogc3RyaW5nXTogeyB0YXJnZXQ6IHN0cmluZzsgYWN0aW9ucz86IEFycmF5PHN0cmluZz4gfX19IFtvbl1cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7e1tzdGF0ZTogc3RyaW5nXTogU3RhdGVEZWZpbml0aW9uc319IHN0YXRlc1xuICogQHByb3BlcnR5IHtvYmplY3R9IGNvbnRleHQ7XG4gKiBAcHJvcGVydHkge3N0cmluZ30gaW5pdGlhbFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSW1wbGVtZW50YXRpb25cbiAqIEBwcm9wZXJ0eSB7e1thY3Rpb25OYW1lOiBzdHJpbmddOiAoY3R4OiBvYmplY3QsIGV2ZW50OiBhbnkpID0+IG9iamVjdH19IGFjdGlvbnNcbiAqL1xuXG4vKipcbiAqIEEgc2ltcGxpZmllZCBgY3JlYXRlTWFjaGluZWAgZnJvbSBgQHhzdGF0ZS9mc21gIHdpdGggdGhlIGZvbGxvd2luZyBkaWZmZXJlbmNlczpcbiAqXG4gKiAgLSB0aGUgcmV0dXJuZWQgbWFjaGluZSBpcyB0ZWNobmljYWxseSBhIFwic2VydmljZVwiLiBObyBgaW50ZXJwcmV0KG1hY2hpbmUpLnN0YXJ0KClgIGlzIG5lZWRlZC5cbiAqICAtIHRoZSBzdGF0ZSBkZWZpbml0aW9uIG9ubHkgc3VwcG9ydCBgb25gIGFuZCB0YXJnZXQgbXVzdCBiZSBkZWNsYXJlZCB3aXRoIHsgdGFyZ2V0OiAnbmV4dFN0YXRlJywgYWN0aW9uczogW10gfSBleHBsaWNpdGx5LlxuICogIC0gZXZlbnQgcGFzc2VkIHRvIGBzZW5kYCBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGB0eXBlYCBwcm9wZXJ0eS5cbiAqICAtIGFjdGlvbnMgaW1wbGVtZW50YXRpb24gd2lsbCBiZSBbYXNzaWduIGFjdGlvbl0oaHR0cHM6Ly94c3RhdGUuanMub3JnL2RvY3MvZ3VpZGVzL2NvbnRleHQuaHRtbCNhc3NpZ24tYWN0aW9uKSBpZiB5b3UgcmV0dXJuIGFueSB2YWx1ZS5cbiAqICBEbyBub3QgcmV0dXJuIGFueXRoaW5nIGlmIHlvdSBqdXN0IHdhbnQgdG8gaW52b2tlIHNpZGUgZWZmZWN0LlxuICpcbiAqIFRoZSBnb2FsIG9mIHRoaXMgY3VzdG9tIGZ1bmN0aW9uIGlzIHRvIGF2b2lkIGluc3RhbGxpbmcgdGhlIGVudGlyZSBgJ3hzdGF0ZS9mc20nYCBwYWNrYWdlLCB3aGlsZSBlbmFibGluZyBtb2RlbGluZyB1c2luZ1xuICogc3RhdGUgbWFjaGluZS4gWW91IGNhbiBjb3B5IHRoZSBmaXJzdCBwYXJhbWV0ZXIgaW50byB0aGUgZWRpdG9yIGF0IGh0dHBzOi8vc3RhdGVseS5haS92aXogdG8gdmlzdWFsaXplIHRoZSBzdGF0ZSBtYWNoaW5lLlxuICpcbiAqIEBwYXJhbSB7T3B0aW9uc30gb3B0aW9uc1xuICogQHBhcmFtIHtJbXBsZW1lbnRhdGlvbn0gaW1wbGVtZW50YXRpb25cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWFjaGluZShfcmVmLCBfcmVmMikge1xuICB2YXIgc3RhdGVzID0gX3JlZi5zdGF0ZXMsXG4gICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICBpbml0aWFsID0gX3JlZi5pbml0aWFsO1xuICB2YXIgYWN0aW9ucyA9IF9yZWYyLmFjdGlvbnM7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBpbml0aWFsO1xuICB2YXIgY3VycmVudENvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4ge1xuICAgIHNlbmQ6IGZ1bmN0aW9uIHNlbmQoZXZlbnQpIHtcbiAgICAgIHZhciBjdXJyZW50U3RhdGVPbiA9IHN0YXRlc1tjdXJyZW50U3RhdGVdLm9uO1xuICAgICAgdmFyIHRyYW5zaXRpb25Db25maWcgPSBjdXJyZW50U3RhdGVPbiAmJiBjdXJyZW50U3RhdGVPbltldmVudC50eXBlXTtcbiAgICAgIGlmICh0cmFuc2l0aW9uQ29uZmlnKSB7XG4gICAgICAgIGN1cnJlbnRTdGF0ZSA9IHRyYW5zaXRpb25Db25maWcudGFyZ2V0O1xuICAgICAgICBpZiAodHJhbnNpdGlvbkNvbmZpZy5hY3Rpb25zKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbkNvbmZpZy5hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBhY3Rpb25JbXBsID0gYWN0aW9uc1thY3ROYW1lXTtcbiAgICAgICAgICAgIHZhciBuZXh0Q29udGV4dFZhbHVlID0gYWN0aW9uSW1wbCAmJiBhY3Rpb25JbXBsKGN1cnJlbnRDb250ZXh0LCBldmVudCk7XG4gICAgICAgICAgICBpZiAobmV4dENvbnRleHRWYWx1ZSkge1xuICAgICAgICAgICAgICBjdXJyZW50Q29udGV4dCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY3VycmVudENvbnRleHQpLCBuZXh0Q29udGV4dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaG93T3ZlcmxheURhdGFcbiAqIEBwcm9wZXJ0eSB7J3dhcm5pbmcnIHwgJ2Vycm9yJ30gbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nICB8IHsgbW9kdWxlSWRlbnRpZmllcj86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nIH0+fSBtZXNzYWdlc1xuICogQHByb3BlcnR5IHsnYnVpbGQnIHwgJ3J1bnRpbWUnfSBtZXNzYWdlU291cmNlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDcmVhdGVPdmVybGF5TWFjaGluZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7KGRhdGE6IFNob3dPdmVybGF5RGF0YSkgPT4gdm9pZH0gc2hvd092ZXJsYXlcbiAqIEBwcm9wZXJ0eSB7KCkgPT4gdm9pZH0gaGlkZU92ZXJsYXlcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Q3JlYXRlT3ZlcmxheU1hY2hpbmVPcHRpb25zfSBvcHRpb25zXG4gKi9cbnZhciBjcmVhdGVPdmVybGF5TWFjaGluZSA9IGZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXlNYWNoaW5lKG9wdGlvbnMpIHtcbiAgdmFyIGhpZGVPdmVybGF5ID0gb3B0aW9ucy5oaWRlT3ZlcmxheSxcbiAgICBzaG93T3ZlcmxheSA9IG9wdGlvbnMuc2hvd092ZXJsYXk7XG4gIHJldHVybiBjcmVhdGVNYWNoaW5lKHtcbiAgICBpbml0aWFsOiBcImhpZGRlblwiLFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIGxldmVsOiBcImVycm9yXCIsXG4gICAgICBtZXNzYWdlczogW10sXG4gICAgICBtZXNzYWdlU291cmNlOiBcImJ1aWxkXCJcbiAgICB9LFxuICAgIHN0YXRlczoge1xuICAgICAgaGlkZGVuOiB7XG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgQlVJTERfRVJST1I6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJkaXNwbGF5QnVpbGRFcnJvclwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wic2V0TWVzc2FnZXNcIiwgXCJzaG93T3ZlcmxheVwiXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgUlVOVElNRV9FUlJPUjoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImRpc3BsYXlSdW50aW1lRXJyb3JcIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcInNldE1lc3NhZ2VzXCIsIFwic2hvd092ZXJsYXlcIl1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkaXNwbGF5QnVpbGRFcnJvcjoge1xuICAgICAgICBvbjoge1xuICAgICAgICAgIERJU01JU1M6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJoaWRkZW5cIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcImRpc21pc3NNZXNzYWdlc1wiLCBcImhpZGVPdmVybGF5XCJdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBCVUlMRF9FUlJPUjoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImRpc3BsYXlCdWlsZEVycm9yXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJhcHBlbmRNZXNzYWdlc1wiLCBcInNob3dPdmVybGF5XCJdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGlzcGxheVJ1bnRpbWVFcnJvcjoge1xuICAgICAgICBvbjoge1xuICAgICAgICAgIERJU01JU1M6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJoaWRkZW5cIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcImRpc21pc3NNZXNzYWdlc1wiLCBcImhpZGVPdmVybGF5XCJdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBSVU5USU1FX0VSUk9SOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwiZGlzcGxheVJ1bnRpbWVFcnJvclwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wiYXBwZW5kTWVzc2FnZXNcIiwgXCJzaG93T3ZlcmxheVwiXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgQlVJTERfRVJST1I6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJkaXNwbGF5QnVpbGRFcnJvclwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wic2V0TWVzc2FnZXNcIiwgXCJzaG93T3ZlcmxheVwiXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGFjdGlvbnM6IHtcbiAgICAgIGRpc21pc3NNZXNzYWdlczogZnVuY3Rpb24gZGlzbWlzc01lc3NhZ2VzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICBsZXZlbDogXCJlcnJvclwiLFxuICAgICAgICAgIG1lc3NhZ2VTb3VyY2U6IFwiYnVpbGRcIlxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGFwcGVuZE1lc3NhZ2VzOiBmdW5jdGlvbiBhcHBlbmRNZXNzYWdlcyhjb250ZXh0LCBldmVudCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lc3NhZ2VzOiBjb250ZXh0Lm1lc3NhZ2VzLmNvbmNhdChldmVudC5tZXNzYWdlcyksXG4gICAgICAgICAgbGV2ZWw6IGV2ZW50LmxldmVsIHx8IGNvbnRleHQubGV2ZWwsXG4gICAgICAgICAgbWVzc2FnZVNvdXJjZTogZXZlbnQudHlwZSA9PT0gXCJSVU5USU1FX0VSUk9SXCIgPyBcInJ1bnRpbWVcIiA6IFwiYnVpbGRcIlxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHNldE1lc3NhZ2VzOiBmdW5jdGlvbiBzZXRNZXNzYWdlcyhjb250ZXh0LCBldmVudCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lc3NhZ2VzOiBldmVudC5tZXNzYWdlcyxcbiAgICAgICAgICBsZXZlbDogZXZlbnQubGV2ZWwgfHwgY29udGV4dC5sZXZlbCxcbiAgICAgICAgICBtZXNzYWdlU291cmNlOiBldmVudC50eXBlID09PSBcIlJVTlRJTUVfRVJST1JcIiA/IFwicnVudGltZVwiIDogXCJidWlsZFwiXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgaGlkZU92ZXJsYXk6IGhpZGVPdmVybGF5LFxuICAgICAgc2hvd092ZXJsYXk6IHNob3dPdmVybGF5XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gKi9cbnZhciBwYXJzZUVycm9yVG9TdGFja3MgPSBmdW5jdGlvbiBwYXJzZUVycm9yVG9TdGFja3MoZXJyb3IpIHtcbiAgaWYgKCFlcnJvciB8fCAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VFcnJvclRvU3RhY2tzIGV4cGVjdHMgRXJyb3Igb2JqZWN0XCIpO1xuICB9XG4gIGlmICh0eXBlb2YgZXJyb3Iuc3RhY2sgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZXJyb3Iuc3RhY2suc3BsaXQoXCJcXG5cIikuZmlsdGVyKGZ1bmN0aW9uIChzdGFjaykge1xuICAgICAgcmV0dXJuIHN0YWNrICE9PSBcIkVycm9yOiBcIi5jb25jYXQoZXJyb3IubWVzc2FnZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIEVycm9yQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RXJyb3JFdmVudH0gZXJyb3JcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cbi8qKlxuICogQHBhcmFtIHtFcnJvckNhbGxiYWNrfSBjYWxsYmFja1xuICovXG52YXIgbGlzdGVuVG9SdW50aW1lRXJyb3IgPSBmdW5jdGlvbiBsaXN0ZW5Ub1J1bnRpbWVFcnJvcihjYWxsYmFjaykge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGNhbGxiYWNrKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBjYWxsYmFjayk7XG4gIH07XG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBVbmhhbmRsZWRSZWplY3Rpb25DYWxsYmFja1xuICogQHBhcmFtIHtQcm9taXNlUmVqZWN0aW9uRXZlbnR9IHJlamVjdGlvbkV2ZW50XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7VW5oYW5kbGVkUmVqZWN0aW9uQ2FsbGJhY2t9IGNhbGxiYWNrXG4gKi9cbnZhciBsaXN0ZW5Ub1VuaGFuZGxlZFJlamVjdGlvbiA9IGZ1bmN0aW9uIGxpc3RlblRvVW5oYW5kbGVkUmVqZWN0aW9uKGNhbGxiYWNrKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidW5oYW5kbGVkcmVqZWN0aW9uXCIsIGNhbGxiYWNrKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1bmhhbmRsZWRyZWplY3Rpb25cIiwgY2FsbGJhY2spO1xuICB9O1xufTtcblxuLy8gU3R5bGVzIGFyZSBpbnNwaXJlZCBieSBgcmVhY3QtZXJyb3Itb3ZlcmxheWBcblxudmFyIG1zZ1N0eWxlcyA9IHtcbiAgZXJyb3I6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgyMDYsIDE3LCAzOCwgMC4xKVwiLFxuICAgIGNvbG9yOiBcIiNmY2NmY2ZcIlxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjUxLCAyNDUsIDE4MCwgMC4xKVwiLFxuICAgIGNvbG9yOiBcIiNmYmY1YjRcIlxuICB9XG59O1xudmFyIGlmcmFtZVN0eWxlID0ge1xuICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIHdpZHRoOiBcIjEwMHZ3XCIsXG4gIGhlaWdodDogXCIxMDB2aFwiLFxuICBib3JkZXI6IFwibm9uZVwiLFxuICBcInotaW5kZXhcIjogOTk5OTk5OTk5OVxufTtcbnZhciBjb250YWluZXJTdHlsZSA9IHtcbiAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgbGVmdDogMCxcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICB3aWR0aDogXCIxMDB2d1wiLFxuICBoZWlnaHQ6IFwiMTAwdmhcIixcbiAgZm9udFNpemU6IFwibGFyZ2VcIixcbiAgcGFkZGluZzogXCIycmVtIDJyZW0gNHJlbSAycmVtXCIsXG4gIGxpbmVIZWlnaHQ6IFwiMS4yXCIsXG4gIHdoaXRlU3BhY2U6IFwicHJlLXdyYXBcIixcbiAgb3ZlcmZsb3c6IFwiYXV0b1wiLFxuICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjkpXCIsXG4gIGNvbG9yOiBcIndoaXRlXCJcbn07XG52YXIgaGVhZGVyU3R5bGUgPSB7XG4gIGNvbG9yOiBcIiNlODNiNDZcIixcbiAgZm9udFNpemU6IFwiMmVtXCIsXG4gIHdoaXRlU3BhY2U6IFwicHJlLXdyYXBcIixcbiAgZm9udEZhbWlseTogXCJzYW5zLXNlcmlmXCIsXG4gIG1hcmdpbjogXCIwIDJyZW0gMnJlbSAwXCIsXG4gIGZsZXg6IFwiMCAwIGF1dG9cIixcbiAgbWF4SGVpZ2h0OiBcIjUwJVwiLFxuICBvdmVyZmxvdzogXCJhdXRvXCJcbn07XG52YXIgZGlzbWlzc0J1dHRvblN0eWxlID0ge1xuICBjb2xvcjogXCIjZmZmZmZmXCIsXG4gIGxpbmVIZWlnaHQ6IFwiMXJlbVwiLFxuICBmb250U2l6ZTogXCIxLjVyZW1cIixcbiAgcGFkZGluZzogXCIxcmVtXCIsXG4gIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gIHJpZ2h0OiAwLFxuICB0b3A6IDAsXG4gIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxuICBib3JkZXI6IFwibm9uZVwiXG59O1xudmFyIG1zZ1R5cGVTdHlsZSA9IHtcbiAgY29sb3I6IFwiI2U4M2I0NlwiLFxuICBmb250U2l6ZTogXCIxLjJlbVwiLFxuICBtYXJnaW5Cb3R0b206IFwiMXJlbVwiLFxuICBmb250RmFtaWx5OiBcInNhbnMtc2VyaWZcIlxufTtcbnZhciBtc2dUZXh0U3R5bGUgPSB7XG4gIGxpbmVIZWlnaHQ6IFwiMS41XCIsXG4gIGZvbnRTaXplOiBcIjFyZW1cIixcbiAgZm9udEZhbWlseTogXCJNZW5sbywgQ29uc29sYXMsIG1vbm9zcGFjZVwiXG59O1xuXG4vLyBBTlNJIEhUTUxcblxudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFtcInRyYW5zcGFyZW50XCIsIFwidHJhbnNwYXJlbnRcIl0sXG4gIGJsYWNrOiBcIjE4MTgxOFwiLFxuICByZWQ6IFwiRTM2MDQ5XCIsXG4gIGdyZWVuOiBcIkIzQ0I3NFwiLFxuICB5ZWxsb3c6IFwiRkZEMDgwXCIsXG4gIGJsdWU6IFwiN0NBRkMyXCIsXG4gIG1hZ2VudGE6IFwiN0ZBQ0NBXCIsXG4gIGN5YW46IFwiQzNDMkVGXCIsXG4gIGxpZ2h0Z3JleTogXCJFQkU3RTNcIixcbiAgZGFya2dyZXk6IFwiNkQ3ODkxXCJcbn07XG5hbnNpSFRNTC5zZXRDb2xvcnMoY29sb3JzKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmcgIHwgeyBmaWxlPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmc7IHN0YWNrPzogc3RyaW5nW10gfX0gaXRlbVxuICogQHJldHVybnMge3sgaGVhZGVyOiBzdHJpbmcsIGJvZHk6IHN0cmluZyB9fVxuICovXG52YXIgZm9ybWF0UHJvYmxlbSA9IGZ1bmN0aW9uIGZvcm1hdFByb2JsZW0odHlwZSwgaXRlbSkge1xuICB2YXIgaGVhZGVyID0gdHlwZSA9PT0gXCJ3YXJuaW5nXCIgPyBcIldBUk5JTkdcIiA6IFwiRVJST1JcIjtcbiAgdmFyIGJvZHkgPSBcIlwiO1xuICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICBib2R5ICs9IGl0ZW07XG4gIH0gZWxzZSB7XG4gICAgdmFyIGZpbGUgPSBpdGVtLmZpbGUgfHwgXCJcIjtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICB2YXIgbW9kdWxlTmFtZSA9IGl0ZW0ubW9kdWxlTmFtZSA/IGl0ZW0ubW9kdWxlTmFtZS5pbmRleE9mKFwiIVwiKSAhPT0gLTEgPyBcIlwiLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUucmVwbGFjZSgvXihcXHN8XFxTKSohLywgXCJcIiksIFwiIChcIikuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZSwgXCIpXCIpIDogXCJcIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lKSA6IFwiXCI7XG4gICAgdmFyIGxvYyA9IGl0ZW0ubG9jO1xuICAgIGhlYWRlciArPSBcIlwiLmNvbmNhdChtb2R1bGVOYW1lIHx8IGZpbGUgPyBcIiBpbiBcIi5jb25jYXQobW9kdWxlTmFtZSA/IFwiXCIuY29uY2F0KG1vZHVsZU5hbWUpLmNvbmNhdChmaWxlID8gXCIgKFwiLmNvbmNhdChmaWxlLCBcIilcIikgOiBcIlwiKSA6IGZpbGUpLmNvbmNhdChsb2MgPyBcIiBcIi5jb25jYXQobG9jKSA6IFwiXCIpIDogXCJcIik7XG4gICAgYm9keSArPSBpdGVtLm1lc3NhZ2UgfHwgXCJcIjtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShpdGVtLnN0YWNrKSkge1xuICAgIGl0ZW0uc3RhY2suZm9yRWFjaChmdW5jdGlvbiAoc3RhY2spIHtcbiAgICAgIGlmICh0eXBlb2Ygc3RhY2sgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgYm9keSArPSBcIlxcclxcblwiLmNvbmNhdChzdGFjayk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBoZWFkZXI6IGhlYWRlcixcbiAgICBib2R5OiBib2R5XG4gIH07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENyZWF0ZU92ZXJsYXlPcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IChlcnJvcjogRXJyb3IpID0+IHZvaWR9IFtjYXRjaFJ1bnRpbWVFcnJvcl1cbiAqL1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0NyZWF0ZU92ZXJsYXlPcHRpb25zfSBvcHRpb25zXG4gKi9cbnZhciBjcmVhdGVPdmVybGF5ID0gZnVuY3Rpb24gY3JlYXRlT3ZlcmxheShvcHRpb25zKSB7XG4gIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkfSAqL1xuICB2YXIgaWZyYW1lQ29udGFpbmVyRWxlbWVudDtcbiAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWR9ICovXG4gIHZhciBjb250YWluZXJFbGVtZW50O1xuICAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi9cbiAgdmFyIGhlYWRlckVsZW1lbnQ7XG4gIC8qKiBAdHlwZSB7QXJyYXk8KGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkPn0gKi9cbiAgdmFyIG9uTG9hZFF1ZXVlID0gW107XG4gIC8qKiBAdHlwZSB7VHJ1c3RlZFR5cGVQb2xpY3kgfCB1bmRlZmluZWR9ICovXG4gIHZhciBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5O1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVcbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5U3R5bGUoZWxlbWVudCwgc3R5bGUpIHtcbiAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlW3Byb3BdO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZVxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpIHtcbiAgICAvLyBFbmFibGUgVHJ1c3RlZCBUeXBlcyBpZiB0aGV5IGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAgICBpZiAod2luZG93LnRydXN0ZWRUeXBlcykge1xuICAgICAgb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5KHRydXN0ZWRUeXBlc1BvbGljeU5hbWUgfHwgXCJ3ZWJwYWNrLWRldi1zZXJ2ZXIjb3ZlcmxheVwiLCB7XG4gICAgICAgIGNyZWF0ZUhUTUw6IGZ1bmN0aW9uIGNyZWF0ZUhUTUwodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmlkID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItY2xpZW50LW92ZXJsYXlcIjtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LnNyYyA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgICBhcHBseVN0eWxlKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQsIGlmcmFtZVN0eWxlKTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb250ZW50RWxlbWVudCA9IC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG4gICAgICAoLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50KS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY29udGFpbmVyRWxlbWVudCA9IC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG4gICAgICAoLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50KS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY29udGVudEVsZW1lbnQuaWQgPSBcIndlYnBhY2stZGV2LXNlcnZlci1jbGllbnQtb3ZlcmxheS1kaXZcIjtcbiAgICAgIGFwcGx5U3R5bGUoY29udGVudEVsZW1lbnQsIGNvbnRhaW5lclN0eWxlKTtcbiAgICAgIGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaGVhZGVyRWxlbWVudC5pbm5lclRleHQgPSBcIkNvbXBpbGVkIHdpdGggcHJvYmxlbXM6XCI7XG4gICAgICBhcHBseVN0eWxlKGhlYWRlckVsZW1lbnQsIGhlYWRlclN0eWxlKTtcbiAgICAgIHZhciBjbG9zZUJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYXBwbHlTdHlsZShjbG9zZUJ1dHRvbkVsZW1lbnQsIGRpc21pc3NCdXR0b25TdHlsZSk7XG4gICAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuaW5uZXJUZXh0ID0gXCLDl1wiO1xuICAgICAgY2xvc2VCdXR0b25FbGVtZW50LmFyaWFMYWJlbCA9IFwiRGlzbWlzc1wiO1xuICAgICAgY2xvc2VCdXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICBvdmVybGF5U2VydmljZS5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIkRJU01JU1NcIlxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgY29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoaGVhZGVyRWxlbWVudCk7XG4gICAgICBjb250ZW50RWxlbWVudC5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbkVsZW1lbnQpO1xuICAgICAgY29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyRWxlbWVudCk7XG5cbiAgICAgIC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG4gICAgICAoLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50KS5ib2R5LmFwcGVuZENoaWxkKGNvbnRlbnRFbGVtZW50KTtcbiAgICAgIG9uTG9hZFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKG9uTG9hZCkge1xuICAgICAgICBvbkxvYWQoLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi9jb250ZW50RWxlbWVudCk7XG4gICAgICB9KTtcbiAgICAgIG9uTG9hZFF1ZXVlID0gW107XG5cbiAgICAgIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG4gICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IG51bGw7XG4gICAgfTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7KGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkfSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWVcbiAgICovXG4gIGZ1bmN0aW9uIGVuc3VyZU92ZXJsYXlFeGlzdHMoY2FsbGJhY2ssIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpIHtcbiAgICBpZiAoY29udGFpbmVyRWxlbWVudCkge1xuICAgICAgY29udGFpbmVyRWxlbWVudC5pbm5lckhUTUwgPSBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5ID8gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVIVE1MKFwiXCIpIDogXCJcIjtcbiAgICAgIC8vIEV2ZXJ5dGhpbmcgaXMgcmVhZHksIGNhbGwgdGhlIGNhbGxiYWNrIHJpZ2h0IGF3YXkuXG4gICAgICBjYWxsYmFjayhjb250YWluZXJFbGVtZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb25Mb2FkUXVldWUucHVzaChjYWxsYmFjayk7XG4gICAgaWYgKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3JlYXRlQ29udGFpbmVyKHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpO1xuICB9XG5cbiAgLy8gU3VjY2Vzc2Z1bCBjb21waWxhdGlvbi5cbiAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICBpZiAoIWlmcmFtZUNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDbGVhbiB1cCBhbmQgcmVzZXQgaW50ZXJuYWwgc3RhdGUuXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gbnVsbDtcbiAgICBjb250YWluZXJFbGVtZW50ID0gbnVsbDtcbiAgfVxuXG4gIC8vIENvbXBpbGF0aW9uIHdpdGggZXJyb3JzIChlLmcuIHN5bnRheCBlcnJvciBvciBtaXNzaW5nIG1vZHVsZXMpLlxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmcgIHwgeyBtb2R1bGVJZGVudGlmaWVyPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmcgfT59IG1lc3NhZ2VzXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZVxuICAgKiBAcGFyYW0geydidWlsZCcgfCAncnVudGltZSd9IG1lc3NhZ2VTb3VyY2VcbiAgICovXG4gIGZ1bmN0aW9uIHNob3codHlwZSwgbWVzc2FnZXMsIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUsIG1lc3NhZ2VTb3VyY2UpIHtcbiAgICBlbnN1cmVPdmVybGF5RXhpc3RzKGZ1bmN0aW9uICgpIHtcbiAgICAgIGhlYWRlckVsZW1lbnQuaW5uZXJUZXh0ID0gbWVzc2FnZVNvdXJjZSA9PT0gXCJydW50aW1lXCIgPyBcIlVuY2F1Z2h0IHJ1bnRpbWUgZXJyb3JzOlwiIDogXCJDb21waWxlZCB3aXRoIHByb2JsZW1zOlwiO1xuICAgICAgbWVzc2FnZXMuZm9yRWFjaChmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgZW50cnlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG1zZ1N0eWxlID0gdHlwZSA9PT0gXCJ3YXJuaW5nXCIgPyBtc2dTdHlsZXMud2FybmluZyA6IG1zZ1N0eWxlcy5lcnJvcjtcbiAgICAgICAgYXBwbHlTdHlsZShlbnRyeUVsZW1lbnQsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbXNnU3R5bGUpLCB7fSwge1xuICAgICAgICAgIHBhZGRpbmc6IFwiMXJlbSAxcmVtIDEuNXJlbSAxcmVtXCJcbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgdHlwZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKHR5cGUsIG1lc3NhZ2UpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTtcbiAgICAgICAgdHlwZUVsZW1lbnQuaW5uZXJUZXh0ID0gaGVhZGVyO1xuICAgICAgICBhcHBseVN0eWxlKHR5cGVFbGVtZW50LCBtc2dUeXBlU3R5bGUpO1xuICAgICAgICBpZiAobWVzc2FnZS5tb2R1bGVJZGVudGlmaWVyKSB7XG4gICAgICAgICAgYXBwbHlTdHlsZSh0eXBlRWxlbWVudCwge1xuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIGVsZW1lbnQuZGF0YXNldCBub3Qgc3VwcG9ydGVkIGluIElFXG4gICAgICAgICAgdHlwZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1jYW4tb3BlblwiLCB0cnVlKTtcbiAgICAgICAgICB0eXBlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZmV0Y2goXCIvd2VicGFjay1kZXYtc2VydmVyL29wZW4tZWRpdG9yP2ZpbGVOYW1lPVwiLmNvbmNhdChtZXNzYWdlLm1vZHVsZUlkZW50aWZpZXIpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1ha2UgaXQgbG9vayBzaW1pbGFyIHRvIG91ciB0ZXJtaW5hbC5cbiAgICAgICAgdmFyIHRleHQgPSBhbnNpSFRNTChlbmNvZGUoYm9keSkpO1xuICAgICAgICB2YXIgbWVzc2FnZVRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgYXBwbHlTdHlsZShtZXNzYWdlVGV4dE5vZGUsIG1zZ1RleHRTdHlsZSk7XG4gICAgICAgIG1lc3NhZ2VUZXh0Tm9kZS5pbm5lckhUTUwgPSBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5ID8gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVIVE1MKHRleHQpIDogdGV4dDtcbiAgICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKHR5cGVFbGVtZW50KTtcbiAgICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKG1lc3NhZ2VUZXh0Tm9kZSk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi9cbiAgICAgICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChlbnRyeUVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfSwgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZSk7XG4gIH1cbiAgdmFyIG92ZXJsYXlTZXJ2aWNlID0gY3JlYXRlT3ZlcmxheU1hY2hpbmUoe1xuICAgIHNob3dPdmVybGF5OiBmdW5jdGlvbiBzaG93T3ZlcmxheShfcmVmMykge1xuICAgICAgdmFyIF9yZWYzJGxldmVsID0gX3JlZjMubGV2ZWwsXG4gICAgICAgIGxldmVsID0gX3JlZjMkbGV2ZWwgPT09IHZvaWQgMCA/IFwiZXJyb3JcIiA6IF9yZWYzJGxldmVsLFxuICAgICAgICBtZXNzYWdlcyA9IF9yZWYzLm1lc3NhZ2VzLFxuICAgICAgICBtZXNzYWdlU291cmNlID0gX3JlZjMubWVzc2FnZVNvdXJjZTtcbiAgICAgIHJldHVybiBzaG93KGxldmVsLCBtZXNzYWdlcywgb3B0aW9ucy50cnVzdGVkVHlwZXNQb2xpY3lOYW1lLCBtZXNzYWdlU291cmNlKTtcbiAgICB9LFxuICAgIGhpZGVPdmVybGF5OiBoaWRlXG4gIH0pO1xuICBpZiAob3B0aW9ucy5jYXRjaFJ1bnRpbWVFcnJvcikge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RXJyb3IgfCB1bmRlZmluZWR9IGVycm9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZhbGxiYWNrTWVzc2FnZVxuICAgICAqL1xuICAgIHZhciBoYW5kbGVFcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yLCBmYWxsYmFja01lc3NhZ2UpIHtcbiAgICAgIHZhciBlcnJvck9iamVjdCA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihlcnJvciB8fCBmYWxsYmFja01lc3NhZ2UpO1xuICAgICAgdmFyIHNob3VsZERpc3BsYXkgPSB0eXBlb2Ygb3B0aW9ucy5jYXRjaFJ1bnRpbWVFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5jYXRjaFJ1bnRpbWVFcnJvcihlcnJvck9iamVjdCkgOiB0cnVlO1xuICAgICAgaWYgKHNob3VsZERpc3BsYXkpIHtcbiAgICAgICAgb3ZlcmxheVNlcnZpY2Uuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJSVU5USU1FX0VSUk9SXCIsXG4gICAgICAgICAgbWVzc2FnZXM6IFt7XG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvck9iamVjdC5tZXNzYWdlLFxuICAgICAgICAgICAgc3RhY2s6IHBhcnNlRXJyb3JUb1N0YWNrcyhlcnJvck9iamVjdClcbiAgICAgICAgICB9XVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxpc3RlblRvUnVudGltZUVycm9yKGZ1bmN0aW9uIChlcnJvckV2ZW50KSB7XG4gICAgICAvLyBlcnJvciBwcm9wZXJ0eSBtYXkgYmUgZW1wdHkgaW4gb2xkZXIgYnJvd3NlciBsaWtlIElFXG4gICAgICB2YXIgZXJyb3IgPSBlcnJvckV2ZW50LmVycm9yLFxuICAgICAgICBtZXNzYWdlID0gZXJyb3JFdmVudC5tZXNzYWdlO1xuICAgICAgaWYgKCFlcnJvciAmJiAhbWVzc2FnZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBoYW5kbGVFcnJvcihlcnJvciwgbWVzc2FnZSk7XG4gICAgfSk7XG4gICAgbGlzdGVuVG9VbmhhbmRsZWRSZWplY3Rpb24oZnVuY3Rpb24gKHByb21pc2VSZWplY3Rpb25FdmVudCkge1xuICAgICAgdmFyIHJlYXNvbiA9IHByb21pc2VSZWplY3Rpb25FdmVudC5yZWFzb247XG4gICAgICBoYW5kbGVFcnJvcihyZWFzb24sIFwiVW5rbm93biBwcm9taXNlIHJlamVjdGlvbiByZWFzb25cIik7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG92ZXJsYXlTZXJ2aWNlO1xufTtcbmV4cG9ydCB7IGZvcm1hdFByb2JsZW0sIGNyZWF0ZU92ZXJsYXkgfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/overlay.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/progress.js":
/*!*******************************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/progress.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineProgressElement: () => (/* binding */ defineProgressElement),\n/* harmony export */   isProgressSupported: () => (/* binding */ isProgressSupported)\n/* harmony export */ });\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nfunction isProgressSupported() {\n  return \"customElements\" in self && !!HTMLElement.prototype.attachShadow;\n}\nfunction defineProgressElement() {\n  var _WebpackDevServerProgress;\n  if (customElements.get(\"wds-progress\")) {\n    return;\n  }\n  var _WebpackDevServerProgress_brand = /*#__PURE__*/new WeakSet();\n  var WebpackDevServerProgress = /*#__PURE__*/function (_HTMLElement) {\n    function WebpackDevServerProgress() {\n      var _this;\n      _classCallCheck(this, WebpackDevServerProgress);\n      _this = _callSuper(this, WebpackDevServerProgress);\n      _classPrivateMethodInitSpec(_this, _WebpackDevServerProgress_brand);\n      _this.attachShadow({\n        mode: \"open\"\n      });\n      _this.maxDashOffset = -219.99078369140625;\n      _this.animationTimer = null;\n      return _this;\n    }\n    _inherits(WebpackDevServerProgress, _HTMLElement);\n    return _createClass(WebpackDevServerProgress, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _assertClassBrand(_WebpackDevServerProgress_brand, this, _reset).call(this);\n      }\n    }, {\n      key: \"attributeChangedCallback\",\n      value: function attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"progress\") {\n          _assertClassBrand(_WebpackDevServerProgress_brand, this, _update).call(this, Number(newValue));\n        } else if (name === \"type\") {\n          _assertClassBrand(_WebpackDevServerProgress_brand, this, _reset).call(this);\n        }\n      }\n    }], [{\n      key: \"observedAttributes\",\n      get: function get() {\n        return [\"progress\", \"type\"];\n      }\n    }]);\n  }(/*#__PURE__*/_wrapNativeSuper(HTMLElement));\n  _WebpackDevServerProgress = WebpackDevServerProgress;\n  function _reset() {\n    var _this$getAttribute, _Number;\n    clearTimeout(this.animationTimer);\n    this.animationTimer = null;\n    var typeAttr = (_this$getAttribute = this.getAttribute(\"type\")) === null || _this$getAttribute === void 0 ? void 0 : _this$getAttribute.toLowerCase();\n    this.type = typeAttr === \"circular\" ? \"circular\" : \"linear\";\n    var innerHTML = this.type === \"circular\" ? _circularTemplate.call(_WebpackDevServerProgress) : _linearTemplate.call(_WebpackDevServerProgress);\n    this.shadowRoot.innerHTML = innerHTML;\n    this.initialProgress = (_Number = Number(this.getAttribute(\"progress\"))) !== null && _Number !== void 0 ? _Number : 0;\n    _assertClassBrand(_WebpackDevServerProgress_brand, this, _update).call(this, this.initialProgress);\n  }\n  function _circularTemplate() {\n    return \"\\n        <style>\\n        :host {\\n            width: 200px;\\n            height: 200px;\\n            position: fixed;\\n            right: 5%;\\n            top: 5%;\\n            transition: opacity .25s ease-in-out;\\n            z-index: 2147483645;\\n        }\\n\\n        circle {\\n            fill: #282d35;\\n        }\\n\\n        path {\\n            fill: rgba(0, 0, 0, 0);\\n            stroke: rgb(186, 223, 172);\\n            stroke-dasharray: 219.99078369140625;\\n            stroke-dashoffset: -219.99078369140625;\\n            stroke-width: 10;\\n            transform: rotate(90deg) translate(0px, -80px);\\n        }\\n\\n        text {\\n            font-family: 'Open Sans', sans-serif;\\n            font-size: 18px;\\n            fill: #ffffff;\\n            dominant-baseline: middle;\\n            text-anchor: middle;\\n        }\\n\\n        tspan#percent-super {\\n            fill: #bdc3c7;\\n            font-size: 0.45em;\\n            baseline-shift: 10%;\\n        }\\n\\n        @keyframes fade {\\n            0% { opacity: 1; transform: scale(1); }\\n            100% { opacity: 0; transform: scale(0); }\\n        }\\n\\n        .disappear {\\n            animation: fade 0.3s;\\n            animation-fill-mode: forwards;\\n            animation-delay: 0.5s;\\n        }\\n\\n        .hidden {\\n            display: none;\\n        }\\n        </style>\\n        <svg id=\\\"progress\\\" class=\\\"hidden noselect\\\" viewBox=\\\"0 0 80 80\\\">\\n        <circle cx=\\\"50%\\\" cy=\\\"50%\\\" r=\\\"35\\\"></circle>\\n        <path d=\\\"M5,40a35,35 0 1,0 70,0a35,35 0 1,0 -70,0\\\"></path>\\n        <text x=\\\"50%\\\" y=\\\"51%\\\">\\n            <tspan id=\\\"percent-value\\\">0</tspan>\\n            <tspan id=\\\"percent-super\\\">%</tspan>\\n        </text>\\n        </svg>\\n      \";\n  }\n  function _linearTemplate() {\n    return \"\\n        <style>\\n        :host {\\n            position: fixed;\\n            top: 0;\\n            left: 0;\\n            height: 4px;\\n            width: 100vw;\\n            z-index: 2147483645;\\n        }\\n\\n        #bar {\\n            width: 0%;\\n            height: 4px;\\n            background-color: rgb(186, 223, 172);\\n        }\\n\\n        @keyframes fade {\\n            0% { opacity: 1; }\\n            100% { opacity: 0; }\\n        }\\n\\n        .disappear {\\n            animation: fade 0.3s;\\n            animation-fill-mode: forwards;\\n            animation-delay: 0.5s;\\n        }\\n\\n        .hidden {\\n            display: none;\\n        }\\n        </style>\\n        <div id=\\\"progress\\\"></div>\\n        \";\n  }\n  function _update(percent) {\n    var element = this.shadowRoot.querySelector(\"#progress\");\n    if (this.type === \"circular\") {\n      var path = this.shadowRoot.querySelector(\"path\");\n      var value = this.shadowRoot.querySelector(\"#percent-value\");\n      var offset = (100 - percent) / 100 * this.maxDashOffset;\n      path.style.strokeDashoffset = offset;\n      value.textContent = percent;\n    } else {\n      element.style.width = \"\".concat(percent, \"%\");\n    }\n    if (percent >= 100) {\n      _assertClassBrand(_WebpackDevServerProgress_brand, this, _hide).call(this);\n    } else if (percent > 0) {\n      _assertClassBrand(_WebpackDevServerProgress_brand, this, _show).call(this);\n    }\n  }\n  function _show() {\n    var element = this.shadowRoot.querySelector(\"#progress\");\n    element.classList.remove(\"hidden\");\n  }\n  function _hide() {\n    var _this2 = this;\n    var element = this.shadowRoot.querySelector(\"#progress\");\n    if (this.type === \"circular\") {\n      element.classList.add(\"disappear\");\n      element.addEventListener(\"animationend\", function () {\n        element.classList.add(\"hidden\");\n        _assertClassBrand(_WebpackDevServerProgress_brand, _this2, _update).call(_this2, 0);\n      }, {\n        once: true\n      });\n    } else if (this.type === \"linear\") {\n      element.classList.add(\"disappear\");\n      this.animationTimer = setTimeout(function () {\n        element.classList.remove(\"disappear\");\n        element.classList.add(\"hidden\");\n        element.style.width = \"0%\";\n        _this2.animationTimer = null;\n      }, 800);\n    }\n  }\n  customElements.define(\"wds-progress\", WebpackDevServerProgress);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/progress.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/socket.js":
/*!*****************************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/socket.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   client: () => (/* binding */ client),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clients/WebSocketClient.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/clients/WebSocketClient.js\");\n/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/utils/log.js\");\n/* provided dependency */ var __webpack_dev_server_client__ = __webpack_require__(/*! ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/clients/WebSocketClient.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/clients/WebSocketClient.js\");\n/* global __webpack_dev_server_client__ */\n\n\n\n\n// this WebsocketClient is here as a default fallback, in case the client is not injected\n/* eslint-disable camelcase */\nvar Client =\n// eslint-disable-next-line no-nested-ternary\ntypeof __webpack_dev_server_client__ !== \"undefined\" ? typeof __webpack_dev_server_client__.default !== \"undefined\" ? __webpack_dev_server_client__.default : __webpack_dev_server_client__ : _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n/* eslint-enable camelcase */\n\nvar retries = 0;\nvar maxRetries = 10;\n\n// Initialized client is exported so external consumers can utilize the same instance\n// It is mutable to enforce singleton\n// eslint-disable-next-line import/no-mutable-exports\nvar client = null;\n\n/**\n * @param {string} url\n * @param {{ [handler: string]: (data?: any, params?: any) => any }} handlers\n * @param {number} [reconnect]\n */\nvar socket = function initSocket(url, handlers, reconnect) {\n  client = new Client(url);\n  client.onOpen(function () {\n    retries = 0;\n    if (typeof reconnect !== \"undefined\") {\n      maxRetries = reconnect;\n    }\n  });\n  client.onClose(function () {\n    if (retries === 0) {\n      handlers.close();\n    }\n\n    // Try to reconnect.\n    client = null;\n\n    // After 10 retries stop trying, to prevent logspam.\n    if (retries < maxRetries) {\n      // Exponentially increase timeout to reconnect.\n      // Respectfully copied from the package `got`.\n      // eslint-disable-next-line no-restricted-properties\n      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;\n      retries += 1;\n      _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.info(\"Trying to reconnect...\");\n      setTimeout(function () {\n        socket(url, handlers, reconnect);\n      }, retryInMs);\n    }\n  });\n  client.onMessage(\n  /**\n   * @param {any} data\n   */\n  function (data) {\n    var message = JSON.parse(data);\n    if (handlers[message.type]) {\n      handlers[message.type](message.data, message.params);\n    }\n  });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (socket);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBRTJEO0FBQ3RCOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sNkJBQTZCLDBCQUEwQiw2QkFBNkIsMkJBQTJCLDZCQUE2QixXQUFXLDZCQUE2QixHQUFHLG1FQUFlO0FBQzdNOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ087O0FBRVA7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSx3REFBd0Q7QUFDckUsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sOENBQUc7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsaUVBQWUsTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rYm9vay8uLi8uLi8uLi9PbmVEcml2ZS9EZXZlbG9wbWVudC9IVE1ML0JsYW5rQm9vay9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9zb2NrZXQuanM/ZjNiZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gKi9cblxuaW1wb3J0IFdlYlNvY2tldENsaWVudCBmcm9tIFwiLi9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qc1wiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4vdXRpbHMvbG9nLmpzXCI7XG5cbi8vIHRoaXMgV2Vic29ja2V0Q2xpZW50IGlzIGhlcmUgYXMgYSBkZWZhdWx0IGZhbGxiYWNrLCBpbiBjYXNlIHRoZSBjbGllbnQgaXMgbm90IGluamVjdGVkXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbnZhciBDbGllbnQgPVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG50eXBlb2YgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gIT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18uZGVmYXVsdCAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fLmRlZmF1bHQgOiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyA6IFdlYlNvY2tldENsaWVudDtcbi8qIGVzbGludC1lbmFibGUgY2FtZWxjYXNlICovXG5cbnZhciByZXRyaWVzID0gMDtcbnZhciBtYXhSZXRyaWVzID0gMTA7XG5cbi8vIEluaXRpYWxpemVkIGNsaWVudCBpcyBleHBvcnRlZCBzbyBleHRlcm5hbCBjb25zdW1lcnMgY2FuIHV0aWxpemUgdGhlIHNhbWUgaW5zdGFuY2Vcbi8vIEl0IGlzIG11dGFibGUgdG8gZW5mb3JjZSBzaW5nbGV0b25cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tbXV0YWJsZS1leHBvcnRzXG5leHBvcnQgdmFyIGNsaWVudCA9IG51bGw7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHt7IFtoYW5kbGVyOiBzdHJpbmddOiAoZGF0YT86IGFueSwgcGFyYW1zPzogYW55KSA9PiBhbnkgfX0gaGFuZGxlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcmVjb25uZWN0XVxuICovXG52YXIgc29ja2V0ID0gZnVuY3Rpb24gaW5pdFNvY2tldCh1cmwsIGhhbmRsZXJzLCByZWNvbm5lY3QpIHtcbiAgY2xpZW50ID0gbmV3IENsaWVudCh1cmwpO1xuICBjbGllbnQub25PcGVuKGZ1bmN0aW9uICgpIHtcbiAgICByZXRyaWVzID0gMDtcbiAgICBpZiAodHlwZW9mIHJlY29ubmVjdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgbWF4UmV0cmllcyA9IHJlY29ubmVjdDtcbiAgICB9XG4gIH0pO1xuICBjbGllbnQub25DbG9zZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJldHJpZXMgPT09IDApIHtcbiAgICAgIGhhbmRsZXJzLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgLy8gVHJ5IHRvIHJlY29ubmVjdC5cbiAgICBjbGllbnQgPSBudWxsO1xuXG4gICAgLy8gQWZ0ZXIgMTAgcmV0cmllcyBzdG9wIHRyeWluZywgdG8gcHJldmVudCBsb2dzcGFtLlxuICAgIGlmIChyZXRyaWVzIDwgbWF4UmV0cmllcykge1xuICAgICAgLy8gRXhwb25lbnRpYWxseSBpbmNyZWFzZSB0aW1lb3V0IHRvIHJlY29ubmVjdC5cbiAgICAgIC8vIFJlc3BlY3RmdWxseSBjb3BpZWQgZnJvbSB0aGUgcGFja2FnZSBgZ290YC5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcbiAgICAgIHZhciByZXRyeUluTXMgPSAxMDAwICogTWF0aC5wb3coMiwgcmV0cmllcykgKyBNYXRoLnJhbmRvbSgpICogMTAwO1xuICAgICAgcmV0cmllcyArPSAxO1xuICAgICAgbG9nLmluZm8oXCJUcnlpbmcgdG8gcmVjb25uZWN0Li4uXCIpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNvY2tldCh1cmwsIGhhbmRsZXJzLCByZWNvbm5lY3QpO1xuICAgICAgfSwgcmV0cnlJbk1zKTtcbiAgICB9XG4gIH0pO1xuICBjbGllbnQub25NZXNzYWdlKFxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IGRhdGFcbiAgICovXG4gIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgIGlmIChoYW5kbGVyc1ttZXNzYWdlLnR5cGVdKSB7XG4gICAgICBoYW5kbGVyc1ttZXNzYWdlLnR5cGVdKG1lc3NhZ2UuZGF0YSwgbWVzc2FnZS5wYXJhbXMpO1xuICAgIH1cbiAgfSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgc29ja2V0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/socket.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/utils/log.js":
/*!********************************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/utils/log.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/logger/index.js */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/modules/logger/index.js\");\n/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__);\n\nvar name = \"webpack-dev-server\";\n// default level is set on the client side, so it does not need\n// to be set by the CLI or API\nvar defaultLevel = \"info\";\n\n// options new options, merge with old options\n/**\n * @param {false | true | \"none\" | \"error\" | \"warn\" | \"info\" | \"log\" | \"verbose\"} level\n * @returns {void}\n */\nfunction setLogLevel(level) {\n  _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().configureDefaultLogger({\n    level: level\n  });\n}\nsetLogLevel(defaultLevel);\nvar log = _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().getLogger(name);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvbG9nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsdUVBQXVFO0FBQ2xGLGFBQWE7QUFDYjtBQUNBO0FBQ0EsRUFBRSxzRkFBNkI7QUFDL0I7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLFVBQVUseUVBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmtib29rLy4uLy4uLy4uL09uZURyaXZlL0RldmVsb3BtZW50L0hUTUwvQmxhbmtCb29rL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcz8yMjhmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uL21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzXCI7XG52YXIgbmFtZSA9IFwid2VicGFjay1kZXYtc2VydmVyXCI7XG4vLyBkZWZhdWx0IGxldmVsIGlzIHNldCBvbiB0aGUgY2xpZW50IHNpZGUsIHNvIGl0IGRvZXMgbm90IG5lZWRcbi8vIHRvIGJlIHNldCBieSB0aGUgQ0xJIG9yIEFQSVxudmFyIGRlZmF1bHRMZXZlbCA9IFwiaW5mb1wiO1xuXG4vLyBvcHRpb25zIG5ldyBvcHRpb25zLCBtZXJnZSB3aXRoIG9sZCBvcHRpb25zXG4vKipcbiAqIEBwYXJhbSB7ZmFsc2UgfCB0cnVlIHwgXCJub25lXCIgfCBcImVycm9yXCIgfCBcIndhcm5cIiB8IFwiaW5mb1wiIHwgXCJsb2dcIiB8IFwidmVyYm9zZVwifSBsZXZlbFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XG4gIGxvZ2dlci5jb25maWd1cmVEZWZhdWx0TG9nZ2VyKHtcbiAgICBsZXZlbDogbGV2ZWxcbiAgfSk7XG59XG5zZXRMb2dMZXZlbChkZWZhdWx0TGV2ZWwpO1xudmFyIGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIobmFtZSk7XG5leHBvcnQgeyBsb2csIHNldExvZ0xldmVsIH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/utils/log.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!****************************************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/utils/sendMessage.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* global __resourceQuery WorkerGlobalScope */\n\n// Send messages to the outside, so plugins can consume it.\n/**\n * @param {string} type\n * @param {any} [data]\n */\nfunction sendMsg(type, data) {\n  if (typeof self !== \"undefined\" && (typeof WorkerGlobalScope === \"undefined\" || !(self instanceof WorkerGlobalScope))) {\n    self.postMessage({\n      type: \"webpack\".concat(type),\n      data: data\n    }, \"*\");\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sendMsg);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc2VuZE1lc3NhZ2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsaUVBQWUsT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rYm9vay8uLi8uLi8uLi9PbmVEcml2ZS9EZXZlbG9wbWVudC9IVE1ML0JsYW5rQm9vay9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9zZW5kTWVzc2FnZS5qcz84OWIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnkgV29ya2VyR2xvYmFsU2NvcGUgKi9cblxuLy8gU2VuZCBtZXNzYWdlcyB0byB0aGUgb3V0c2lkZSwgc28gcGx1Z2lucyBjYW4gY29uc3VtZSBpdC5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7YW55fSBbZGF0YV1cbiAqL1xuZnVuY3Rpb24gc2VuZE1zZyh0eXBlLCBkYXRhKSB7XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSBcInVuZGVmaW5lZFwiIHx8ICEoc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKSkpIHtcbiAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwid2VicGFja1wiLmNvbmNhdCh0eXBlKSxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9LCBcIipcIik7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IHNlbmRNc2c7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/utils/sendMessage.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/dev-server.js":
/*!*******************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/dev-server.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/* globals __webpack_hash__ */\nif (true) {\n\t/** @type {undefined|string} */\n\tvar lastHash;\n\tvar upToDate = function upToDate() {\n\t\treturn /** @type {string} */ (lastHash).indexOf(__webpack_require__.h()) >= 0;\n\t};\n\tvar log = __webpack_require__(/*! ./log */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/log.js\");\n\tvar check = function check() {\n\t\tmodule.hot\n\t\t\t.check(true)\n\t\t\t.then(function (updatedModules) {\n\t\t\t\tif (!updatedModules) {\n\t\t\t\t\tlog(\n\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\"[HMR] Cannot find update. \" +\n\t\t\t\t\t\t\t(typeof window !== \"undefined\"\n\t\t\t\t\t\t\t\t? \"Need to do a full reload!\"\n\t\t\t\t\t\t\t\t: \"Please reload manually!\")\n\t\t\t\t\t);\n\t\t\t\t\tlog(\n\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\"[HMR] (Probably because of restarting the webpack-dev-server)\"\n\t\t\t\t\t);\n\t\t\t\t\tif (typeof window !== \"undefined\") {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!upToDate()) {\n\t\t\t\t\tcheck();\n\t\t\t\t}\n\n\t\t\t\t__webpack_require__(/*! ./log-apply-result */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/log-apply-result.js\")(updatedModules, updatedModules);\n\n\t\t\t\tif (upToDate()) {\n\t\t\t\t\tlog(\"info\", \"[HMR] App is up to date.\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(function (err) {\n\t\t\t\tvar status = module.hot.status();\n\t\t\t\tif ([\"abort\", \"fail\"].indexOf(status) >= 0) {\n\t\t\t\t\tlog(\n\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\"[HMR] Cannot apply update. \" +\n\t\t\t\t\t\t\t(typeof window !== \"undefined\"\n\t\t\t\t\t\t\t\t? \"Need to do a full reload!\"\n\t\t\t\t\t\t\t\t: \"Please reload manually!\")\n\t\t\t\t\t);\n\t\t\t\t\tlog(\"warning\", \"[HMR] \" + log.formatError(err));\n\t\t\t\t\tif (typeof window !== \"undefined\") {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlog(\"warning\", \"[HMR] Update failed: \" + log.formatError(err));\n\t\t\t\t}\n\t\t\t});\n\t};\n\tvar hotEmitter = __webpack_require__(/*! ./emitter */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/emitter.js\");\n\thotEmitter.on(\"webpackHotUpdate\", function (currentHash) {\n\t\tlastHash = currentHash;\n\t\tif (!upToDate() && module.hot.status() === \"idle\") {\n\t\t\tlog(\"info\", \"[HMR] Checking for updates on the server...\");\n\t\t\tcheck();\n\t\t}\n\t});\n\tlog(\"info\", \"[HMR] Waiting for update signal from WDS...\");\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksSUFBVTtBQUNkLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUSxzQkFBc0IsdUJBQWdCO0FBQ2xFO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLDJGQUFPO0FBQzFCO0FBQ0EsRUFBRSxVQUFVO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLElBQUksbUJBQU8sQ0FBQyxxSEFBb0I7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLGlCQUFpQixVQUFVO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsbUdBQVc7QUFDckM7QUFDQTtBQUNBLHFCQUFxQixVQUFVO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLEVBQUUsS0FBSyxFQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmtib29rLy4uLy4uLy4uL09uZURyaXZlL0RldmVsb3BtZW50L0hUTUwvQmxhbmtCb29rL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9kZXYtc2VydmVyLmpzP2E1OGUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8qIGdsb2JhbHMgX193ZWJwYWNrX2hhc2hfXyAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcblx0LyoqIEB0eXBlIHt1bmRlZmluZWR8c3RyaW5nfSAqL1xuXHR2YXIgbGFzdEhhc2g7XG5cdHZhciB1cFRvRGF0ZSA9IGZ1bmN0aW9uIHVwVG9EYXRlKCkge1xuXHRcdHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGxhc3RIYXNoKS5pbmRleE9mKF9fd2VicGFja19oYXNoX18pID49IDA7XG5cdH07XG5cdHZhciBsb2cgPSByZXF1aXJlKFwiLi9sb2dcIik7XG5cdHZhciBjaGVjayA9IGZ1bmN0aW9uIGNoZWNrKCkge1xuXHRcdG1vZHVsZS5ob3Rcblx0XHRcdC5jaGVjayh0cnVlKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKHVwZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRcdGlmICghdXBkYXRlZE1vZHVsZXMpIHtcblx0XHRcdFx0XHRsb2coXG5cdFx0XHRcdFx0XHRcIndhcm5pbmdcIixcblx0XHRcdFx0XHRcdFwiW0hNUl0gQ2Fubm90IGZpbmQgdXBkYXRlLiBcIiArXG5cdFx0XHRcdFx0XHRcdCh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiXG5cdFx0XHRcdFx0XHRcdFx0PyBcIk5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCFcIlxuXHRcdFx0XHRcdFx0XHRcdDogXCJQbGVhc2UgcmVsb2FkIG1hbnVhbGx5IVwiKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0bG9nKFxuXHRcdFx0XHRcdFx0XCJ3YXJuaW5nXCIsXG5cdFx0XHRcdFx0XHRcIltITVJdIChQcm9iYWJseSBiZWNhdXNlIG9mIHJlc3RhcnRpbmcgdGhlIHdlYnBhY2stZGV2LXNlcnZlcilcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCF1cFRvRGF0ZSgpKSB7XG5cdFx0XHRcdFx0Y2hlY2soKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlcXVpcmUoXCIuL2xvZy1hcHBseS1yZXN1bHRcIikodXBkYXRlZE1vZHVsZXMsIHVwZGF0ZWRNb2R1bGVzKTtcblxuXHRcdFx0XHRpZiAodXBUb0RhdGUoKSkge1xuXHRcdFx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBBcHAgaXMgdXAgdG8gZGF0ZS5cIik7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHR2YXIgc3RhdHVzID0gbW9kdWxlLmhvdC5zdGF0dXMoKTtcblx0XHRcdFx0aWYgKFtcImFib3J0XCIsIFwiZmFpbFwiXS5pbmRleE9mKHN0YXR1cykgPj0gMCkge1xuXHRcdFx0XHRcdGxvZyhcblx0XHRcdFx0XHRcdFwid2FybmluZ1wiLFxuXHRcdFx0XHRcdFx0XCJbSE1SXSBDYW5ub3QgYXBwbHkgdXBkYXRlLiBcIiArXG5cdFx0XHRcdFx0XHRcdCh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiXG5cdFx0XHRcdFx0XHRcdFx0PyBcIk5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCFcIlxuXHRcdFx0XHRcdFx0XHRcdDogXCJQbGVhc2UgcmVsb2FkIG1hbnVhbGx5IVwiKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdIFwiICsgbG9nLmZvcm1hdEVycm9yKGVycikpO1xuXHRcdFx0XHRcdGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBVcGRhdGUgZmFpbGVkOiBcIiArIGxvZy5mb3JtYXRFcnJvcihlcnIpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH07XG5cdHZhciBob3RFbWl0dGVyID0gcmVxdWlyZShcIi4vZW1pdHRlclwiKTtcblx0aG90RW1pdHRlci5vbihcIndlYnBhY2tIb3RVcGRhdGVcIiwgZnVuY3Rpb24gKGN1cnJlbnRIYXNoKSB7XG5cdFx0bGFzdEhhc2ggPSBjdXJyZW50SGFzaDtcblx0XHRpZiAoIXVwVG9EYXRlKCkgJiYgbW9kdWxlLmhvdC5zdGF0dXMoKSA9PT0gXCJpZGxlXCIpIHtcblx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBDaGVja2luZyBmb3IgdXBkYXRlcyBvbiB0aGUgc2VydmVyLi4uXCIpO1xuXHRcdFx0Y2hlY2soKTtcblx0XHR9XG5cdH0pO1xuXHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gV2FpdGluZyBmb3IgdXBkYXRlIHNpZ25hbCBmcm9tIFdEUy4uLlwiKTtcbn0gZWxzZSB7XG5cdHRocm93IG5ldyBFcnJvcihcIltITVJdIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgaXMgZGlzYWJsZWQuXCIpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/dev-server.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/emitter.js":
/*!****************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/emitter.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var EventEmitter = __webpack_require__(/*! events */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/events/events.js\");\nmodule.exports = new EventEmitter();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2VtaXR0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CLG1CQUFPLENBQUMsMEZBQVE7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFua2Jvb2svLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2VtaXR0ZXIuanM/N2EzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbm1vZHVsZS5leHBvcnRzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/emitter.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/log-apply-result.js":
/*!*************************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/log-apply-result.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n/**\n * @param {(string | number)[]} updatedModules updated modules\n * @param {(string | number)[] | null} renewedModules renewed modules\n */\nmodule.exports = function (updatedModules, renewedModules) {\n\tvar unacceptedModules = updatedModules.filter(function (moduleId) {\n\t\treturn renewedModules && renewedModules.indexOf(moduleId) < 0;\n\t});\n\tvar log = __webpack_require__(/*! ./log */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/log.js\");\n\n\tif (unacceptedModules.length > 0) {\n\t\tlog(\n\t\t\t\"warning\",\n\t\t\t\"[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\"\n\t\t);\n\t\tunacceptedModules.forEach(function (moduleId) {\n\t\t\tlog(\"warning\", \"[HMR]  - \" + moduleId);\n\t\t});\n\t}\n\n\tif (!renewedModules || renewedModules.length === 0) {\n\t\tlog(\"info\", \"[HMR] Nothing hot updated.\");\n\t} else {\n\t\tlog(\"info\", \"[HMR] Updated modules:\");\n\t\trenewedModules.forEach(function (moduleId) {\n\t\t\tif (typeof moduleId === \"string\" && moduleId.indexOf(\"!\") !== -1) {\n\t\t\t\tvar parts = moduleId.split(\"!\");\n\t\t\t\tlog.groupCollapsed(\"info\", \"[HMR]  - \" + parts.pop());\n\t\t\t\tlog(\"info\", \"[HMR]  - \" + moduleId);\n\t\t\t\tlog.groupEnd(\"info\");\n\t\t\t} else {\n\t\t\t\tlog(\"info\", \"[HMR]  - \" + moduleId);\n\t\t\t}\n\t\t});\n\t\tvar numberIds = renewedModules.every(function (moduleId) {\n\t\t\treturn typeof moduleId === \"number\";\n\t\t});\n\t\tif (numberIds)\n\t\t\tlog(\n\t\t\t\t\"info\",\n\t\t\t\t'[HMR] Consider using the optimization.moduleIds: \"named\" for module names.'\n\t\t\t);\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy1hcHBseS1yZXN1bHQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQyxXQUFXLDRCQUE0QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixXQUFXLG1CQUFPLENBQUMsMkZBQU87O0FBRTFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxhbmtib29rLy4uLy4uLy4uL09uZURyaXZlL0RldmVsb3BtZW50L0hUTUwvQmxhbmtCb29rL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2ctYXBwbHktcmVzdWx0LmpzP2I4YTIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuLyoqXG4gKiBAcGFyYW0geyhzdHJpbmcgfCBudW1iZXIpW119IHVwZGF0ZWRNb2R1bGVzIHVwZGF0ZWQgbW9kdWxlc1xuICogQHBhcmFtIHsoc3RyaW5nIHwgbnVtYmVyKVtdIHwgbnVsbH0gcmVuZXdlZE1vZHVsZXMgcmVuZXdlZCBtb2R1bGVzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVwZGF0ZWRNb2R1bGVzLCByZW5ld2VkTW9kdWxlcykge1xuXHR2YXIgdW5hY2NlcHRlZE1vZHVsZXMgPSB1cGRhdGVkTW9kdWxlcy5maWx0ZXIoZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0cmV0dXJuIHJlbmV3ZWRNb2R1bGVzICYmIHJlbmV3ZWRNb2R1bGVzLmluZGV4T2YobW9kdWxlSWQpIDwgMDtcblx0fSk7XG5cdHZhciBsb2cgPSByZXF1aXJlKFwiLi9sb2dcIik7XG5cblx0aWYgKHVuYWNjZXB0ZWRNb2R1bGVzLmxlbmd0aCA+IDApIHtcblx0XHRsb2coXG5cdFx0XHRcIndhcm5pbmdcIixcblx0XHRcdFwiW0hNUl0gVGhlIGZvbGxvd2luZyBtb2R1bGVzIGNvdWxkbid0IGJlIGhvdCB1cGRhdGVkOiAoVGhleSB3b3VsZCBuZWVkIGEgZnVsbCByZWxvYWQhKVwiXG5cdFx0KTtcblx0XHR1bmFjY2VwdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdICAtIFwiICsgbW9kdWxlSWQpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCFyZW5ld2VkTW9kdWxlcyB8fCByZW5ld2VkTW9kdWxlcy5sZW5ndGggPT09IDApIHtcblx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gTm90aGluZyBob3QgdXBkYXRlZC5cIik7XG5cdH0gZWxzZSB7XG5cdFx0bG9nKFwiaW5mb1wiLCBcIltITVJdIFVwZGF0ZWQgbW9kdWxlczpcIik7XG5cdFx0cmVuZXdlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdGlmICh0eXBlb2YgbW9kdWxlSWQgPT09IFwic3RyaW5nXCIgJiYgbW9kdWxlSWQuaW5kZXhPZihcIiFcIikgIT09IC0xKSB7XG5cdFx0XHRcdHZhciBwYXJ0cyA9IG1vZHVsZUlkLnNwbGl0KFwiIVwiKTtcblx0XHRcdFx0bG9nLmdyb3VwQ29sbGFwc2VkKFwiaW5mb1wiLCBcIltITVJdICAtIFwiICsgcGFydHMucG9wKCkpO1xuXHRcdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gIC0gXCIgKyBtb2R1bGVJZCk7XG5cdFx0XHRcdGxvZy5ncm91cEVuZChcImluZm9cIik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gIC0gXCIgKyBtb2R1bGVJZCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dmFyIG51bWJlcklkcyA9IHJlbmV3ZWRNb2R1bGVzLmV2ZXJ5KGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiBtb2R1bGVJZCA9PT0gXCJudW1iZXJcIjtcblx0XHR9KTtcblx0XHRpZiAobnVtYmVySWRzKVxuXHRcdFx0bG9nKFxuXHRcdFx0XHRcImluZm9cIixcblx0XHRcdFx0J1tITVJdIENvbnNpZGVyIHVzaW5nIHRoZSBvcHRpbWl6YXRpb24ubW9kdWxlSWRzOiBcIm5hbWVkXCIgZm9yIG1vZHVsZSBuYW1lcy4nXG5cdFx0XHQpO1xuXHR9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/log-apply-result.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/log.js":
/*!************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/log.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("/** @typedef {\"info\" | \"warning\" | \"error\"} LogLevel */\n\n/** @type {LogLevel} */\nvar logLevel = \"info\";\n\nfunction dummy() {}\n\n/**\n * @param {LogLevel} level log level\n * @returns {boolean} true, if should log\n */\nfunction shouldLog(level) {\n\tvar shouldLog =\n\t\t(logLevel === \"info\" && level === \"info\") ||\n\t\t([\"info\", \"warning\"].indexOf(logLevel) >= 0 && level === \"warning\") ||\n\t\t([\"info\", \"warning\", \"error\"].indexOf(logLevel) >= 0 && level === \"error\");\n\treturn shouldLog;\n}\n\n/**\n * @param {(msg?: string) => void} logFn log function\n * @returns {(level: LogLevel, msg?: string) => void} function that logs when log level is sufficient\n */\nfunction logGroup(logFn) {\n\treturn function (level, msg) {\n\t\tif (shouldLog(level)) {\n\t\t\tlogFn(msg);\n\t\t}\n\t};\n}\n\n/**\n * @param {LogLevel} level log level\n * @param {string|Error} msg message\n */\nmodule.exports = function (level, msg) {\n\tif (shouldLog(level)) {\n\t\tif (level === \"info\") {\n\t\t\tconsole.log(msg);\n\t\t} else if (level === \"warning\") {\n\t\t\tconsole.warn(msg);\n\t\t} else if (level === \"error\") {\n\t\t\tconsole.error(msg);\n\t\t}\n\t}\n};\n\nvar group = console.group || dummy;\nvar groupCollapsed = console.groupCollapsed || dummy;\nvar groupEnd = console.groupEnd || dummy;\n\nmodule.exports.group = logGroup(group);\n\nmodule.exports.groupCollapsed = logGroup(groupCollapsed);\n\nmodule.exports.groupEnd = logGroup(groupEnd);\n\n/**\n * @param {LogLevel} level log level\n */\nmodule.exports.setLogLevel = function (level) {\n\tlogLevel = level;\n};\n\n/**\n * @param {Error} err error\n * @returns {string} formatted error\n */\nmodule.exports.formatError = function (err) {\n\tvar message = err.message;\n\tvar stack = err.stack;\n\tif (!stack) {\n\t\treturn message;\n\t} else if (stack.indexOf(message) < 0) {\n\t\treturn message + \"\\n\" + stack;\n\t}\n\treturn stack;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLDhCQUE4Qjs7QUFFNUMsV0FBVyxVQUFVO0FBQ3JCOztBQUVBOztBQUVBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyx3QkFBd0I7QUFDbkMsYUFBYSx5Q0FBeUM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLGNBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9COztBQUVwQiw2QkFBNkI7O0FBRTdCLHVCQUF1Qjs7QUFFdkI7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFua2Jvb2svLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy5qcz83ZjQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAdHlwZWRlZiB7XCJpbmZvXCIgfCBcIndhcm5pbmdcIiB8IFwiZXJyb3JcIn0gTG9nTGV2ZWwgKi9cblxuLyoqIEB0eXBlIHtMb2dMZXZlbH0gKi9cbnZhciBsb2dMZXZlbCA9IFwiaW5mb1wiO1xuXG5mdW5jdGlvbiBkdW1teSgpIHt9XG5cbi8qKlxuICogQHBhcmFtIHtMb2dMZXZlbH0gbGV2ZWwgbG9nIGxldmVsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSwgaWYgc2hvdWxkIGxvZ1xuICovXG5mdW5jdGlvbiBzaG91bGRMb2cobGV2ZWwpIHtcblx0dmFyIHNob3VsZExvZyA9XG5cdFx0KGxvZ0xldmVsID09PSBcImluZm9cIiAmJiBsZXZlbCA9PT0gXCJpbmZvXCIpIHx8XG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwid2FybmluZ1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiLCBcImVycm9yXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwiZXJyb3JcIik7XG5cdHJldHVybiBzaG91bGRMb2c7XG59XG5cbi8qKlxuICogQHBhcmFtIHsobXNnPzogc3RyaW5nKSA9PiB2b2lkfSBsb2dGbiBsb2cgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHsobGV2ZWw6IExvZ0xldmVsLCBtc2c/OiBzdHJpbmcpID0+IHZvaWR9IGZ1bmN0aW9uIHRoYXQgbG9ncyB3aGVuIGxvZyBsZXZlbCBpcyBzdWZmaWNpZW50XG4gKi9cbmZ1bmN0aW9uIGxvZ0dyb3VwKGxvZ0ZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRcdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0XHRsb2dGbihtc2cpO1xuXHRcdH1cblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0xvZ0xldmVsfSBsZXZlbCBsb2cgbGV2ZWxcbiAqIEBwYXJhbSB7c3RyaW5nfEVycm9yfSBtc2cgbWVzc2FnZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsZXZlbCwgbXNnKSB7XG5cdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0aWYgKGxldmVsID09PSBcImluZm9cIikge1xuXHRcdFx0Y29uc29sZS5sb2cobXNnKTtcblx0XHR9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5pbmdcIikge1xuXHRcdFx0Y29uc29sZS53YXJuKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKG1zZyk7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgZ3JvdXAgPSBjb25zb2xlLmdyb3VwIHx8IGR1bW15O1xudmFyIGdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZCB8fCBkdW1teTtcbnZhciBncm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQgfHwgZHVtbXk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwID0gbG9nR3JvdXAoZ3JvdXApO1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cENvbGxhcHNlZCA9IGxvZ0dyb3VwKGdyb3VwQ29sbGFwc2VkKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBFbmQgPSBsb2dHcm91cChncm91cEVuZCk7XG5cbi8qKlxuICogQHBhcmFtIHtMb2dMZXZlbH0gbGV2ZWwgbG9nIGxldmVsXG4gKi9cbm1vZHVsZS5leHBvcnRzLnNldExvZ0xldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG5cdGxvZ0xldmVsID0gbGV2ZWw7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RXJyb3J9IGVyciBlcnJvclxuICogQHJldHVybnMge3N0cmluZ30gZm9ybWF0dGVkIGVycm9yXG4gKi9cbm1vZHVsZS5leHBvcnRzLmZvcm1hdEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHR2YXIgbWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuXHR2YXIgc3RhY2sgPSBlcnIuc3RhY2s7XG5cdGlmICghc3RhY2spIHtcblx0XHRyZXR1cm4gbWVzc2FnZTtcblx0fSBlbHNlIGlmIChzdGFjay5pbmRleE9mKG1lc3NhZ2UpIDwgMCkge1xuXHRcdHJldHVybiBtZXNzYWdlICsgXCJcXG5cIiArIHN0YWNrO1xuXHR9XG5cdHJldHVybiBzdGFjaztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/log.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/existingPlaceholderUI.js":
/*!********************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/existingPlaceholderUI.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   forceUpdateExistingPlaceholders: () => (/* binding */ forceUpdateExistingPlaceholders),\n/* harmony export */   initExistingPlaceholderEvents: () => (/* binding */ initExistingPlaceholderEvents),\n/* harmony export */   updateExistingPlaceholderAccordion: () => (/* binding */ updateExistingPlaceholderAccordion)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./placeholderCreation.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderCreation.js\");\n/* harmony import */ var _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderDefinitions.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDefinitions.js\");\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n\n\n\n\n/**\r\n * Gets the icon for a placeholder based on its internal type\r\n * @param {string} internalType - The internal placeholder type\r\n * @returns {string} The Font Awesome icon class\r\n */\nvar getIconForType = function getIconForType(internalType) {\n  // First try a direct match\n  for (var category in _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.allPlaceholders) {\n    var match = _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.allPlaceholders[category].find(function (p) {\n      return p.internalType === internalType;\n    });\n    if (match && match.icon) {\n      return match.icon;\n    }\n  }\n\n  // Handle special cases for types without prefixes\n  // These need explicit matching as they don't follow the prefix pattern\n  var specialTypes = {\n    'Number': 'fas fa-hashtag',\n    'Exclamation': 'fas fa-bullhorn',\n    'FW': 'fas fa-globe',\n    'DT': 'fas fa-bookmark',\n    'CC': 'fas fa-link',\n    'IN': 'fas fa-arrows-alt',\n    'DT_Quantifier': 'fas fa-calculator'\n  };\n  if (specialTypes[internalType]) {\n    return specialTypes[internalType];\n  }\n\n  // If no direct match, try to match based on prefix\n  // Most internal types follow patterns like NN_Animal, VB_Action, etc.\n  if (internalType.includes('_')) {\n    var prefix = internalType.split('_')[0];\n    for (var _category in _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.allPlaceholders) {\n      // Try to find a base type that matches the prefix\n      var baseMatch = _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.allPlaceholders[_category].find(function (p) {\n        return p.internalType === prefix;\n      });\n      if (baseMatch && baseMatch.icon) {\n        return baseMatch.icon;\n      }\n    }\n  }\n\n  // Try to match common prefixes to general categories\n  if (internalType.startsWith('NN')) {\n    return 'fas fa-book'; // Default noun icon\n  } else if (internalType.startsWith('VB')) {\n    return 'fas fa-pen'; // Default verb icon\n  } else if (internalType.startsWith('JJ')) {\n    return 'fas fa-ad'; // Default adjective icon\n  } else if (internalType.startsWith('RB')) {\n    return 'fas fa-feather-alt'; // Default adverb icon\n  }\n\n  // Default icon if not found\n  return 'fas fa-tag';\n};\n\n/**\r\n * Updates the existing placeholder accordion display based on search\r\n * @param {string} accordionSelector - The CSS selector for the accordion\r\n * @param {string} noResultsSelector - The CSS selector for the no results element\r\n * @param {string} searchVal - The current search value\r\n */\nvar updateExistingPlaceholderAccordion = function updateExistingPlaceholderAccordion(accordionSelector, noResultsSelector) {\n  var searchVal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  // Update search query display\n  if (noResultsSelector === \"#noExistingResults\") {\n    $(\"#existingSearchQuery\").text(searchVal);\n  } else if (noResultsSelector === \"#modalNoExistingResults\") {\n    $(\"#modalExistingSearchQuery\").text(searchVal);\n  }\n  $(noResultsSelector).hide();\n  var accordion = $(accordionSelector);\n  accordion.empty();\n\n  // If no variables exist, show no results\n  if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables || _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.length === 0) {\n    $(noResultsSelector).show();\n    return;\n  }\n\n  // Create a single card to contain all placeholders\n  var card = $(\"<div class='card'></div>\");\n\n  // Add a card header for consistency with the new placeholders UI\n  var cardHeader = $(\"\\n        <div class='card-header'>\\n            <button class='btn btn-link collapsed' type='button' data-bs-toggle='collapse' \\n                data-bs-target='#existingPlaceholdersCollapse'>\\n                <i class='fas fa-history me-2'></i> All Used Placeholders\\n                <i class='fas fa-chevron-down float-end mt-1'></i>\\n            </button>\\n        </div>\\n    \");\n\n  // Add the card header to the card\n  card.append(cardHeader);\n\n  // We need a collapse div for consistency\n  var collapseDiv = $(\"\\n        <div id='existingPlaceholdersCollapse' class='collapse show'>\\n            <div class='card-body'>\\n                <div class='list-group'></div>\\n            </div>\\n        </div>\\n    \");\n\n  // Add the collapse div to the card\n  card.append(collapseDiv);\n\n  // Sort all placeholders directly by usage count\n  var allExistingPlaceholders = _toConsumableArray(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables).sort(function (a, b) {\n    return (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[b.id] || 0) - (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[a.id] || 0) || a.order - b.order;\n  });\n\n  // Add all placeholders to the list\n  allExistingPlaceholders.forEach(function (placeholder) {\n    var showItem = !searchVal || placeholder.displayOverride && placeholder.displayOverride.toLowerCase().includes(searchVal.toLowerCase()) || placeholder.officialDisplay.toLowerCase().includes(searchVal.toLowerCase());\n    if (showItem) {\n      var usageCount = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[placeholder.id] || 0;\n      var iconClass = getIconForType(placeholder.internalType);\n      var item = $(\"\\n                <div class='list-group-item placeholder-btn existing-placeholder-btn'\\n                    data-id='\".concat(placeholder.id, \"'\\n                    data-bs-toggle=\\\"tooltip\\\" \\n                    title=\\\"ID: \").concat(placeholder.id, \"\\\">\\n                    <div class=\\\"d-flex align-items-center\\\">\\n                        <i class=\\\"\").concat(iconClass, \" me-2\\\" aria-hidden=\\\"true\\\"></i>\\n                        <span class=\\\"placeholder-text\\\">\").concat(placeholder.displayOverride || placeholder.officialDisplay, \"</span>\\n                    </div>\\n                    <div class=\\\"usage-count badge bg-primary\\\">\").concat(usageCount, \" \").concat(usageCount === 1 ? 'use' : 'uses', \"</div>\\n                </div>\\n            \"));\n      collapseDiv.find('.list-group').append(item);\n    }\n  });\n\n  // Add the card to the accordion\n  accordion.append(card);\n\n  // If searching, update visibility of headers\n  if (searchVal) {\n    var anyShown = accordion.find('.placeholder-btn:visible').length > 0;\n    $(noResultsSelector).toggle(!anyShown);\n    accordion.find('.card-header').hide();\n  } else {\n    accordion.find('.card-header').show();\n  }\n\n  // Initialize tooltips\n  $('[data-bs-toggle=\"tooltip\"]').tooltip();\n};\n\n/**\r\n * Force an update of both existing placeholder accordions\r\n */\nvar forceUpdateExistingPlaceholders = function forceUpdateExistingPlaceholders() {\n  var existingSearch = $('#existingPlaceholderSearch').val() || '';\n  updateExistingPlaceholderAccordion('#existingPlaceholderAccordion', '#noExistingResults', existingSearch);\n  var modalExistingSearch = $('#modalExistingPlaceholderSearch').val() || '';\n  updateExistingPlaceholderAccordion('#modalExistingPlaceholderAccordion', '#modalNoExistingResults', modalExistingSearch);\n};\n\n/**\r\n * Initializes event handlers for existing placeholder buttons\r\n */\nvar initExistingPlaceholderEvents = function initExistingPlaceholderEvents() {\n  // Attach click handlers for existing placeholder buttons\n  $(document).on('click', '.existing-placeholder-btn', function () {\n    var id = $(this).data('id');\n    var variable = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.find(function (v) {\n      return v.id === id;\n    });\n    if (variable) {\n      (0,_placeholderCreation_js__WEBPACK_IMPORTED_MODULE_1__.duplicatePlaceholder)(variable);\n      // Close modal if it's open\n      if ($('#placeholderModal').hasClass('show')) {\n        $('#placeholderModal').modal('hide');\n      }\n    }\n  });\n\n  // Add search functionality for existing placeholders\n  $('#existingPlaceholderSearch').on('input', function () {\n    var searchVal = $(this).val().trim();\n    updateExistingPlaceholderAccordion('#existingPlaceholderAccordion', '#noExistingResults', searchVal);\n  });\n  $('#modalExistingPlaceholderSearch').on('input', function () {\n    var searchVal = $(this).val().trim();\n    updateExistingPlaceholderAccordion('#modalExistingPlaceholderAccordion', '#modalNoExistingResults', searchVal);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/existingPlaceholderUI.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderCreation.js":
/*!******************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderCreation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomPlaceholder: () => (/* binding */ addCustomPlaceholder),\n/* harmony export */   applyPlaceholderToAllOccurrences: () => (/* binding */ applyPlaceholderToAllOccurrences),\n/* harmony export */   duplicatePlaceholder: () => (/* binding */ duplicatePlaceholder),\n/* harmony export */   insertPlaceholder: () => (/* binding */ insertPlaceholder),\n/* harmony export */   insertPlaceholderFromCustom: () => (/* binding */ insertPlaceholderFromCustom)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/StringUtils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/StringUtils.js\");\n/* harmony import */ var _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderDOM.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDOM.js\");\n/* harmony import */ var _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./placeholderManagement.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderManagement.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n/**\n * Duplicates an existing placeholder at the current caret position\n * @param {Object} variable - The placeholder variable to duplicate\n */\nvar duplicatePlaceholder = function duplicatePlaceholder(variable) {\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[variable.id] = (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[variable.id] || 0) + 1;\n  var newId = variable.id;\n  var editor = document.getElementById(\"storyText\");\n  var rangeToUse = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange && editor.contains(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.commonAncestorContainer) ? _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange : function () {\n    (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.ensureEditorFocus)();\n    var sel = window.getSelection();\n    return sel.rangeCount ? sel.getRangeAt(0) : null;\n  }();\n\n  // Get the selected text - either from lastSelectedText or from range\n  var selectedText = \"\";\n  if (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText) {\n    // Use the preserved selected text from modal chains\n    selectedText = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText;\n    console.log(\"Using saved selected text for reuse:\", selectedText);\n  } else if (rangeToUse && !rangeToUse.collapsed) {\n    selectedText = rangeToUse.toString().trim();\n    console.log(\"Using range selected text for reuse:\", selectedText);\n  }\n  var displayText = variable.displayOverride || variable.officialDisplay;\n  (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.insertPlaceholderSpan)(newId, displayText, rangeToUse);\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = null;\n\n  // Check if there's selected text that might exist elsewhere in the document\n  if (selectedText) {\n    // Count occurrences of the selected text in the editor\n    var editorContent = editor.textContent;\n    var occurrences = (editorContent.match(new RegExp(\"\\\\b\".concat(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.escapeRegExp(selectedText), \"\\\\b\"), 'g')) || []).length;\n    console.log(\"Found \".concat(occurrences, \" occurrences of \\\"\").concat(selectedText, \"\\\" in the document for reuse\"));\n\n    // Only offer to replace all if there's more than one occurrence\n    if (occurrences > 1) {\n      console.log(\"Showing replace all confirmation dialog for reuse\");\n\n      // Delay showing the replace all dialog to ensure any other modal is fully hidden\n      setTimeout(function () {\n        Swal.fire({\n          title: 'Multiple occurrences found',\n          html: \"Found <strong>\".concat(occurrences, \"</strong> instances of \\\"<strong>\").concat(selectedText, \"</strong>\\\" in your story.<br>Would you like to replace all instances with this placeholder?\"),\n          icon: 'question',\n          showCancelButton: true,\n          confirmButtonText: 'Yes, replace all',\n          cancelButtonText: 'No, just this one',\n          footer: '<small>This is useful for replacing character names or recurring objects with placeholders</small>'\n        }).then(function (result) {\n          if (result.isConfirmed) {\n            console.log(\"User confirmed replace all for reuse\");\n            applyPlaceholderToAllOccurrences(selectedText, newId, displayText);\n          } else {\n            console.log(\"User chose not to replace all for reuse\");\n          }\n\n          // Clear the saved selected text after the dialog is handled\n          console.log(\"Clearing lastSelectedText after replace all dialog for reuse\");\n          _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n        });\n      }, 300); // 300ms delay to ensure modal transition completes\n    } else {\n      // Clear the saved selected text if no replace dialog shown\n      setTimeout(function () {\n        console.log(\"Clearing lastSelectedText after placeholder reuse\");\n        _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n      }, 200);\n    }\n  } else {\n    // Clear the saved selected text if no selected text\n    setTimeout(function () {\n      console.log(\"Clearing lastSelectedText after placeholder reuse\");\n      _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n    }, 200);\n  }\n};\n\n/**\n * Inserts a new placeholder into the editor\n * @param {string} internalType - The internal type of the placeholder\n * @param {string} displayName - The display name of the placeholder\n * @param {boolean} isCustom - Whether this is a custom placeholder\n * @returns {Promise<void>}\n */\nvar insertPlaceholder = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(internalType, displayName, isCustom) {\n    var sanitized, editor, spans, max, newCount, id, rangeToUse, selectedText, displayText, result, editorContent, occurrences;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          sanitized = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.sanitizeString(internalType);\n          editor = document.getElementById(\"storyText\");\n          spans = editor.querySelectorAll(\".placeholder\");\n          max = 0;\n          spans.forEach(function (span) {\n            var id = span.getAttribute(\"data-id\");\n            if (id.startsWith(sanitized)) {\n              var match = id.match(/(\\d+)$/);\n              if (match) {\n                var num = parseInt(match[1], 10);\n                if (num > max) max = num;\n              }\n            }\n          });\n          newCount = max + 1;\n          _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts[sanitized] = newCount;\n          id = sanitized + newCount;\n          rangeToUse = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange && editor.contains(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.commonAncestorContainer) ? _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange : function () {\n            (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.ensureEditorFocus)();\n            var sel = window.getSelection();\n            return sel.rangeCount ? sel.getRangeAt(0) : null;\n          }(); // Get selected text - either from lastSelectedText (set by modal chain) or from range\n          selectedText = \"\";\n          if (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText) {\n            // Use the preserved selected text from modal chains\n            selectedText = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText;\n            console.log(\"Using saved selected text:\", selectedText);\n          } else if (rangeToUse && !rangeToUse.collapsed) {\n            selectedText = rangeToUse.toString().trim();\n            console.log(\"Using range selected text:\", selectedText);\n          }\n          displayText = selectedText || displayName;\n          if (selectedText) {\n            _context.next = 19;\n            break;\n          }\n          _context.next = 15;\n          return Swal.fire({\n            title: 'Enter temporary word',\n            input: 'text',\n            inputLabel: 'Temporary fill word for this placeholder',\n            inputValue: displayName,\n            showCancelButton: true\n          });\n        case 15:\n          result = _context.sent;\n          if (!result.dismiss) {\n            _context.next = 18;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 18:\n          if (result.value) displayText = result.value;\n        case 19:\n          (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.insertPlaceholderSpan)(id, displayText, rangeToUse);\n          if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.some(function (v) {\n            return v.id === id;\n          })) {\n            _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.push({\n              id: id,\n              internalType: internalType,\n              officialDisplay: displayName,\n              display: displayName,\n              isCustom: !!isCustom,\n              order: _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter++,\n              displayOverride: displayText\n            });\n          }\n          (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateVariablesList)();\n          _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = null;\n\n          // Close the placeholder modal if it's open\n          $('#placeholderModal').modal('hide');\n\n          // Check if there's selected text that might exist elsewhere in the document\n          if (selectedText) {\n            // Count occurrences of the selected text in the editor\n            editorContent = editor.textContent;\n            occurrences = (editorContent.match(new RegExp(\"\\\\b\".concat(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.escapeRegExp(selectedText), \"\\\\b\"), 'g')) || []).length;\n            console.log(\"Found \".concat(occurrences, \" occurrences of \\\"\").concat(selectedText, \"\\\" in the document\"));\n\n            // Only offer to replace all if there's more than one occurrence\n            if (occurrences > 1) {\n              console.log(\"Showing replace all confirmation dialog\");\n\n              // Delay showing the replace all dialog to ensure the modal is fully hidden\n              setTimeout(function () {\n                Swal.fire({\n                  title: 'Multiple occurrences found',\n                  html: \"Found <strong>\".concat(occurrences, \"</strong> instances of \\\"<strong>\").concat(selectedText, \"</strong>\\\" in your story.<br>Would you like to replace all instances with this placeholder?\"),\n                  icon: 'question',\n                  showCancelButton: true,\n                  confirmButtonText: 'Yes, replace all',\n                  cancelButtonText: 'No, just this one',\n                  footer: '<small>This is useful for replacing character names or recurring objects with placeholders</small>'\n                }).then(function (result) {\n                  if (result.isConfirmed) {\n                    console.log(\"User confirmed replace all\");\n                    applyPlaceholderToAllOccurrences(selectedText, id, displayText);\n                  } else {\n                    console.log(\"User chose not to replace all\");\n                  }\n\n                  // Clear the saved selected text after the dialog is handled\n                  console.log(\"Clearing lastSelectedText after replace all dialog\");\n                  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n                });\n              }, 300); // 300ms delay to ensure modal transition completes\n            } else {\n              // Clear the saved selected text if no replace dialog shown\n              setTimeout(function () {\n                console.log(\"Clearing lastSelectedText after placeholder insertion\");\n                _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n              }, 200);\n            }\n          } else {\n            // Clear the saved selected text if no selected text\n            setTimeout(function () {\n              console.log(\"Clearing lastSelectedText after placeholder insertion\");\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n            }, 200);\n          }\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function insertPlaceholder(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Applies a placeholder to all occurrences of a text string in the story\n * @param {string} text - The text to replace\n * @param {string} id - The ID of the placeholder\n * @param {string} displayText - The display text of the placeholder\n */\nvar applyPlaceholderToAllOccurrences = function applyPlaceholderToAllOccurrences(text, id, displayText) {\n  var editor = document.getElementById(\"storyText\");\n  var textNodes = [];\n  var _getTextNodes = function getTextNodes(node) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      if (node.textContent.includes(text)) {\n        textNodes.push(node);\n      }\n    } else if (node.childNodes && node.childNodes.length > 0) {\n      node.childNodes.forEach(function (child) {\n        if (!child.classList || !child.classList.contains('placeholder')) {\n          _getTextNodes(child);\n        }\n      });\n    }\n  };\n  _getTextNodes(editor);\n\n  // Track how many replacements were made\n  var replacementsCount = 0;\n  for (var i = textNodes.length - 1; i >= 0; i--) {\n    var node = textNodes[i];\n    var content = node.textContent;\n\n    // Use word boundary regex to match exact words (not substrings of other words)\n    var regex = new RegExp(\"\\\\b\".concat(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.escapeRegExp(text), \"\\\\b\"), 'g');\n    var parts = content.split(regex);\n    if (parts.length > 1) {\n      var parent = node.parentNode;\n      var fragment = document.createDocumentFragment();\n      var lastIndex = 0;\n      var match = void 0;\n      var testRegex = new RegExp(\"\\\\b\".concat(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.escapeRegExp(text), \"\\\\b\"), 'g');\n      while ((match = testRegex.exec(content)) !== null) {\n        // Add text before match\n        var beforeText = content.substring(lastIndex, match.index);\n        if (beforeText) {\n          fragment.appendChild(document.createTextNode(beforeText));\n        }\n\n        // Add placeholder\n        var span = document.createElement(\"span\");\n        span.className = \"placeholder\";\n        span.setAttribute(\"data-id\", id);\n        span.setAttribute(\"title\", id);\n        span.setAttribute(\"contenteditable\", \"false\");\n        span.textContent = displayText;\n        fragment.appendChild(span);\n        fragment.appendChild(document.createTextNode(\" \"));\n\n        // Update last index position\n        lastIndex = match.index + text.length;\n        replacementsCount++;\n      }\n\n      // Add any remaining text\n      var afterText = content.substring(lastIndex);\n      if (afterText) {\n        fragment.appendChild(document.createTextNode(afterText));\n      }\n      parent.replaceChild(fragment, node);\n    }\n  }\n  (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateVariablesFromEditor)();\n\n  // Notify the user about the number of replacements\n  if (replacementsCount > 0) {\n    Swal.fire({\n      title: 'Replacements Complete',\n      text: \"Replaced \".concat(replacementsCount, \" instances of \\\"\").concat(text, \"\\\" with the placeholder\"),\n      icon: 'success',\n      timer: 2500,\n      timerProgressBar: true,\n      showConfirmButton: false\n    });\n  }\n};\n\n/**\n * Adds a new custom placeholder type to the system with optional type information\n * @param {string} rawText - The raw text to use as the base\n * @param {string} [usage='generic'] - The usage type ('noun', 'verb', or 'generic')\n * @returns {string} The generated internal type\n */\nvar addCustomPlaceholder = function addCustomPlaceholder(rawText) {\n  var usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'generic';\n  var internal;\n  if (usage === \"noun\") {\n    internal = \"NN_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.pascalCase(rawText);\n  } else if (usage === \"verb\") {\n    internal = \"VB_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.pascalCase(rawText);\n  } else {\n    internal = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.pascalCase(rawText);\n  }\n  if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.some(function (p) {\n    return p.type === internal;\n  })) {\n    _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.push({\n      type: internal\n    });\n  }\n  return internal;\n};\n\n/**\n * Creates and inserts a custom placeholder into the editor\n * @param {string} rawText - The raw text to use as the base\n */\nvar insertPlaceholderFromCustom = function insertPlaceholderFromCustom(rawText) {\n  var internal = addCustomPlaceholder(rawText);\n  var display = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.naturalDisplay(internal);\n  insertPlaceholder(internal, display, true);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderCreation.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDOM.js":
/*!*************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDOM.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureEditorFocus: () => (/* binding */ ensureEditorFocus),\n/* harmony export */   generateLegacyText: () => (/* binding */ generateLegacyText),\n/* harmony export */   insertNodeAtCaret: () => (/* binding */ insertNodeAtCaret),\n/* harmony export */   insertPlaceholderSpan: () => (/* binding */ insertPlaceholderSpan)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n\n\n/**\n * Inserts a DOM node at the current caret position\n * @param {Node} node - The DOM node to insert\n * @param {Range} range - Optional range to use instead of current selection\n */\nvar insertNodeAtCaret = function insertNodeAtCaret(node, range) {\n  if (range) {\n    range.deleteContents();\n    range.insertNode(node);\n    var newRange = document.createRange();\n    newRange.setStartAfter(node);\n    newRange.collapse(true);\n    var sel = window.getSelection();\n    sel.removeAllRanges();\n    sel.addRange(newRange);\n  } else {\n    var _sel = window.getSelection();\n    if (_sel.rangeCount) {\n      var r = _sel.getRangeAt(0);\n      r.deleteContents();\n      r.insertNode(node);\n      r.setStartAfter(node);\n      r.collapse(true);\n      _sel.removeAllRanges();\n      _sel.addRange(r);\n    }\n  }\n};\n\n/**\n * Ensures the editor has focus and a valid selection range\n */\nvar ensureEditorFocus = function ensureEditorFocus() {\n  var editor = document.getElementById(\"storyText\");\n  var sel = window.getSelection();\n  if (!sel.rangeCount || !editor.contains(sel.anchorNode)) {\n    editor.focus();\n    var range = document.createRange();\n    range.selectNodeContents(editor);\n    range.collapse(false);\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n};\n\n/**\n * Creates and inserts a placeholder span element at the current caret position\n * @param {string} placeholderID - The ID of the placeholder\n * @param {string} displayText - The text to display in the placeholder\n * @param {Range} range - Optional range to use instead of current selection\n */\nvar insertPlaceholderSpan = function insertPlaceholderSpan(placeholderID, displayText, range) {\n  var span = document.createElement(\"span\");\n  span.className = \"placeholder\";\n  span.setAttribute(\"data-id\", placeholderID);\n  span.setAttribute(\"title\", placeholderID);\n  span.setAttribute(\"contenteditable\", \"false\");\n  span.textContent = displayText;\n  insertNodeAtCaret(span, range);\n\n  // Append extra space if needed\n  if (!displayText.endsWith(\" \")) {\n    if (span.parentNode) {\n      var nextNode = span.nextSibling;\n      if (nextNode && nextNode.nodeType === Node.TEXT_NODE) {\n        if (!/^\\s/.test(nextNode.textContent)) {\n          span.parentNode.insertBefore(document.createTextNode(\" \"), nextNode);\n        }\n      } else if (nextNode) {\n        span.parentNode.insertBefore(document.createTextNode(\" \"), nextNode);\n      } else {\n        span.parentNode.appendChild(document.createTextNode(\" \"));\n      }\n    }\n  }\n};\n\n/**\n * Converts the editor content to text format with placeholders in {id} format\n * @returns {string} The story text with placeholders in {id} format\n */\nvar generateLegacyText = function generateLegacyText() {\n  var editor = document.getElementById(\"storyText\");\n  var _traverse = function traverse(node) {\n    var result = \"\";\n    node.childNodes.forEach(function (child) {\n      if (child.nodeType === Node.TEXT_NODE) {\n        result += child.textContent;\n      } else if (child.nodeType === Node.ELEMENT_NODE) {\n        if (child.tagName.toLowerCase() === \"br\") {\n          result += \"\\n\";\n        } else if (child.classList.contains(\"placeholder\")) {\n          result += \"{\" + child.getAttribute(\"data-id\") + \"}\";\n        } else {\n          result += _traverse(child);\n          var tag = child.tagName.toLowerCase();\n          if (tag === \"div\" || tag === \"p\") result += \"\\n\";\n        }\n      }\n    });\n    return result;\n  };\n  return _traverse(editor);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDOM.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDefinitions.js":
/*!*********************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDefinitions.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERB_TENSES: () => (/* binding */ VERB_TENSES),\n/* harmony export */   allPlaceholders: () => (/* binding */ allPlaceholders),\n/* harmony export */   categoryOrder: () => (/* binding */ categoryOrder)\n/* harmony export */ });\n/**\r\n * Order of categories as they appear in the placeholder accordion\r\n */\nvar categoryOrder = [\"Nouns\", \"Verbs\", \"Descriptors\", \"Other\"];\n\n/**\r\n * Complete collection of all predefined placeholders by category\r\n */\nvar allPlaceholders = {\n  \"Nouns\": [{\n    internalType: \"NN\",\n    display: \"Noun\",\n    tooltip: \"Generic noun (table, apple)\",\n    icon: \"fas fa-book\",\n    isPrimary: true\n  }, {\n    internalType: \"NNP\",\n    display: \"Proper Noun\",\n    tooltip: \"Specific name (London, Sarah)\",\n    icon: \"fas fa-user\",\n    isPrimary: false\n  }, {\n    internalType: \"PRONOUN\",\n    display: \"Pronoun\",\n    tooltip: \"A pronoun\",\n    icon: \"fas fa-user-circle\",\n    isPrimary: true\n  }, {\n    internalType: \"NN_Concrete\",\n    display: \"Concrete\",\n    tooltip: \"Tangible object (chair, phone)\",\n    icon: \"fas fa-cube\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Person\",\n    display: \"Person\",\n    tooltip: \"A person (teacher, doctor)\",\n    icon: \"fas fa-user-friends\",\n    isPrimary: true\n  }, {\n    internalType: \"NN_Place\",\n    display: \"Place\",\n    tooltip: \"A location (park, school)\",\n    icon: \"fas fa-map-marker-alt\",\n    isPrimary: true\n  }, {\n    internalType: \"NN_Abstract\",\n    display: \"Abstract\",\n    tooltip: \"Intangible (happiness, freedom)\",\n    icon: \"fas fa-cloud\",\n    isPrimary: true\n  }, {\n    internalType: \"NN_Animal\",\n    display: \"Animal\",\n    tooltip: \"Living creature (dog, elephant)\",\n    icon: \"fas fa-dog\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_BodyPart\",\n    display: \"Body Part\",\n    tooltip: \"Part of body (hand, knee)\",\n    icon: \"fas fa-hand-paper\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Clothing\",\n    display: \"Clothing\",\n    tooltip: \"Wearable (shirt, jacket)\",\n    icon: \"fas fa-tshirt\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Drink\",\n    display: \"Drink\",\n    tooltip: \"Beverage (juice, coffee)\",\n    icon: \"fas fa-cocktail\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Emotion\",\n    display: \"Emotion\",\n    tooltip: \"Feeling (joy, anger)\",\n    icon: \"fas fa-heart\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Food\",\n    display: \"Food\",\n    tooltip: \"Edible item (pizza, carrot)\",\n    icon: \"fas fa-utensils\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Vehicle\",\n    display: \"Vehicle\",\n    tooltip: \"Mode of transport (car, bicycle)\",\n    icon: \"fas fa-car\",\n    isPrimary: false\n  }, {\n    internalType: \"NN_Onomatopoeia\",\n    display: \"Sound\",\n    tooltip: \"Sound word (bang, buzz)\",\n    icon: \"fas fa-volume-up\",\n    isPrimary: false\n  }],\n  \"Verbs\": [{\n    internalType: \"VB\",\n    display: \"Verb\",\n    tooltip: \"Action/state (jump, write)\",\n    icon: \"fas fa-pen\",\n    isPrimary: true\n  }, {\n    internalType: \"VB_Intransitive\",\n    display: \"Intransitive\",\n    tooltip: \"No object (sleep, arrive)\",\n    icon: \"fas fa-bed\",\n    isPrimary: true\n  }, {\n    internalType: \"VB_Transitive\",\n    display: \"Transitive\",\n    tooltip: \"Takes object (kick, carry)\",\n    icon: \"fas fa-hammer\",\n    isPrimary: true\n  }, {\n    internalType: \"VB_Action\",\n    display: \"Action\",\n    tooltip: \"Physical action (run, climb)\",\n    icon: \"fas fa-bolt\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Stative\",\n    display: \"State\",\n    tooltip: \"Condition (believe, know)\",\n    icon: \"fas fa-brain\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Communication\",\n    display: \"Communication\",\n    tooltip: \"Speaking (say, shout)\",\n    icon: \"fas fa-comment-dots\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Movement\",\n    display: \"Movement\",\n    tooltip: \"Motion-based (walk, swim)\",\n    icon: \"fas fa-walking\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Onomatopoeia\",\n    display: \"Sound\",\n    tooltip: \"Sound verb (meow, boom)\",\n    icon: \"fas fa-volume-up\",\n    isPrimary: false\n  }, {\n    internalType: \"MD\",\n    display: \"Modal\",\n    tooltip: \"Possibility (can, must)\",\n    icon: \"fas fa-key\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Linking\",\n    display: \"Linking\",\n    tooltip: \"Links subject (seem, become)\",\n    icon: \"fas fa-link\",\n    isPrimary: false\n  }, {\n    internalType: \"VB_Phrase\",\n    display: \"Phrasal Verb\",\n    tooltip: \"Multi-word verb (give up, look after)\",\n    icon: \"fas fa-random\",\n    isPrimary: false\n  }],\n  \"Descriptors\": [{\n    internalType: \"JJ\",\n    display: \"Adjective\",\n    tooltip: \"Describes noun (blue, tall)\",\n    icon: \"fas fa-ad\",\n    isPrimary: true\n  }, {\n    internalType: \"RB\",\n    display: \"Adverb\",\n    tooltip: \"Modifies verb (quickly, often)\",\n    icon: \"fas fa-feather-alt\",\n    isPrimary: true\n  }, {\n    internalType: \"JJ_Number\",\n    display: \"Ordered Number\",\n    tooltip: \"A ranked number (1st, seventh)\",\n    icon: \"fas fa-hashtag\",\n    isPrimary: true\n  }, {\n    internalType: \"JJ_Emotion\",\n    display: \"Emotion Adjective\",\n    tooltip: \"Describes feelings (happy, sad)\",\n    icon: \"fas fa-smile\",\n    isPrimary: false\n  }, {\n    internalType: \"JJ_Color\",\n    display: \"Color Adjective\",\n    tooltip: \"Describes colors (red, green)\",\n    icon: \"fas fa-paint-brush\",\n    isPrimary: false\n  }, {\n    internalType: \"JJ_Size\",\n    display: \"Size Adjective\",\n    tooltip: \"Describes size (big, small)\",\n    icon: \"fas fa-arrows-alt\",\n    isPrimary: false\n  }, {\n    internalType: \"JJR\",\n    display: \"Comparative\",\n    tooltip: \"Comparison (faster, smaller)\",\n    icon: \"fas fa-level-up-alt\",\n    isPrimary: false\n  }, {\n    internalType: \"JJS\",\n    display: \"Superlative\",\n    tooltip: \"Highest degree (best, tallest)\",\n    icon: \"fas fa-medal\",\n    isPrimary: false\n  }],\n  \"Other\": [{\n    internalType: \"FW\",\n    display: \"Foreign Word\",\n    tooltip: \"Non-English (bonjour, sushi)\",\n    icon: \"fas fa-globe\",\n    isPrimary: true\n  }, {\n    internalType: \"Number\",\n    display: \"Number\",\n    tooltip: \"Numerical (five, twenty)\",\n    icon: \"fas fa-hashtag\",\n    isPrimary: true\n  }, {\n    internalType: \"Exclamation\",\n    display: \"Exclamation\",\n    tooltip: \"Interjection (wow, oops)\",\n    icon: \"fas fa-bullhorn\",\n    isPrimary: true\n  }, {\n    internalType: \"DT_Quantifier\",\n    display: \"Quantifier\",\n    tooltip: \"Indicates quantity (some, many)\",\n    icon: \"fas fa-calculator\",\n    isPrimary: true\n  }, {\n    internalType: \"IN\",\n    display: \"Preposition\",\n    tooltip: \"Shows relation (in, under)\",\n    icon: \"fas fa-arrows-alt\",\n    isPrimary: false\n  }, {\n    internalType: \"DT\",\n    display: \"Determiner\",\n    tooltip: \"Specifier (a, the)\",\n    icon: \"fas fa-bookmark\",\n    isPrimary: false\n  }, {\n    internalType: \"CC\",\n    display: \"Conjunction\",\n    tooltip: \"Joins clauses (and, or)\",\n    icon: \"fas fa-link\",\n    isPrimary: false\n  }]\n};\n\n/**\r\n * Available verb tenses for selection\r\n */\nvar VERB_TENSES = [{\n  value: 'VB',\n  text: 'Base (run)'\n}, {\n  value: 'VBP',\n  text: 'Present (I walk)'\n}, {\n  value: 'VBZ',\n  text: 'Present 3rd (he leaves)'\n}, {\n  value: 'VBD',\n  text: 'Past (slept)'\n}, {\n  value: 'VBG',\n  text: 'Gerund (crying)'\n}, {\n  value: 'VBN',\n  text: 'Past Participle (eaten)'\n}];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDefinitions.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderManagement.js":
/*!********************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderManagement.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   updateExistingPlaceholder: () => (/* binding */ updateExistingPlaceholder),\n/* harmony export */   updateVariablesFromEditor: () => (/* binding */ updateVariablesFromEditor),\n/* harmony export */   updateVariablesList: () => (/* binding */ updateVariablesList)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/typeHelpers.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/typeHelpers.js\");\n/* harmony import */ var _placeholderUI_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderUI.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderUI.js\");\n/* harmony import */ var _existingPlaceholderUI_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./existingPlaceholderUI.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/existingPlaceholderUI.js\");\n\n\n\n\n\n/**\n * Updates the variables list display in the UI\n */\nvar updateVariablesList = function updateVariablesList() {\n  // This function used to update the existingPlaceholdersContainer\n  // Since we've moved to an accordion based approach, we'll just update\n  // the accordions here instead of creating the button elements\n\n  console.log(\"updateVariablesList called, variables count:\", _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.length);\n\n  // Sort variables by usage\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.sort(function (a, b) {\n    return (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[b.id] || 0) - (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[a.id] || 0) || a.order - b.order;\n  });\n\n  // Always update existing placeholder accordions\n  (0,_existingPlaceholderUI_js__WEBPACK_IMPORTED_MODULE_3__.forceUpdateExistingPlaceholders)();\n};\n\n/**\n * Updates the variables array by scanning the editor for placeholders\n */\nvar updateVariablesFromEditor = function updateVariablesFromEditor() {\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = [];\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter = 0;\n  var editor = document.getElementById('storyText');\n  var placeholderElements = editor.querySelectorAll('.placeholder');\n  console.log(\"Scanning editor for placeholders, found:\", placeholderElements.length);\n\n  // Initialize usage tracker if it doesn't exist\n  if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker) {\n    _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker = {};\n  }\n\n  // Clear usage tracker and rebuild it\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker = {};\n  placeholderElements.forEach(function (el) {\n    var id = el.getAttribute('data-id');\n    // Track usage count for each placeholder\n    _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[id] = (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[id] || 0) + 1;\n    var base = id.replace(/\\d+$/, '');\n    var numMatch = id.match(/(\\d+)$/);\n    var num = numMatch ? parseInt(numMatch[1], 10) : 0;\n    if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts[base] || num > _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts[base]) {\n      _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts[base] = num;\n    }\n    if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.some(function (v) {\n      return v.id === id;\n    })) {\n      var variableEntry;\n      var custom = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.find(function (p) {\n        return p.type === base;\n      });\n      if (custom) {\n        variableEntry = {\n          id: id,\n          internalType: custom.type,\n          officialDisplay: _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.naturalizeType(custom.type),\n          display: _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.naturalizeType(custom.type),\n          isCustom: true,\n          order: _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter++,\n          displayOverride: el.textContent\n        };\n      } else {\n        var guessed = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.guessTypeFromId(id);\n        var originalDisplay = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.getOriginalDisplayForType(guessed) || guessed;\n        variableEntry = {\n          id: id,\n          internalType: guessed,\n          officialDisplay: originalDisplay,\n          display: originalDisplay,\n          order: _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter++,\n          displayOverride: el.textContent\n        };\n      }\n      _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.push(variableEntry);\n    }\n  });\n  console.log(\"After scanning, variables count:\", _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.length);\n  console.log(\"Usage tracker:\", _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker);\n  var currentSearch = $('#placeholderSearch').val() || '';\n  (0,_placeholderUI_js__WEBPACK_IMPORTED_MODULE_2__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', currentSearch);\n  var currentModalSearch = $('#modalPlaceholderSearch').val() || '';\n  (0,_placeholderUI_js__WEBPACK_IMPORTED_MODULE_2__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', currentModalSearch);\n\n  // Update existing placeholder accordions too\n  (0,_existingPlaceholderUI_js__WEBPACK_IMPORTED_MODULE_3__.forceUpdateExistingPlaceholders)();\n  updateVariablesList();\n};\n\n/**\n * Update existing placeholder\n * @param {Object} variable - The placeholder variable to update \n * @param {string} newInternalType - The new internal type for the placeholder\n * @param {string} newDisplayName - The new display name for the placeholder\n */\nvar updateExistingPlaceholder = function updateExistingPlaceholder(variable, newInternalType, newDisplayName) {\n  var id = variable.id;\n  var editor = document.getElementById(\"storyText\");\n  var spans = editor.querySelectorAll(\".placeholder[data-id=\\\"\".concat(id, \"\\\"]\"));\n  spans.forEach(function (span) {\n    span.setAttribute(\"title\", \"\".concat(id, \" (\").concat(newInternalType, \")\"));\n  });\n  variable.internalType = newInternalType;\n  variable.officialDisplay = newDisplayName;\n  variable.display = newDisplayName;\n  updateVariablesList();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderManagement.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderUI.js":
/*!************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderUI.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendPlaceholderItem: () => (/* binding */ appendPlaceholderItem),\n/* harmony export */   createCardHeader: () => (/* binding */ createCardHeader),\n/* harmony export */   createCustomPlaceholderCategoryCard: () => (/* binding */ createCustomPlaceholderCategoryCard),\n/* harmony export */   createPlaceholderCategoryCard: () => (/* binding */ createPlaceholderCategoryCard),\n/* harmony export */   createSecondaryPlaceholderWrapper: () => (/* binding */ createSecondaryPlaceholderWrapper),\n/* harmony export */   createShowMoreToggle: () => (/* binding */ createShowMoreToggle),\n/* harmony export */   updatePlaceholderAccordion: () => (/* binding */ updatePlaceholderAccordion),\n/* harmony export */   updateShowMoreToggleVisibility: () => (/* binding */ updateShowMoreToggleVisibility)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./placeholderDefinitions.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDefinitions.js\");\n\n\n\n/**\n * Updates the placeholder accordion display based on search\n * @param {string} accordionSelector - The CSS selector for the accordion\n * @param {string} noResultsSelector - The CSS selector for the no results element\n * @param {string} searchVal - The current search value\n */\nvar updatePlaceholderAccordion = function updatePlaceholderAccordion(accordionSelector, noResultsSelector) {\n  var searchVal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  if (noResultsSelector === \"#noResults\") {\n    $(\"#searchQuery\").text(searchVal);\n    $(\"#searchQueryBtn\").text(searchVal);\n  } else if (noResultsSelector === \"#modalNoResults\") {\n    $(\"#modalSearchQuery\").text(searchVal);\n    $(\"#modalSearchQueryBtn\").text(searchVal);\n  }\n  $(noResultsSelector).hide();\n  var accordion = $(accordionSelector);\n  accordion.empty();\n  _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_1__.categoryOrder.forEach(function (categoryName) {\n    var placeholders = _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders[categoryName] || [];\n    if (placeholders.length > 0) {\n      var categoryCard = createPlaceholderCategoryCard(categoryName, accordionSelector, placeholders, searchVal);\n      accordion.append(categoryCard);\n    }\n  });\n  if (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.length > 0) {\n    var customCard = createCustomPlaceholderCategoryCard(accordionSelector, searchVal);\n    accordion.append(customCard);\n  }\n  if (searchVal) {\n    var anyShown = accordion.find('.placeholder-btn:visible').length > 0;\n    $(noResultsSelector).toggle(!anyShown);\n    accordion.find('.card-header, .show-more-toggle').hide();\n  } else {\n    accordion.find('.card-header, .show-more-toggle').show();\n  }\n\n  // Make sure to fix any display styles\n  accordion.find('.placeholder-btn[style*=\"display: block\"]').css('display', 'flex');\n};\n\n/**\n * Creates a category card for the placeholder accordion\n * @param {string} categoryName - The name of the category\n * @param {string} accordionSelector - The CSS selector for the accordion\n * @param {Array} placeholders - The placeholders in this category\n * @param {string} searchVal - The current search value\n * @returns {jQuery} The created category card\n */\nvar createPlaceholderCategoryCard = function createPlaceholderCategoryCard(categoryName, accordionSelector, placeholders, searchVal) {\n  var sanitizedCategoryName = categoryName.replace(/\\s+/g, '');\n  var card = $(\"<div class='card'></div>\");\n  card.append(createCardHeader(categoryName, sanitizedCategoryName, accordionSelector));\n  var collapseDiv = $(\"\\n  <div id='\".concat(sanitizedCategoryName, \"Collapse' class='collapse show' aria-labelledby='\").concat(sanitizedCategoryName, \"Heading' data-parent='\").concat(accordionSelector, \"'>\\n    <div class='card-body'><div class='list-group'></div></div>\\n  </div>\\n\"));\n  var primaryItems = placeholders.filter(function (p) {\n    return p.isPrimary;\n  });\n  var secondaryItems = placeholders.filter(function (p) {\n    return !p.isPrimary;\n  });\n  primaryItems.forEach(function (p) {\n    return appendPlaceholderItem(collapseDiv.find('.list-group'), p, searchVal);\n  });\n  if (secondaryItems.length > 0) {\n    var secondaryPlaceholderWrapper = createSecondaryPlaceholderWrapper(secondaryItems, searchVal);\n    collapseDiv.find('.list-group').append(secondaryPlaceholderWrapper);\n    collapseDiv.find('.list-group').append(createShowMoreToggle(sanitizedCategoryName));\n    updateShowMoreToggleVisibility(collapseDiv, searchVal, secondaryPlaceholderWrapper);\n  }\n  card.append(collapseDiv);\n  return card;\n};\n\n/**\n * Creates a category card for custom placeholders\n * @param {string} accordionSelector - The CSS selector for the accordion\n * @param {string} searchVal - The current search value\n * @returns {jQuery} The created category card\n */\nvar createCustomPlaceholderCategoryCard = function createCustomPlaceholderCategoryCard(accordionSelector, searchVal) {\n  var card = $(\"<div class='card'></div>\");\n  card.append(createCardHeader('Custom Placeholders', 'CustomPlaceholders', accordionSelector));\n  var collapseDiv = $(\"\\n  <div id='CustomPlaceholdersCollapse' class='collapse show' aria-labelledby='CustomPlaceholdersHeading' data-parent='\".concat(accordionSelector, \"'>\\n    <div class='card-body'><div class='list-group'></div></div>\\n  </div>\\n\"));\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.forEach(function (p) {\n    var showItem = !searchVal || p.type.toLowerCase().includes(searchVal.toLowerCase());\n    var displayStyle = showItem ? 'flex' : 'none';\n    var item = $(\"\\n    <div class='list-group-item placeholder-btn custom-placeholder'\\n      data-internal='\".concat(p.type, \"'\\n      data-display='\").concat(p.type, \"'\\n      style='display: \").concat(displayStyle, \";'>\\n      <i class='fas fa-star'></i>\\n      <span class=\\\"placeholder-text\\\">\").concat(p.type, \"</span>\\n      <i class='fas fa-info-circle accordion-info-icon' data-tooltip=\\\"Custom placeholder\\\"></i>\\n    </div>\\n  \"));\n    collapseDiv.find('.list-group').append(item);\n  });\n  card.append(collapseDiv);\n  return card;\n};\n\n/**\n * Creates a card header for a category\n * @param {string} categoryName - The name of the category\n * @param {string} sanitizedCategoryName - The sanitized name of the category\n * @param {string} accordionSelector - The CSS selector for the accordion\n * @returns {jQuery} The created card header\n */\nvar createCardHeader = function createCardHeader(categoryName, sanitizedCategoryName, accordionSelector) {\n  // Get the appropriate icon for the category\n  var iconClass = 'fas fa-folder';\n\n  // Map category names to appropriate icons\n  var categoryIcons = {\n    'People': 'fas fa-user',\n    'Places': 'fas fa-map-marker-alt',\n    'Animals': 'fas fa-paw',\n    'Things': 'fas fa-cube',\n    'Actions': 'fas fa-running',\n    'Emotions': 'fas fa-smile',\n    'Descriptions': 'fas fa-palette',\n    'Pronouns': 'fas fa-user-circle',\n    'Custom Placeholders': 'fas fa-star'\n  };\n  if (categoryIcons[categoryName]) {\n    iconClass = categoryIcons[categoryName];\n  }\n  return $(\"\\n    <div class='card-header' id='\".concat(sanitizedCategoryName, \"Heading'>\\n        <button class='btn btn-link collapsed' type='button' \\n            data-bs-toggle='collapse' data-bs-target='#\").concat(sanitizedCategoryName, \"Collapse'\\n            aria-expanded='true' aria-controls='\").concat(sanitizedCategoryName, \"Collapse'>\\n            <i class='\").concat(iconClass, \" me-2'></i> \").concat(categoryName, \"\\n            <i class='fas fa-chevron-down float-end mt-1'></i>\\n        </button>\\n    </div>\\n    \"));\n};\n\n/**\n * Creates a wrapper for secondary placeholders\n * @param {Array} secondaryItems - The secondary placeholder items\n * @param {string} searchVal - The current search value\n * @returns {jQuery} The created wrapper\n */\nvar createSecondaryPlaceholderWrapper = function createSecondaryPlaceholderWrapper(secondaryItems, searchVal) {\n  var hiddenWrapper = $(\"<div class='secondary-placeholder-wrapper'></div>\");\n  secondaryItems.forEach(function (p) {\n    return appendPlaceholderItem(hiddenWrapper, p, searchVal, true);\n  });\n  return hiddenWrapper;\n};\n\n/**\n * Creates a \"Show More\" toggle for a category\n * @param {string} sanitizedCategoryName - The sanitized name of the category\n * @returns {jQuery} The created toggle\n */\nvar createShowMoreToggle = function createShowMoreToggle(sanitizedCategoryName) {\n  return $(\"\\n  <div class='show-more-toggle' data-category='\".concat(sanitizedCategoryName, \"'>\\n    Show More\\n  </div>\\n\"));\n};\n\n/**\n * Updates the visibility of the \"Show More\" toggle based on search\n * @param {jQuery} collapseDiv - The collapse div\n * @param {string} searchVal - The current search value\n * @param {jQuery} secondaryPlaceholderWrapper - The secondary placeholder wrapper\n */\nvar updateShowMoreToggleVisibility = function updateShowMoreToggleVisibility(collapseDiv, searchVal, secondaryPlaceholderWrapper) {\n  var toggleLink = collapseDiv.find('.show-more-toggle');\n  if (!searchVal) {\n    secondaryPlaceholderWrapper.find('.secondary-placeholder').hide();\n    toggleLink.text('Show More');\n  } else {\n    var anySecondaryVisible = secondaryPlaceholderWrapper.find('.secondary-placeholder:visible').length > 0;\n    toggleLink.text(anySecondaryVisible ? 'Show Less' : 'Show More');\n  }\n};\n\n/**\n * Appends a placeholder item to a list group\n * @param {jQuery} listGroup - The list group to append to\n * @param {Object} placeholder - The placeholder to append\n * @param {string} searchVal - The current search value\n * @param {boolean} isSecondary - Whether this is a secondary placeholder\n */\nvar appendPlaceholderItem = function appendPlaceholderItem(listGroup, placeholder, searchVal) {\n  var isSecondary = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var showItem = !searchVal || placeholder.display.toLowerCase().includes(searchVal.toLowerCase());\n  var displayStyle = showItem ? 'flex' : 'none';\n  var item = $(\"\\n  <div class='list-group-item placeholder-btn\".concat(isSecondary ? ' secondary-placeholder' : '', \"'\\n    data-internal='\").concat(placeholder.internalType, \"'\\n    data-display='\").concat(placeholder.display, \"'\\n    style='display: \").concat(displayStyle, \";'>\\n    <i class='\").concat(placeholder.icon, \"'></i>\\n    <span class=\\\"placeholder-text\\\">\").concat(placeholder.display, \"</span>\\n    <i class='fas fa-info-circle accordion-info-icon' data-tooltip=\\\"\").concat(placeholder.tooltip, \"\\\"></i>\\n  </div>\\n\"));\n  listGroup.append(item);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderUI.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholders.js":
/*!***********************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholders.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERB_TENSES: () => (/* reexport safe */ _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_0__.VERB_TENSES),\n/* harmony export */   addCustomPlaceholder: () => (/* reexport safe */ _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__.addCustomPlaceholder),\n/* harmony export */   allPlaceholders: () => (/* reexport safe */ _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_0__.allPlaceholders),\n/* harmony export */   appendPlaceholderItem: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.appendPlaceholderItem),\n/* harmony export */   applyPlaceholderToAllOccurrences: () => (/* reexport safe */ _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__.applyPlaceholderToAllOccurrences),\n/* harmony export */   categoryOrder: () => (/* reexport safe */ _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_0__.categoryOrder),\n/* harmony export */   choosePronounTempValue: () => (/* reexport safe */ _pronounFunctions_js__WEBPACK_IMPORTED_MODULE_6__.choosePronounTempValue),\n/* harmony export */   createCardHeader: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.createCardHeader),\n/* harmony export */   createCustomPlaceholderCategoryCard: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.createCustomPlaceholderCategoryCard),\n/* harmony export */   createPlaceholderCategoryCard: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.createPlaceholderCategoryCard),\n/* harmony export */   createSecondaryPlaceholderWrapper: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.createSecondaryPlaceholderWrapper),\n/* harmony export */   createShowMoreToggle: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.createShowMoreToggle),\n/* harmony export */   duplicatePlaceholder: () => (/* reexport safe */ _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__.duplicatePlaceholder),\n/* harmony export */   ensureEditorFocus: () => (/* reexport safe */ _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.ensureEditorFocus),\n/* harmony export */   generateLegacyText: () => (/* reexport safe */ _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.generateLegacyText),\n/* harmony export */   initPlaceholders: () => (/* binding */ initPlaceholders),\n/* harmony export */   insertNodeAtCaret: () => (/* reexport safe */ _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.insertNodeAtCaret),\n/* harmony export */   insertPlaceholder: () => (/* reexport safe */ _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__.insertPlaceholder),\n/* harmony export */   insertPlaceholderFromCustom: () => (/* reexport safe */ _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__.insertPlaceholderFromCustom),\n/* harmony export */   insertPlaceholderSpan: () => (/* reexport safe */ _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.insertPlaceholderSpan),\n/* harmony export */   insertPronounPlaceholderSimple: () => (/* reexport safe */ _pronounFunctions_js__WEBPACK_IMPORTED_MODULE_6__.insertPronounPlaceholderSimple),\n/* harmony export */   pickPronounFormAndGroup: () => (/* reexport safe */ _pronounFunctions_js__WEBPACK_IMPORTED_MODULE_6__.pickPronounFormAndGroup),\n/* harmony export */   pickPronounGroup: () => (/* reexport safe */ _pronounFunctions_js__WEBPACK_IMPORTED_MODULE_6__.pickPronounGroup),\n/* harmony export */   showNounNumberSelection: () => (/* reexport safe */ _typeSelectionModals_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection),\n/* harmony export */   showPersonTypeSelection: () => (/* reexport safe */ _typeSelectionModals_js__WEBPACK_IMPORTED_MODULE_5__.showPersonTypeSelection),\n/* harmony export */   showVerbTenseSelection: () => (/* reexport safe */ _typeSelectionModals_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection),\n/* harmony export */   updateExistingPlaceholder: () => (/* reexport safe */ _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateExistingPlaceholder),\n/* harmony export */   updatePlaceholderAccordion: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.updatePlaceholderAccordion),\n/* harmony export */   updateShowMoreToggleVisibility: () => (/* reexport safe */ _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__.updateShowMoreToggleVisibility),\n/* harmony export */   updateVariablesFromEditor: () => (/* reexport safe */ _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateVariablesFromEditor),\n/* harmony export */   updateVariablesList: () => (/* reexport safe */ _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateVariablesList)\n/* harmony export */ });\n/* harmony import */ var _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./placeholderDefinitions.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDefinitions.js\");\n/* harmony import */ var _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./placeholderDOM.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDOM.js\");\n/* harmony import */ var _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderCreation.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderCreation.js\");\n/* harmony import */ var _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./placeholderManagement.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderManagement.js\");\n/* harmony import */ var _placeholderUI_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./placeholderUI.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderUI.js\");\n/* harmony import */ var _typeSelectionModals_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typeSelectionModals.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/typeSelectionModals.js\");\n/* harmony import */ var _pronounFunctions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pronounFunctions.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/pronounFunctions.js\");\n// public/js/core/placeholders.js\n\n// Import from new modules\n\n\n\n\n\n\n\n\n// Re-export all functionality\n\n\n/**\n * Initialize all placeholder-related components and events\n */\nvar initPlaceholders = function initPlaceholders() {\n  // Initialize new/existing placeholder toggle\n  $('#newPlaceholderToggle, #modalNewPlaceholderToggle').on('click', function () {\n    var isModal = $(this).attr('id').includes('modal');\n    var prefix = isModal ? 'modal' : '';\n\n    // Update active state\n    $(\"#\".concat(prefix, \"NewPlaceholderToggle\")).addClass('active');\n    $(\"#\".concat(prefix, \"ExistingPlaceholderToggle\")).removeClass('active');\n\n    // Show/hide views\n    $(\"#\".concat(prefix, \"NewPlaceholderView\")).show();\n    $(\"#\".concat(prefix, \"ExistingPlaceholderView\")).hide();\n  });\n  $('#existingPlaceholderToggle, #modalExistingPlaceholderToggle').on('click', function () {\n    var isModal = $(this).attr('id').includes('modal');\n    var prefix = isModal ? 'modal' : '';\n\n    // Update active state\n    $(\"#\".concat(prefix, \"NewPlaceholderToggle\")).removeClass('active');\n    $(\"#\".concat(prefix, \"ExistingPlaceholderToggle\")).addClass('active');\n\n    // Show/hide views\n    $(\"#\".concat(prefix, \"NewPlaceholderView\")).hide();\n    $(\"#\".concat(prefix, \"ExistingPlaceholderView\")).show();\n\n    // Force update of existing placeholder list\n    var accordionSelector = isModal ? '#modalExistingPlaceholderAccordion' : '#existingPlaceholderAccordion';\n    var noResultsSelector = isModal ? '#modalNoExistingResults' : '#noExistingResults';\n    var searchVal = isModal ? $('#modalExistingPlaceholderSearch').val() : $('#existingPlaceholderSearch').val();\n\n    // Import and call the function from existingPlaceholderUI.js\n    Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./existingPlaceholderUI.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/existingPlaceholderUI.js\")).then(function (module) {\n      module.updateExistingPlaceholderAccordion(accordionSelector, noResultsSelector, searchVal);\n    });\n  });\n\n  // Initialize placeholder search\n  $('#placeholderSearch, #modalPlaceholderSearch').on('input', function () {\n    var isModal = $(this).attr('id').includes('modal');\n    var searchVal = $(this).val();\n    var accordionSelector = isModal ? '#modalPlaceholderAccordion' : '#placeholderAccordion';\n    var noResultsSelector = isModal ? '#modalNoResults' : '#noResults';\n\n    // Use the same function for both main view and modal\n    Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./placeholderUI.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderUI.js\")).then(function (module) {\n      module.updatePlaceholderAccordion(accordionSelector, noResultsSelector, searchVal);\n    });\n  });\n\n  // Initialize existing placeholder search\n  $('#existingPlaceholderSearch, #modalExistingPlaceholderSearch').on('input', function () {\n    var isModal = $(this).attr('id').includes('modal');\n    var searchVal = $(this).val();\n    var accordionSelector = isModal ? '#modalExistingPlaceholderAccordion' : '#existingPlaceholderAccordion';\n    var noResultsSelector = isModal ? '#modalNoExistingResults' : '#noExistingResults';\n\n    // Use the same function for both main view and modal\n    Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./existingPlaceholderUI.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/existingPlaceholderUI.js\")).then(function (module) {\n      module.updateExistingPlaceholderAccordion(accordionSelector, noResultsSelector, searchVal);\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholders.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/pronounFunctions.js":
/*!***************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/pronounFunctions.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   choosePronounTempValue: () => (/* binding */ choosePronounTempValue),\n/* harmony export */   insertPronounPlaceholderSimple: () => (/* binding */ insertPronounPlaceholderSimple),\n/* harmony export */   pickPronounFormAndGroup: () => (/* binding */ pickPronounFormAndGroup),\n/* harmony export */   pickPronounGroup: () => (/* binding */ pickPronounGroup)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./placeholderDOM.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDOM.js\");\n/* harmony import */ var _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderManagement.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderManagement.js\");\n/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/StringUtils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/StringUtils.js\");\n\n\n\n\n\n\n/**\n * Gets the currently selected text from the editor\n * @returns {string} The selected text or an empty string\n */\nvar getSelectedText = function getSelectedText() {\n  // If we have a saved range, use that to get the selected text\n  if (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange && !_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.collapsed) {\n    return _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.toString().trim();\n  }\n  // Otherwise try to get the current selection\n  var sel = window.getSelection();\n  if (sel && sel.rangeCount && !sel.isCollapsed) {\n    return sel.toString().trim();\n  }\n  return \"\";\n};\n\n/**\n * Inserts a pronoun placeholder with a specified form\n * @param {string} groupId - The pronoun group ID\n * @param {string} form - The pronoun form (subject, object, etc.)\n * @param {string} tempValue - The temporary display value\n */\nvar insertPronounPlaceholderSimple = function insertPronounPlaceholderSimple(groupId, form, tempValue) {\n  var editor = document.getElementById(\"storyText\");\n  (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.ensureEditorFocus)();\n  var sel = window.getSelection();\n  var range = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange && editor.contains(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.commonAncestorContainer) ? _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange : sel.rangeCount ? sel.getRangeAt(0) : null;\n\n  // Check if we already have a selected text saved\n  var selectedText = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText || (range && !range.collapsed ? range.toString().trim() : \"\");\n  var groupNum = groupId.replace('PronounGroup', '');\n  var formAbbrevMap = {\n    subject: 'SUB',\n    object: 'OBJ',\n    possAdj: 'PSA',\n    possPron: 'PSP',\n    reflexive: 'REF'\n  };\n  var abbrev = formAbbrevMap[form] || form.toUpperCase();\n  var placeholderId = \"PRP\".concat(groupNum).concat(abbrev);\n  if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.some(function (v) {\n    return v.id === placeholderId;\n  })) {\n    var displayType = \"Person (\".concat(form, \")\");\n    _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.push({\n      id: placeholderId,\n      internalType: \"PRONOUN|\".concat(groupId, \"|\").concat(form),\n      officialDisplay: displayType,\n      display: displayType,\n      isCustom: false,\n      order: _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter++,\n      displayOverride: tempValue\n    });\n    (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_2__.updateVariablesList)();\n  }\n  (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_1__.insertPlaceholderSpan)(placeholderId, tempValue, range);\n\n  // After inserting, check if there are multiple instances of the selected text\n  if (selectedText) {\n    var _editor = document.getElementById(\"storyText\");\n    var editorContent = _editor.textContent;\n    var occurrences = (editorContent.match(new RegExp(\"\\\\b\".concat(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.escapeRegExp(selectedText), \"\\\\b\"), 'g')) || []).length;\n    if (occurrences > 1) {\n      Swal.fire({\n        title: 'Multiple occurrences found',\n        html: \"Found <strong>\".concat(occurrences, \"</strong> instances of \\\"<strong>\").concat(selectedText, \"</strong>\\\" in your story.<br>Would you like to replace all instances with this placeholder?\"),\n        icon: 'question',\n        showCancelButton: true,\n        confirmButtonText: 'Yes, replace all',\n        cancelButtonText: 'No, just this one',\n        footer: '<small>This is useful for replacing character names or recurring objects with placeholders</small>'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          // We need to import this function since it's normally in placeholderCreation.js\n          Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./placeholderCreation.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderCreation.js\")).then(function (module) {\n            module.applyPlaceholderToAllOccurrences(selectedText, placeholderId, tempValue);\n          });\n        }\n      });\n    }\n  }\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = ''; // Clear the saved text\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = null;\n};\n\n/**\n * Shows a modal to pick a pronoun form and group\n */\nvar pickPronounFormAndGroup = function pickPronounFormAndGroup() {\n  // Store the selected text before modal interactions cause selection to be lost\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = getSelectedText();\n  var forms = [{\n    value: 'subject',\n    text: 'Subject (he, she, they)'\n  }, {\n    value: 'object',\n    text: 'Object (him, her, them)'\n  }, {\n    value: 'possAdj',\n    text: 'Possessive Adj. (his, her, their)'\n  }, {\n    value: 'possPron',\n    text: 'Possessive Pron. (his, hers)'\n  }, {\n    value: 'reflexive',\n    text: 'Reflexive (himself, herself)'\n  }];\n  var html = \"<div class='list-group mb-2'>\";\n  forms.forEach(function (f) {\n    html += \"<button class='list-group-item list-group-item-action pronoun-form-btn' data-form='\".concat(f.value, \"'>\").concat(f.text, \"</button>\");\n  });\n  html += \"</div>\";\n  Swal.fire({\n    title: 'Pick a Pronoun Form',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      $(container).find('.pronoun-form-btn').on('click', function () {\n        var chosenForm = $(this).data('form');\n        Swal.close();\n        pickPronounGroup(chosenForm);\n      });\n    }\n  });\n};\n\n/**\n * Shows a modal to pick a pronoun group\n * @param {string} form - The pronoun form\n */\nvar pickPronounGroup = function pickPronounGroup(form) {\n  var groupKeys = Object.keys(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups);\n  var html = '';\n  if (groupKeys.length > 0) {\n    html += \"<h5>Existing Pronoun Groups</h5><div class='list-group mb-2'>\";\n    groupKeys.forEach(function (g) {\n      html += \"<button class='list-group-item list-group-item-action pronoun-group-btn' data-group='\".concat(g, \"'>\").concat(g, \"</button>\");\n    });\n    html += \"</div><hr>\";\n  }\n  html += \"<button class='btn btn-sm btn-outline-primary' id='createNewPronounGroupBtn'>Create New Group</button>\";\n  Swal.fire({\n    title: 'Pick a Pronoun Group',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      $(container).find('.pronoun-group-btn').on('click', function () {\n        var grp = $(this).data('group');\n        Swal.close();\n        if (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[grp] && _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[grp][form]) {\n          insertPronounPlaceholderSimple(grp, form, _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[grp][form]);\n        } else {\n          choosePronounTempValue(form, grp).then(function (tempValue) {\n            _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[grp] = _state_js__WEBPACK_IMPORTED_MODULE_0__.pronounMapping[tempValue] || {\n              subject: tempValue,\n              object: tempValue,\n              possAdj: tempValue,\n              possPron: tempValue,\n              reflexive: tempValue\n            };\n            insertPronounPlaceholderSimple(grp, form, _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[grp][form]);\n          });\n        }\n      });\n      $(container).find('#createNewPronounGroupBtn').on('click', function () {\n        _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount++;\n        var newGroup = \"PronounGroup\".concat(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount);\n        _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[newGroup] = {};\n        Swal.close();\n        choosePronounTempValue(form, newGroup).then(function (tempValue) {\n          _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[newGroup] = _state_js__WEBPACK_IMPORTED_MODULE_0__.pronounMapping[tempValue] || {\n            subject: tempValue,\n            object: tempValue,\n            possAdj: tempValue,\n            possPron: tempValue,\n            reflexive: tempValue\n          };\n          insertPronounPlaceholderSimple(newGroup, form, _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups[newGroup][form]);\n        });\n      });\n    }\n  });\n};\n\n/**\n * Prompts the user to choose a temporary pronoun value\n * @param {string} form - The pronoun form\n * @param {string} groupId - The pronoun group ID\n * @returns {Promise<string>} A promise that resolves with the chosen pronoun\n */\nvar choosePronounTempValue = function choosePronounTempValue(form, groupId) {\n  return Swal.fire({\n    title: 'Select Temporary Pronoun',\n    input: 'radio',\n    inputOptions: {\n      'He/Him': 'He/Him',\n      'She/Her': 'She/Her',\n      'They/Them': 'They/Them',\n      'Custom': 'Custom'\n    },\n    inputValidator: function inputValidator(value) {\n      if (!value) return 'You need to choose an option!';\n    }\n  }).then(function (result) {\n    if (result.value === 'Custom') {\n      return Swal.fire({\n        title: 'Enter custom temporary pronoun',\n        input: 'text',\n        inputLabel: 'Temporary pronoun',\n        inputValue: form,\n        showCancelButton: true\n      }).then(function (res) {\n        return res.value || form;\n      });\n    } else {\n      return result.value;\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/pronounFunctions.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js":
/*!****************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   pronounMapping: () => (/* binding */ pronounMapping),\n/* harmony export */   resetState: () => (/* binding */ resetState)\n/* harmony export */ });\n// public/js/core/state.js\n\n// Central state object for the application\nvar state = {\n  // Editor state\n  lastRange: null,\n  lastSelectedText: '',\n  // Story state\n  storyText: '',\n  fillValues: {},\n  fillOrder: 'alphabetical',\n  // or 'random'\n  storyHasUnsavedChanges: false,\n  // Placeholder state\n  variables: [],\n  variableCounts: {},\n  insertionCounter: 0,\n  usageTracker: {},\n  // Tracks how many times each placeholder is used\n  // Custom placeholders\n  customPlaceholders: [],\n  // Pronoun groups\n  pronounGroupCount: 0,\n  pronounGroups: {},\n  // Search state\n  currentPlaceholderSearch: '',\n  currentModalPlaceholderSearch: '',\n  // Placeholder editing\n  isEditingPlaceholder: false,\n  currentEditingVariable: null,\n  // Current story metadata\n  currentStoryId: null,\n  // NEW: Chapter-related state\n  chapters: [],\n  currentChapter: 0,\n  allChapters: null,\n  // Used for play mode to store all chapters\n  storyTitle: '',\n  storyAuthor: ''\n};\n\n// Initialize state\nfunction initState() {\n  console.log(\"Initializing state\");\n\n  // Create arrays if they don't exist\n  if (!state.variables) {\n    state.variables = [];\n  }\n  if (!state.usageTracker) {\n    state.usageTracker = {};\n  }\n  if (!state.customPlaceholders) {\n    state.customPlaceholders = [];\n  }\n  if (!state.chapters) {\n    state.chapters = [];\n  }\n  console.log(\"State initialized:\", state);\n}\n\n// Run initialization\ninitState();\n\n// Export the state object as default export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (state);\n\n// Predefined pronoun mappings\nvar pronounMapping = {\n  \"He/Him\": {\n    subject: \"he\",\n    object: \"him\",\n    possAdj: \"his\",\n    possPron: \"his\",\n    reflexive: \"himself\"\n  },\n  \"She/Her\": {\n    subject: \"she\",\n    object: \"her\",\n    possAdj: \"her\",\n    possPron: \"hers\",\n    reflexive: \"herself\"\n  },\n  \"They/Them\": {\n    subject: \"they\",\n    object: \"them\",\n    possAdj: \"their\",\n    possPron: \"theirs\",\n    reflexive: \"themselves\"\n  }\n};\n\n// Function to reset state to initial values\nfunction resetState() {\n  state.variables = [];\n  state.variableCounts = {};\n  state.insertionCounter = 0;\n  state.storyText = '';\n  state.customPlaceholders = [];\n  state.fillValues = {};\n  state.pronounGroups = {};\n  state.pronounGroupCount = 0;\n  state.lastRange = null;\n  state.lastSelectedText = '';\n  state.usageTracker = {};\n  state.placeholderInsertionInProgress = false;\n  state.storyHasUnsavedChanges = false;\n  state.fillOrder = 'alphabetical';\n  state.currentStoryId = null;\n  state.currentPlaceholderSearch = '';\n  state.currentModalPlaceholderSearch = '';\n  state.currentEditingVariable = null;\n  state.currentPlaceholderElement = null;\n  state.isEditingPlaceholder = false;\n\n  // NEW: Reset chapter-related state\n  state.chapters = [];\n  state.currentChapter = 0;\n  state.allChapters = null;\n  state.storyTitle = '';\n  state.storyAuthor = '';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/storyProcessor.js":
/*!*************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/storyProcessor.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFilenameFromTitle: () => (/* binding */ createFilenameFromTitle),\n/* harmony export */   fillPlaceholders: () => (/* binding */ fillPlaceholders),\n/* harmony export */   formatStoryForExport: () => (/* binding */ formatStoryForExport),\n/* harmony export */   loadStoryIntoEditor: () => (/* binding */ loadStoryIntoEditor),\n/* harmony export */   parseStoryFile: () => (/* binding */ parseStoryFile),\n/* harmony export */   resetStoryState: () => (/* binding */ resetStoryState)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _placeholders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./placeholders.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholders.js\");\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// public/js/core/storyProcessor.js\n\n\n\n/**\r\n * Functions for processing and manipulating story text\r\n */\n\n// Fill in placeholders with user-provided values\nvar fillPlaceholders = function fillPlaceholders(templateText, variables, fillValues, pronounGroups) {\n  console.log(\"========== FILLING PLACEHOLDERS ==========\");\n  console.log(\"Input templateText length:\", (templateText === null || templateText === void 0 ? void 0 : templateText.length) || 0);\n  console.log(\"Available variables:\", (variables === null || variables === void 0 ? void 0 : variables.length) || 0);\n  console.log(\"Fill values:\", fillValues);\n  console.log(\"Placeholder text:\", templateText);\n  if (!templateText) return '';\n\n  // Extract all placeholders from the text\n  var placeholderRegex = /\\{([^}]+)\\}/g;\n  var placeholders = [];\n  var match;\n  while ((match = placeholderRegex.exec(templateText)) !== null) {\n    placeholders.push({\n      fullMatch: match[0],\n      id: match[1]\n    });\n  }\n  console.log(\"Extracted placeholders:\", placeholders.length);\n  placeholders.forEach(function (p) {\n    return console.log(\"- \".concat(p.fullMatch, \" (ID: \").concat(p.id, \")\"));\n  });\n  var result = templateText;\n\n  // First pass: process placeholders with explicit variables\n  var _iterator = _createForOfIteratorHelper(variables),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var variable = _step.value;\n      var placeholder = \"{\".concat(variable.id, \"}\");\n      if (result.includes(placeholder)) {\n        console.log(\"Processing \".concat(placeholder, \"...\"));\n\n        // Handle pronouns specially\n        if (variable.internalType.startsWith('PRONOUN|')) {\n          var parts = variable.internalType.split('|');\n          var groupId = parts[1];\n          var form = parts[2];\n          console.log(\"  Handling pronoun: groupId=\".concat(groupId, \", form=\").concat(form));\n          if (pronounGroups && pronounGroups[groupId] && pronounGroups[groupId][form]) {\n            var pronounValue = pronounGroups[groupId][form];\n            console.log(\"  Found pronoun value: \\\"\".concat(pronounValue, \"\\\"\"));\n            result = result.replace(new RegExp(placeholder, 'g'), pronounValue);\n          } else {\n            console.warn(\"  WARNING: No pronoun value found for group \".concat(groupId, \" form \").concat(form));\n            result = result.replace(new RegExp(placeholder, 'g'), variable.displayOverride || variable.display || '[MISSING PRONOUN]');\n          }\n        }\n        // Handle regular variables\n        else if (fillValues && fillValues[variable.id]) {\n          console.log(\"  Replacing with user-provided value: \\\"\".concat(fillValues[variable.id], \"\\\"\"));\n          result = result.replace(new RegExp(placeholder, 'g'), fillValues[variable.id]);\n        } else {\n          console.warn(\"  WARNING: No fill value for \".concat(variable.id));\n          result = result.replace(new RegExp(placeholder, 'g'), variable.displayOverride || '[MISSING VALUE]');\n        }\n      } else {\n        console.log(\"Placeholder {\".concat(variable.id, \"} not found in text\"));\n      }\n    }\n\n    // Second pass: Check for any remaining placeholders not in the variables list\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var remainingMatch;\n  var remainingRegex = /\\{([^}]+)\\}/g;\n  while ((remainingMatch = remainingRegex.exec(result)) !== null) {\n    var missingId = remainingMatch[1];\n    console.warn(\"WARNING: Found placeholder {\".concat(missingId, \"} that wasn't in the variables list!\"));\n\n    // Try to directly replace from fillValues as a last resort\n    if (fillValues && fillValues[missingId]) {\n      console.log(\"  Replacing directly from fillValues with: \\\"\".concat(fillValues[missingId], \"\\\"\"));\n      result = result.replace(new RegExp(\"\\\\{\".concat(missingId, \"\\\\}\"), 'g'), fillValues[missingId]);\n    } else {\n      console.error(\"  ERROR: No value available for placeholder {\".concat(missingId, \"}\"));\n    }\n  }\n  console.log(\"Final text after replacements:\", result);\n  return result;\n};\n\n// Parse uploaded story text file\nvar parseStoryFile = function parseStoryFile(content) {\n  var titleMatch = content.match(/^Title:\\s*(.*)$/m);\n  var authorMatch = content.match(/^Author:\\s*(.*)$/m);\n  var storyStartIndex = content.indexOf('\\n\\n');\n  var storyContent = storyStartIndex !== -1 ? content.substring(storyStartIndex + 2) : content;\n  return {\n    title: titleMatch ? titleMatch[1] : '',\n    author: authorMatch ? authorMatch[1] : '',\n    content: storyContent\n  };\n};\n\n// Format story for export/download\nvar formatStoryForExport = function formatStoryForExport(title, author, content) {\n  return \"Title: \".concat(title, \"\\nAuthor: \").concat(author, \"\\n\\n\").concat(content);\n};\n\n// Create download filename from title\nvar createFilenameFromTitle = function createFilenameFromTitle(title) {\n  return title ? title.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '.txt' : 'story.txt';\n};\n\n// Reset story state for a new story\nvar resetStoryState = function resetStoryState() {\n  // Clear DOM fields\n  $('#storyTitle').val('');\n  $('#storyAuthor').val('');\n  $('#storyText').html('');\n  $('#storyTags').val('');\n\n  // Reset state variables\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = [];\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter = 0;\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders = [];\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups = {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount = 0;\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges = false;\n\n  // Show editor view\n  $('#editor').removeClass('d-none');\n  $('#inputs, #result').addClass('d-none');\n\n  // Update UI\n  (0,_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesFromEditor)();\n};\n\n// Load story data into the editor\nvar loadStoryIntoEditor = function loadStoryIntoEditor(storyData) {\n  $('#storyTitle').val(storyData.title || '');\n  $('#storyAuthor').val(storyData.author || '');\n  $('#storyText').html(storyData.content || '');\n  $('#storyTags').val(storyData.tags ? storyData.tags.join(', ') : '');\n\n  // Reset state with the loaded story's data\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = storyData.variables || [];\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = storyData.variableCounts || {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter = 0;\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders = storyData.customPlaceholders || [];\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = storyData.fillValues || {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups = storyData.pronounGroups || {};\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount = storyData.pronounGroupCount || 0;\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges = false;\n\n  // Update UI based on the loaded story\n  (0,_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesFromEditor)();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/storyProcessor.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/core/typeSelectionModals.js":
/*!******************************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/core/typeSelectionModals.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   showNounNumberSelection: () => (/* binding */ showNounNumberSelection),\n/* harmony export */   showPersonTypeSelection: () => (/* binding */ showPersonTypeSelection),\n/* harmony export */   showVerbTenseSelection: () => (/* binding */ showVerbTenseSelection)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/typeHelpers.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/typeHelpers.js\");\n/* harmony import */ var _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderDefinitions.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderDefinitions.js\");\n/* harmony import */ var _placeholderCreation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./placeholderCreation.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderCreation.js\");\n/* harmony import */ var _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./placeholderManagement.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholderManagement.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n\n/**\n * Gets the currently selected text from the editor\n * @returns {string} The selected text or an empty string\n */\nvar getSelectedText = function getSelectedText() {\n  // If we have a saved range, use that to get the selected text\n  if (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange && !_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.collapsed) {\n    return _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.toString().trim();\n  }\n  // Otherwise try to get the current selection\n  var sel = window.getSelection();\n  if (sel && sel.rangeCount && !sel.isCollapsed) {\n    return sel.toString().trim();\n  }\n  return \"\";\n};\n\n/**\n * Shows a modal for selecting person type\n * @param {string} baseInternal - The base internal type\n * @param {string} baseDisplay - The base display name\n */\nvar showPersonTypeSelection = function showPersonTypeSelection(baseInternal, baseDisplay) {\n  // Store selected text before modal interactions cause selection to be lost\n  var selectedText = getSelectedText();\n  var html = \"<div class='list-group'>\\n  <button class='list-group-item list-group-item-action person-type-btn' data-type='common'>\\n    Common (e.g., doctor)\\n  </button>\\n  <button class='list-group-item list-group-item-action person-type-btn' data-type='proper'>\\n    Proper (e.g., Donald Trump)\\n  </button>\\n</div>\";\n  Swal.fire({\n    title: 'Select Person Type',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    allowOutsideClick: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      $(container).find('.person-type-btn').on('click', function () {\n        var selectedType = $(this).data('type'); // \"common\" or \"proper\"\n        var updatedBaseInternal, updatedBaseDisplay;\n        if (selectedType === \"proper\") {\n          updatedBaseInternal = \"NNP_Person\";\n          updatedBaseDisplay = \"Proper \" + baseDisplay;\n        } else {\n          updatedBaseInternal = \"NN_Person\";\n          updatedBaseDisplay = \"Common \" + baseDisplay;\n        }\n        // Close the current modal...\n        Swal.close();\n        // ...and use a small timeout to ensure it's fully closed before showing the next modal.\n        setTimeout(function () {\n          // Pass along the selected text to the next modal\n          showNounNumberSelection(updatedBaseInternal, updatedBaseDisplay, selectedText);\n        }, 100);\n      });\n    }\n  });\n};\n\n/**\n * Shows a modal for selecting noun number\n * @param {string} baseInternal - The base internal type\n * @param {string} baseDisplay - The base display name\n * @param {string} [selectedText=''] - The selected text from the editor\n */\nvar showNounNumberSelection = function showNounNumberSelection(baseInternal, baseDisplay) {\n  var selectedText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  // If selectedText wasn't passed, try to get it now\n  if (!selectedText) {\n    selectedText = getSelectedText();\n  }\n  var html = \"<div class='list-group'>\";\n  ['Singular', 'Plural'].forEach(function (f) {\n    html += \"<button class='list-group-item list-group-item-action noun-number-btn' data-form='\".concat(f, \"'>\").concat(f, \"</button>\");\n  });\n  html += \"</div>\";\n  Swal.fire({\n    title: 'Select Number',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      $(container).find('.noun-number-btn').on('click', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var selected, finalInternal, finalDisplay;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              selected = $(this).data('form');\n              finalInternal = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.getNounFinalType(baseInternal, selected);\n              finalDisplay = \"\".concat(baseDisplay, \" (\").concat(selected, \")\");\n              if (!(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder && _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable)) {\n                _context.next = 10;\n                break;\n              }\n              (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_4__.updateExistingPlaceholder)(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable, finalInternal, finalDisplay);\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder = false;\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = null;\n              Swal.close();\n              _context.next = 15;\n              break;\n            case 10:\n              // Preserve the selected text by saving it to state.lastSelectedText\n              if (selectedText) {\n                _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = selectedText;\n              }\n              _context.next = 13;\n              return (0,_placeholderCreation_js__WEBPACK_IMPORTED_MODULE_3__.insertPlaceholder)(finalInternal, finalDisplay, false);\n            case 13:\n              // Clear the temporary state to avoid affecting future placeholder additions\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n              Swal.close();\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      })));\n    }\n  });\n};\n\n/**\n * Shows a modal for selecting verb tense\n * @param {string} baseInternal - The base internal type\n * @param {string} baseDisplay - The base display name\n * @param {string} [selectedText=''] - The selected text from the editor\n */\nvar showVerbTenseSelection = function showVerbTenseSelection(baseInternal, baseDisplay) {\n  var selectedText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  // If selectedText wasn't passed, try to get it now\n  if (!selectedText) {\n    selectedText = getSelectedText();\n  }\n  var html = \"<div class='list-group'>\";\n  _placeholderDefinitions_js__WEBPACK_IMPORTED_MODULE_2__.VERB_TENSES.forEach(function (t) {\n    html += \"<button class='list-group-item list-group-item-action verb-tense-btn' data-tense='\".concat(t.value, \"' data-text='\").concat(t.text, \"'>\").concat(t.text, \"</button>\");\n  });\n  html += \"</div>\";\n  Swal.fire({\n    title: 'Select Verb Tense',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      $(container).find('.verb-tense-btn').on('click', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var selectedTense, tenseText, finalInternal, finalDisplay;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              selectedTense = $(this).data('tense');\n              tenseText = $(this).data('text');\n              finalInternal = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__.TypeHelpers.computeFinalVerbType(baseInternal, selectedTense);\n              finalDisplay = \"\".concat(baseDisplay, \" (\").concat(tenseText, \")\");\n              if (!(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder && _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable)) {\n                _context2.next = 11;\n                break;\n              }\n              (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_4__.updateExistingPlaceholder)(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable, finalInternal, finalDisplay);\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder = false;\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = null;\n              Swal.close();\n              _context2.next = 16;\n              break;\n            case 11:\n              // Preserve the selected text by saving it to state.lastSelectedText\n              if (selectedText) {\n                _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = selectedText;\n              }\n              _context2.next = 14;\n              return (0,_placeholderCreation_js__WEBPACK_IMPORTED_MODULE_3__.insertPlaceholder)(finalInternal, finalDisplay, false);\n            case 14:\n              // Clear the temporary state to avoid affecting future placeholder additions\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n              Swal.close();\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      })));\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/core/typeSelectionModals.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/data/storage.js":
/*!******************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/data/storage.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Storage: () => (/* binding */ Storage)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/placeholders.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholders.js\");\n/* harmony import */ var _ui_forms_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/forms.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/ui/forms.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/utils.js\");\n// public/js/data/storage.js\n\n\n\n\n\n// Define the base URL for all API calls - UPDATED to be dynamic\nvar API_BASE_URL = function () {\n  // If we're running on localhost with a specific port, use it with port 3000\n  if (window.location.hostname === 'localhost') {\n    return 'http://localhost:3000';\n  }\n  // For all other cases (production), use the same origin with correct port\n  return \"\".concat(window.location.protocol, \"//\").concat(window.location.hostname, \":3000\");\n}();\nconsole.log(\"Using API base URL: \".concat(API_BASE_URL));\nvar Storage = {\n  handleAjaxError: function handleAjaxError(xhr, statusText, errorThrown, customErrorMessage) {\n    var errorMessage = customErrorMessage || 'Failed to perform action';\n    if (xhr.status) {\n      errorMessage += \". Server responded with status: \".concat(xhr.status, \" \").concat(xhr.statusText);\n    } else if (statusText) {\n      errorMessage += \". Status text: \".concat(statusText);\n    } else if (errorThrown) {\n      errorMessage += \". Error: \".concat(errorThrown);\n    }\n    Swal.fire('Error', errorMessage, 'error');\n    console.error(\"AJAX Error:\", errorMessage, xhr);\n  },\n  addCurrentStoryToSavedStories: function addCurrentStoryToSavedStories() {\n    Swal.fire({\n      title: 'Save Story',\n      html: \"\\n              <input type=\\\"text\\\" id=\\\"swalTitle\\\" class=\\\"swal2-input\\\" placeholder=\\\"Story Title\\\" value=\\\"\".concat($('#storyTitle').val(), \"\\\">\\n              <input type=\\\"text\\\" id=\\\"swalAuthor\\\" class=\\\"swal2-input\\\" placeholder=\\\"Author\\\" value=\\\"\").concat($('#storyAuthor').val(), \"\\\">\\n              <input type=\\\"text\\\" id=\\\"swalTags\\\" class=\\\"swal2-input\\\" placeholder=\\\"Tags (comma separated)\\\" value=\\\"\").concat($('#storyTags').val(), \"\\\">\\n              <input type=\\\"password\\\" id=\\\"swalPassword\\\" class=\\\"swal2-input\\\" placeholder=\\\"Password (optional)\\\">\\n              <div id=\\\"preexistingTagsContainer\\\" style=\\\"text-align:left; margin-top:10px;\\\"></div>\\n            \"),\n      didOpen: function didOpen() {\n        // We need to import and call loadPreexistingTags from events.js\n        // This requires proper module handling\n        var container = $('#preexistingTagsContainer');\n        $.ajax({\n          url: \"\".concat(API_BASE_URL, \"/api/gettags\"),\n          method: 'GET',\n          success: function success(tags) {\n            container.empty();\n            if (tags.length > 0) {\n              container.append('<p>Select a tag:</p>');\n              tags.forEach(function (tag) {\n                var btn = $('<button type=\"button\" class=\"btn btn-sm btn-outline-secondary m-1 preexisting-tag-btn\"></button>');\n                btn.text(tag);\n                btn.on('click', function () {\n                  var current = $('#swalTags').val();\n                  var tagsArr = current ? current.split(',').map(function (t) {\n                    return t.trim();\n                  }).filter(Boolean) : [];\n                  if (!tagsArr.includes(tag)) {\n                    tagsArr.push(tag);\n                    $('#swalTags').val(tagsArr.join(', '));\n                  }\n                });\n                container.append(btn);\n              });\n            }\n          },\n          error: function error(err) {\n            console.error('Failed to load preexisting tags', err);\n          }\n        });\n      },\n      showCancelButton: true,\n      confirmButtonText: 'Save',\n      preConfirm: function preConfirm() {\n        return {\n          title: document.getElementById('swalTitle').value,\n          author: document.getElementById('swalAuthor').value,\n          tags: document.getElementById('swalTags').value,\n          password: document.getElementById('swalPassword').value\n        };\n      }\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        var data = result.value;\n        // Update fields in the editor\n        $('#storyTitle').val(data.title);\n        $('#storyAuthor').val(data.author);\n        $('#storyTags').val(data.tags);\n        var story = {\n          storyTitle: data.title,\n          storyAuthor: data.author,\n          storyText: $('#storyText').html(),\n          variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n          pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups,\n          variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts,\n          pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount,\n          customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders,\n          tags: data.tags ? data.tags.split(',').map(function (s) {\n            return s.trim();\n          }) : [],\n          savedAt: new Date().toISOString(),\n          password: data.password && data.password.trim() !== '' ? data.password : null,\n          // Add chapters array and current chapter if they exist in state\n          chapters: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters || [],\n          currentChapter: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter || 0\n        };\n        $.ajax({\n          url: \"\".concat(API_BASE_URL, \"/api/savestory\"),\n          method: 'POST',\n          contentType: 'application/json',\n          data: JSON.stringify(story),\n          success: function success() {\n            Swal.fire({\n              toast: true,\n              position: 'top-end',\n              icon: 'success',\n              title: 'Story saved to site!',\n              showConfirmButton: false,\n              timer: 1500\n            });\n          },\n          error: function error(xhr, statusText, errorThrown) {\n            if (xhr.status === 409) {\n              Swal.fire({\n                title: 'Story exists',\n                text: 'A story with this title already exists. Overwrite?',\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'Yes, overwrite',\n                cancelButtonText: 'No'\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  // Create a new story object with the overwrite flag\n                  var storyWithOverwrite = {\n                    storyTitle: $('#storyTitle').val(),\n                    storyAuthor: $('#storyAuthor').val(),\n                    storyText: $('#storyText').html(),\n                    variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n                    pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups,\n                    variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts,\n                    pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount,\n                    customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders,\n                    tags: $('#storyTags').val() ? $('#storyTags').val().split(',').map(function (s) {\n                      return s.trim();\n                    }) : [],\n                    savedAt: new Date().toISOString(),\n                    password: null,\n                    overwrite: true,\n                    // Add the overwrite flag\n                    // Add chapters array and current chapter if they exist in state\n                    chapters: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters || [],\n                    currentChapter: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter || 0\n                  };\n                  $.ajax({\n                    url: \"\".concat(API_BASE_URL, \"/api/savestory\"),\n                    method: 'POST',\n                    contentType: 'application/json',\n                    data: JSON.stringify(storyWithOverwrite),\n                    success: function success() {\n                      Swal.fire({\n                        toast: true,\n                        position: 'top-end',\n                        icon: 'success',\n                        title: 'Story overwritten!',\n                        showConfirmButton: false,\n                        timer: 1500\n                      });\n                    },\n                    error: function error(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite) {\n                      Storage.handleAjaxError(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite, 'Failed to overwrite story');\n                    }\n                  });\n                }\n              });\n            } else {\n              Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to save story');\n            }\n          }\n        });\n      }\n    });\n  },\n  // NEW: Add a chapter to the current story\n  addChapterToCurrentStory: function addChapterToCurrentStory() {\n    var _state$chapters, _state$chapters2;\n    // First check if we have a story ID\n    if (!_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId) {\n      Swal.fire({\n        title: 'No Story Selected',\n        text: 'You need to save the story first before adding chapters.',\n        icon: 'warning'\n      });\n      return;\n    }\n    Swal.fire({\n      title: 'Add New Chapter',\n      html: \"\\n              <input type=\\\"text\\\" id=\\\"swalChapterTitle\\\" class=\\\"swal2-input\\\" placeholder=\\\"Chapter Title\\\" value=\\\"Chapter \".concat((((_state$chapters = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters) === null || _state$chapters === void 0 ? void 0 : _state$chapters.length) || 0) + 1, \"\\\">\\n              <input type=\\\"number\\\" id=\\\"swalChapterNumber\\\" class=\\\"swal2-input\\\" placeholder=\\\"Chapter Number\\\" value=\\\"\").concat((((_state$chapters2 = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters) === null || _state$chapters2 === void 0 ? void 0 : _state$chapters2.length) || 0) + 1, \"\\\">\\n            \"),\n      showCancelButton: true,\n      confirmButtonText: 'Add Chapter',\n      preConfirm: function preConfirm() {\n        return {\n          chapterTitle: document.getElementById('swalChapterTitle').value,\n          chapterNumber: document.getElementById('swalChapterNumber').value\n        };\n      }\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        var data = result.value;\n\n        // Create a new chapter\n        var chapter = {\n          storyTitle: $('#storyTitle').val(),\n          chapterTitle: data.chapterTitle,\n          chapterNumber: parseInt(data.chapterNumber),\n          chapterText: '',\n          // Start with an empty chapter\n          variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n          // Inherit variables from current story/chapter\n          fillValues: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues || {},\n          pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups || {},\n          variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts || {},\n          customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders || [],\n          pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount || 0\n        };\n        $.ajax({\n          url: \"\".concat(API_BASE_URL, \"/api/savechapter\"),\n          method: 'POST',\n          contentType: 'application/json',\n          data: JSON.stringify(chapter),\n          success: function success(response) {\n            // Update state with the new chapter information\n            _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters = response.story.chapters || [];\n            _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter = parseInt(data.chapterNumber);\n\n            // Update the UI to show the new chapter\n            Storage.loadChapter(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter);\n\n            // Update chapter selection dropdown\n            Storage.updateChapterSelector();\n            Swal.fire({\n              toast: true,\n              position: 'top-end',\n              icon: 'success',\n              title: 'New chapter added!',\n              showConfirmButton: false,\n              timer: 1500\n            });\n          },\n          error: function error(xhr, statusText, errorThrown) {\n            Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to add new chapter');\n          }\n        });\n      }\n    });\n  },\n  // NEW: Load a specific chapter\n  loadChapter: function loadChapter(storyId, chapterNumber) {\n    $.ajax({\n      url: \"\".concat(API_BASE_URL, \"/api/getchapter?storyId=\").concat(storyId, \"&chapterNumber=\").concat(chapterNumber),\n      method: 'GET',\n      success: function success(chapter) {\n        // Update the editor with the chapter content\n        if (parseInt(chapterNumber) === 0) {\n          // This is the main story\n          $('#storyTitle').val(chapter.chapterTitle);\n          $('#chapterTitle').val(''); // No chapter title for main story\n        } else {\n          $('#chapterTitle').val(chapter.chapterTitle);\n        }\n        $('#storyText').html((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.decodeHTMLEntities)(chapter.chapterText));\n\n        // Update state with chapter data\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = chapter.variables || [];\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = chapter.fillValues || {};\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups = chapter.pronounGroups || {};\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = chapter.variableCounts || {};\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders = chapter.customPlaceholders || [];\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount = chapter.pronounGroupCount || 0;\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter = parseInt(chapterNumber);\n\n        // Re-scan the editor to update variables\n        (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesFromEditor)();\n\n        // Update chapter selection dropdown\n        Storage.updateChapterSelector();\n        Swal.fire({\n          toast: true,\n          position: 'top-end',\n          icon: 'success',\n          title: \"\".concat(parseInt(chapterNumber) === 0 ? 'Main story' : 'Chapter ' + chapterNumber, \" loaded!\"),\n          showConfirmButton: false,\n          timer: 1500\n        });\n      },\n      error: function error(xhr, statusText, errorThrown) {\n        Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to load chapter');\n      }\n    });\n  },\n  // NEW: Save the current chapter\n  saveCurrentChapter: function saveCurrentChapter() {\n    if (!_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId) {\n      Swal.fire({\n        title: 'No Story Selected',\n        text: 'You need to save the story first before saving chapters.',\n        icon: 'warning'\n      });\n      return;\n    }\n    var chapterData = {\n      storyTitle: $('#storyTitle').val(),\n      chapterTitle: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter === 0 ? $('#storyTitle').val() : $('#chapterTitle').val(),\n      chapterNumber: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter,\n      chapterText: $('#storyText').html(),\n      variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n      fillValues: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues || {},\n      pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups || {},\n      variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts || {},\n      customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders || [],\n      pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount || 0\n    };\n    $.ajax({\n      url: \"\".concat(API_BASE_URL, \"/api/savechapter\"),\n      method: 'POST',\n      contentType: 'application/json',\n      data: JSON.stringify(chapterData),\n      success: function success(response) {\n        // Update state with updated chapters\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters = response.story.chapters || [];\n        Swal.fire({\n          toast: true,\n          position: 'top-end',\n          icon: 'success',\n          title: \"\".concat(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter === 0 ? 'Main story' : 'Chapter ' + _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter, \" saved!\"),\n          showConfirmButton: false,\n          timer: 1500\n        });\n      },\n      error: function error(xhr, statusText, errorThrown) {\n        Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to save chapter');\n      }\n    });\n  },\n  // NEW: Delete a chapter\n  deleteChapter: function deleteChapter(storyId, chapterNumber) {\n    if (parseInt(chapterNumber) === 0) {\n      Swal.fire({\n        title: 'Cannot Delete Main Story',\n        text: 'You cannot delete the main story. Delete the entire story instead.',\n        icon: 'warning'\n      });\n      return;\n    }\n    Swal.fire({\n      title: 'Delete Chapter',\n      text: \"Are you sure you want to delete Chapter \".concat(chapterNumber, \"?\"),\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it',\n      cancelButtonText: 'Cancel'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        $.ajax({\n          url: \"\".concat(API_BASE_URL, \"/api/deletechapter\"),\n          method: 'DELETE',\n          contentType: 'application/json',\n          data: JSON.stringify({\n            storyId: storyId,\n            chapterNumber: chapterNumber\n          }),\n          success: function success(response) {\n            // Update state with updated chapters\n            _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters = response.story.chapters || [];\n            _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter = response.story.currentChapter;\n\n            // Load the current chapter\n            Storage.loadChapter(storyId, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter);\n\n            // Update chapter selection dropdown\n            Storage.updateChapterSelector();\n            Swal.fire({\n              toast: true,\n              position: 'top-end',\n              icon: 'success',\n              title: 'Chapter deleted!',\n              showConfirmButton: false,\n              timer: 1500\n            });\n          },\n          error: function error(xhr, statusText, errorThrown) {\n            Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to delete chapter');\n          }\n        });\n      }\n    });\n  },\n  // NEW: Update the chapter selector dropdown\n  updateChapterSelector: function updateChapterSelector() {\n    var $chapterSelector = $('#chapterSelector');\n    if (!$chapterSelector.length) {\n      console.error('Chapter selector not found in the DOM');\n      return;\n    }\n    $chapterSelector.empty();\n\n    // Add main story option\n    $chapterSelector.append($('<option></option>').val(0).text('Main Story').prop('selected', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter === 0));\n\n    // Add chapter options\n    if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters && _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters.length > 0) {\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters.forEach(function (chapter) {\n        $chapterSelector.append($('<option></option>').val(chapter.chapterNumber).text(\"Chapter \".concat(chapter.chapterNumber, \": \").concat(chapter.chapterTitle)).prop('selected', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter === chapter.chapterNumber));\n      });\n    }\n  },\n  addCompletedStoryToSavedStories: function addCompletedStoryToSavedStories() {\n    Swal.fire({\n      title: 'Save Completed Story',\n      html: \"\\n              <input type=\\\"text\\\" id=\\\"swalTitle\\\" class=\\\"swal2-input\\\" placeholder=\\\"Story Title\\\" value=\\\"\".concat($('#displayTitle').text(), \"\\\">\\n              <input type=\\\"text\\\" id=\\\"swalAuthor\\\" class=\\\"swal2-input\\\" placeholder=\\\"Author\\\" value=\\\"\").concat($('#displayAuthor').text(), \"\\\">\\n              <input type=\\\"text\\\" id=\\\"swalTags\\\" class=\\\"swal2-input\\\" placeholder=\\\"Tags (comma separated)\\\" value=\\\"\").concat($('#displayTags').text(), \"\\\">\\n              <input type=\\\"password\\\" id=\\\"swalPassword\\\" class=\\\"swal2-input\\\" placeholder=\\\"Password (optional)\\\">\\n              <div id=\\\"preexistingTagsContainer\\\" style=\\\"text-align:left; margin-top:10px;\\\"></div>\\n            \"),\n      didOpen: function didOpen() {\n        // We need to import and call loadPreexistingTags from events.js\n        // This requires proper module handling\n        var container = $('#preexistingTagsContainer');\n        $.ajax({\n          url: \"\".concat(API_BASE_URL, \"/api/gettags\"),\n          method: 'GET',\n          success: function success(tags) {\n            container.empty();\n            if (tags.length > 0) {\n              container.append('<p>Select a tag:</p>');\n              tags.forEach(function (tag) {\n                var btn = $('<button type=\"button\" class=\"btn btn-sm btn-outline-secondary m-1 preexisting-tag-btn\"></button>');\n                btn.text(tag);\n                btn.on('click', function () {\n                  var current = $('#swalTags').val();\n                  var tagsArr = current ? current.split(',').map(function (t) {\n                    return t.trim();\n                  }).filter(Boolean) : [];\n                  if (!tagsArr.includes(tag)) {\n                    tagsArr.push(tag);\n                    $('#swalTags').val(tagsArr.join(', '));\n                  }\n                });\n                container.append(btn);\n              });\n            }\n          },\n          error: function error(err) {\n            console.error('Failed to load preexisting tags', err);\n          }\n        });\n      },\n      showCancelButton: true,\n      confirmButtonText: 'Save',\n      preConfirm: function preConfirm() {\n        return {\n          title: document.getElementById('swalTitle').value,\n          author: document.getElementById('swalAuthor').value,\n          tags: document.getElementById('swalTags').value,\n          password: document.getElementById('swalPassword').value\n        };\n      }\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        var data = result.value;\n        // Update display in the result section\n        $('#displayTitle').text(data.title);\n        $('#displayAuthor').text(data.author);\n        $('#displayTags').text(data.tags);\n        var story = {\n          storyTitle: data.title,\n          storyAuthor: data.author,\n          storyText: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyText,\n          variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n          pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups,\n          variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts,\n          pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount,\n          customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders,\n          tags: data.tags ? data.tags.split(',').map(function (s) {\n            return s.trim();\n          }) : [],\n          savedAt: new Date().toISOString(),\n          password: data.password && data.password.trim() !== '' ? data.password : null\n        };\n        $.ajax({\n          url: \"\".concat(API_BASE_URL, \"/api/savestory\"),\n          method: 'POST',\n          contentType: 'application/json',\n          data: JSON.stringify(story),\n          success: function success() {\n            Swal.fire({\n              toast: true,\n              position: 'top-end',\n              icon: 'success',\n              title: 'Completed story saved to site!',\n              showConfirmButton: false,\n              timer: 1500\n            });\n          },\n          error: function error(xhr, statusText, errorThrown) {\n            if (xhr.status === 409) {\n              Swal.fire({\n                title: 'Story exists',\n                text: 'A story with this title already exists. Overwrite?',\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'Yes, overwrite',\n                cancelButtonText: 'No'\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  story.overwrite = true;\n                  $.ajax({\n                    url: \"\".concat(API_BASE_URL, \"/api/savestory\"),\n                    method: 'POST',\n                    contentType: 'application/json',\n                    data: JSON.stringify(story),\n                    success: function success() {\n                      Swal.fire({\n                        toast: true,\n                        position: 'top-end',\n                        icon: 'success',\n                        title: 'Completed story overwritten!',\n                        showConfirmButton: false,\n                        timer: 1500\n                      });\n                    },\n                    error: function error(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite) {\n                      Storage.handleAjaxError(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite, 'Failed to overwrite completed story');\n                    }\n                  });\n                }\n              });\n            } else {\n              Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to save completed story');\n            }\n          }\n        });\n      }\n    });\n  },\n  loadSavedStoriesList: function loadSavedStoriesList() {\n    var tag = $('#filterTag').val();\n    var sort = $('#sortOption').val();\n    $.ajax({\n      url: \"\".concat(API_BASE_URL, \"/api/getstories?tag=\").concat(encodeURIComponent(tag || ''), \"&sort=\").concat(encodeURIComponent(sort || 'date_desc')),\n      method: 'GET',\n      success: function success(stories) {\n        // Store the fetched stories globally for later reference\n        window.savedStories = stories;\n        var $listContainer = $('#savedStoriesList').empty();\n        if (!stories.length) {\n          $listContainer.append('<p>No stories saved yet.</p>');\n          return;\n        }\n        stories.forEach(function (story, index) {\n          var dateObj = new Date(story.savedAt);\n          var dateStr = dateObj.toLocaleDateString() + \" \" + dateObj.toLocaleTimeString();\n          var tags = story.tags && story.tags.length ? story.tags.join(', ') : 'No tags';\n          var ratingDisplay = story.ratingCount ? \"Rating: \".concat(story.rating.toFixed(1), \" (\").concat(story.ratingCount, \" votes)\") : 'No ratings';\n          var lockIndicator = story.locked ? \"<i class=\\\"fas fa-lock\\\" title=\\\"Password Protected\\\"></i> \" : '';\n          var chapterCount = story.chapterCount ? \"<span class=\\\"badge bg-info\\\">\".concat(story.chapterCount, \" chapters</span> \") : '';\n          var item = $(\"\\n                      <div class=\\\"list-group-item p-2\\\">\\n                        <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                          <div>\\n                            <strong>\".concat(lockIndicator).concat(story.storyTitle || 'Untitled', \"</strong> \").concat(chapterCount, \"<br>\\n                            <small>\").concat(story.storyAuthor || 'Unknown', \" | \").concat(dateStr, \"</small><br>\\n                            <small>\").concat(tags, \" | \").concat(ratingDisplay, \"</small>\\n                          </div>\\n                          <div>\\n                            <button class=\\\"btn btn-sm btn-secondary editSavedStoryBtn\\\" data-index=\\\"\").concat(index, \"\\\" aria-label=\\\"Edit Story\\\">\\n                              <i class=\\\"fas fa-edit\\\"></i>\\n                            </button>\\n                            <button class=\\\"btn btn-sm btn-success loadSavedStoryBtn\\\" data-index=\\\"\").concat(index, \"\\\" aria-label=\\\"Play Story\\\">\\n                              <i class=\\\"fas fa-play\\\"></i>\\n                            </button>\\n                            <button class=\\\"btn btn-sm btn-danger deleteSavedStoryBtn\\\" data-title=\\\"\").concat(story.storyTitle, \"\\\" aria-label=\\\"Delete Story\\\">\\n                              <i class=\\\"fas fa-trash-alt\\\"></i>\\n                            </button>\\n                          </div>\\n                        </div>\\n                      </div>\\n                    \"));\n          $listContainer.append(item);\n        });\n      },\n      error: function error(xhr, statusText, errorThrown) {\n        Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to load saved stories list');\n      }\n    });\n  },\n  createSavedStoryListItem: function createSavedStoryListItem(story, index, dateStr) {\n    var chapterCount = story.chapters && story.chapters.length ? \"<span class=\\\"badge bg-info\\\">\".concat(story.chapters.length, \" chapters</span> \") : '';\n    return $(\"\\n            <div class=\\\"list-group-item p-2\\\">\\n              <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                <div>\\n                  <strong>\".concat(story.storyTitle || 'Untitled', \"</strong> \").concat(chapterCount, \"<br>\\n                  <small>\").concat(story.storyAuthor || 'Unknown', \" | \").concat(dateStr, \"</small>\\n                </div>\\n                <div>\\n                  <button class=\\\"btn btn-sm btn-secondary editSavedStoryBtn\\\" data-index=\\\"\").concat(index, \"\\\" aria-label=\\\"Edit Story\\\">\\n                    <i class=\\\"fas fa-edit\\\"></i>\\n                  </button>\\n                  <button class=\\\"btn btn-sm btn-success loadSavedStoryBtn\\\" data-index=\\\"\").concat(index, \"\\\" aria-label=\\\"Play Story\\\">\\n                    <i class=\\\"fas fa-play\\\"></i>\\n                  </button>\\n                  <button class=\\\"btn btn-sm btn-danger deleteSavedStoryBtn\\\" data-title=\\\"\").concat(story.storyTitle, \"\\\" aria-label=\\\"Delete Story\\\">\\n                    <i class=\\\"fas fa-trash-alt\\\"></i>\\n                  </button>\\n                </div>\\n              </div>\\n            </div>\\n        \"));\n  },\n  loadSavedStory: function loadSavedStory(index) {\n    var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"edit\";\n    var stories = window.savedStories || [];\n    var story = stories[index];\n    if (!story) {\n      Swal.fire('Error', 'Story not found.', 'error');\n      return;\n    }\n    // NEW: If the story is locked, prompt for the password.\n    if (story.locked) {\n      Swal.fire({\n        title: 'Enter Password',\n        input: 'password',\n        inputPlaceholder: 'Password',\n        showCancelButton: true,\n        inputAttributes: {\n          autocapitalize: 'off',\n          autocorrect: 'off'\n        }\n      }).then(function (result) {\n        if (result.value) {\n          $.ajax({\n            url: \"\".concat(API_BASE_URL, \"/api/unlockstory\"),\n            method: 'POST',\n            contentType: 'application/json',\n            data: JSON.stringify({\n              storyId: story._id,\n              password: result.value\n            }),\n            success: function success(unlockedStory) {\n              Storage.populateEditorWithStory(unlockedStory, mode);\n              _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId = unlockedStory._id || null;\n              _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters = unlockedStory.chapters || [];\n              _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter = unlockedStory.currentChapter || 0;\n              $('#displayStoryId').text(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId);\n\n              // Update chapter selector\n              Storage.updateChapterSelector();\n              Swal.fire({\n                toast: true,\n                position: 'top-end',\n                icon: 'success',\n                title: 'Story loaded!',\n                showConfirmButton: false,\n                timer: 1500\n              });\n            },\n            error: function error(xhr, statusText, errorThrown) {\n              Storage.handleAjaxError(xhr, statusText, errorThrown, 'Incorrect password or failed to unlock story');\n            }\n          });\n        }\n      });\n    } else {\n      // If the story has chapters, load the first chapter or current chapter\n      if (story.chapters && story.chapters.length > 0 && story._id) {\n        // Store story info in state\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId = story._id;\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters = story.chapters;\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter = story.currentChapter || 0;\n\n        // Load the current chapter\n        Storage.loadChapter(story._id, story.currentChapter || 0);\n      } else {\n        // Regular story with no chapters\n        Storage.populateEditorWithStory(story, mode);\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId = story._id || null;\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters = story.chapters || [];\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter = 0; // Default to main story\n        $('#displayStoryId').text(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId);\n\n        // Update chapter selector\n        Storage.updateChapterSelector();\n        Swal.fire({\n          toast: true,\n          position: 'top-end',\n          icon: 'success',\n          title: 'Story loaded!',\n          showConfirmButton: false,\n          timer: 1500\n        });\n      }\n    }\n  },\n  populateEditorWithStory: function populateEditorWithStory(story, mode) {\n    $('#storyTitle').val(story.storyTitle);\n    $('#storyAuthor').val(story.storyAuthor);\n    $('#storyText').html((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.decodeHTMLEntities)(story.storyText));\n    // NEW: Populate tags input if editing a story.\n    if (story.tags && story.tags.length) {\n      $('#storyTags').val(story.tags.join(', '));\n    }\n    // Also store rating info in a display area (if desired)\n    if (mode === \"play\" && story.ratingCount) {\n      $('#ratingSection').show();\n    } else {\n      $('#ratingSection').hide();\n    }\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = [];\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = {};\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter = 0;\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = story.fillValues || {};\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups = story.pronounGroups || {};\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount = story.pronounGroupCount || 0;\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders = story.customPlaceholders || [];\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.updateVariablesFromEditor)();\n    if (mode === \"edit\") {\n      $('#editor').removeClass('d-none');\n      $('#inputs, #result').addClass('d-none');\n    } else if (mode === \"play\") {\n      (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_2__.buildFillForm)();\n      $('#inputs').removeClass('d-none');\n      $('#editor, #result').addClass('d-none');\n    }\n  },\n  // NEW: Load all chapters for a story in play mode\n  loadAllChaptersForPlay: function loadAllChaptersForPlay(storyId) {\n    $.ajax({\n      url: \"\".concat(API_BASE_URL, \"/api/getchapters?storyId=\").concat(storyId),\n      method: 'GET',\n      success: function success(response) {\n        // Store all chapters in the state for playback\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].allChapters = response.chapters;\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId = response.storyId;\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyTitle = response.storyTitle;\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyAuthor = response.storyAuthor;\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter = response.currentChapter;\n\n        // Start with chapter 0 (main story)\n        var mainStory = response.chapters.find(function (ch) {\n          return ch.chapterNumber === 0;\n        });\n        if (mainStory) {\n          $('#displayTitle').text(response.storyTitle);\n          $('#displayAuthor').text(response.storyAuthor);\n\n          // Set up the variables and placeholders from the main story\n          _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = mainStory.variables || [];\n          _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = mainStory.fillValues || {};\n          _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups = mainStory.pronounGroups || {};\n          _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = mainStory.variableCounts || {};\n          _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders = mainStory.customPlaceholders || [];\n          _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount = mainStory.pronounGroupCount || 0;\n          _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyText = mainStory.chapterText;\n\n          // Build the fill form for the user to fill in variables\n          (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_2__.buildFillForm)();\n\n          // Show chapter navigation if there are chapters\n          if (response.chapters.length > 1) {\n            $('#chapterNavigation').removeClass('d-none');\n            // Populate chapter dropdown\n            var $chapterNav = $('#playChapterSelector').empty();\n            response.chapters.forEach(function (chapter) {\n              $chapterNav.append($('<option></option>').val(chapter.chapterNumber).text(chapter.chapterNumber === 0 ? 'Introduction' : \"Chapter \".concat(chapter.chapterNumber, \": \").concat(chapter.chapterTitle)).prop('selected', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter === chapter.chapterNumber));\n            });\n          } else {\n            $('#chapterNavigation').addClass('d-none');\n          }\n          $('#inputs').removeClass('d-none');\n          $('#editor, #result').addClass('d-none');\n        }\n      },\n      error: function error(xhr, statusText, errorThrown) {\n        Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to load chapters');\n      }\n    });\n  },\n  // NEW: Switch to a different chapter in play mode\n  switchPlayChapter: function switchPlayChapter(chapterNumber) {\n    if (!_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].allChapters) {\n      console.error('No chapters loaded');\n      return;\n    }\n    var chapter = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].allChapters.find(function (ch) {\n      return ch.chapterNumber === parseInt(chapterNumber);\n    });\n    if (!chapter) {\n      console.error(\"Chapter \".concat(chapterNumber, \" not found\"));\n      return;\n    }\n\n    // Update the current chapter\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentChapter = parseInt(chapterNumber);\n\n    // Update the display with the chapter content\n    $('#playChapterTitle').text(chapter.chapterNumber === 0 ? '' : \"Chapter \".concat(chapter.chapterNumber, \": \").concat(chapter.chapterTitle));\n\n    // We don't change the variables and placeholders when switching chapters\n    // This allows variables from earlier chapters to be available in later chapters\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyText = chapter.chapterText;\n\n    // Rebuild the form with the current variables\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_2__.buildFillForm)();\n\n    // Update the chapter selector\n    $('#playChapterSelector').val(chapterNumber);\n  },\n  deleteSavedStory: function deleteSavedStory(title) {\n    $.ajax({\n      url: \"\".concat(API_BASE_URL, \"/api/deletestory\"),\n      method: 'DELETE',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        storyTitle: title\n      }),\n      success: function success() {\n        Swal.fire({\n          toast: true,\n          position: 'top-end',\n          icon: 'success',\n          title: 'Story deleted!',\n          showConfirmButton: false,\n          timer: 1500\n        });\n        Storage.loadSavedStoriesList();\n      },\n      error: function error(xhr, statusText, errorThrown) {\n        Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to delete story');\n      }\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/data/storage.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/handlers/events.js":
/*!*********************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/handlers/events.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initEvents: () => (/* binding */ initEvents)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _data_storage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/storage.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/data/storage.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/utils.js\");\n/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/StringUtils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/StringUtils.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/typeHelpers.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/typeHelpers.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/placeholders.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholders.js\");\n/* harmony import */ var _ui_forms_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ui/forms.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/ui/forms.js\");\n/* harmony import */ var _core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/storyProcessor.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/storyProcessor.js\");\n/* harmony import */ var _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/domUtils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/domUtils.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! sweetalert2 */ \"../../../OneDrive/Development/HTML/BlankBook/node_modules/sweetalert2/dist/sweetalert2.all.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _ui_notifications_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/notifications.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/ui/notifications.js\");\n/* harmony import */ var _core_existingPlaceholderUI_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../core/existingPlaceholderUI.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/existingPlaceholderUI.js\");\n// public/js/handlers/events.js\n\n\n\n\n\n\n\n\n\n // Ensure Swal is imported if used\n\n\n\n// Handle placeholder button click\nvar handlePlaceholderClick = function handlePlaceholderClick(internalType, displayName) {\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder && _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable) {\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateExistingPlaceholder)(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable, internalType, displayName);\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder = false;\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = null;\n    $('#placeholderModal').modal('hide');\n  } else {\n    // For specialized types that have their own modal chains\n    if (internalType === \"PRONOUN\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.pickPronounFormAndGroup)();\n      node;\n      $('#placeholderSearch').val('');\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n      // Hide the accordion container after selecting\n      $('.placeholder-accordion-container').hide();\n      return;\n    }\n    if (internalType.startsWith(\"NN\")) {\n      if (internalType === \"NN_Person\") {\n        (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showPersonTypeSelection)(internalType, displayName);\n        $('#placeholderSearch').val('');\n        (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n        // Hide the accordion container after selecting\n        $('.placeholder-accordion-container').hide();\n        return;\n      }\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection)(internalType, displayName);\n      $('#placeholderSearch').val('');\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n      // Hide the accordion container after selecting\n      $('.placeholder-accordion-container').hide();\n      return;\n    }\n    if (internalType.startsWith(\"VB\") || internalType === \"MD\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection)(internalType, displayName);\n      $('#placeholderSearch').val('');\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n      // Hide the accordion container after selecting\n      $('.placeholder-accordion-container').hide();\n      return;\n    }\n\n    // For direct placeholder insertion (non-pronoun, non-noun, non-verb)\n    // We don't need to modify state.lastSelectedText here as it should already be set\n    // by handleNewPlaceholder when the selection menu was clicked\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.insertPlaceholder)(internalType, displayName, false);\n    $('#placeholderSearch').val('');\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n    // Hide the accordion container after inserting the placeholder\n    $('.placeholder-accordion-container').hide();\n  }\n};\n\n// Handle create new story button click\nvar handleCreateNewStory = function handleCreateNewStory(e) {\n  e.preventDefault();\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges) {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Unsaved changes',\n      text: 'Your story has unsaved changes. Would you like to save it to the site before starting a new one?',\n      showDenyButton: true,\n      confirmButtonText: 'Save and start new',\n      denyButtonText: 'Discard changes'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.addCurrentStoryToSavedStories();\n        setTimeout(_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState, 1000);\n      } else if (result.isDenied) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n          title: 'Are you sure?',\n          text: 'This will discard your current unsaved story.',\n          confirmButtonText: 'Yes, start new'\n        }).then(function (res) {\n          if (res.isConfirmed) (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState)();\n        });\n      }\n    });\n  } else {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Are you sure?',\n      text: 'This will discard your current story.',\n      confirmButtonText: 'Yes, start new'\n    }).then(function (res) {\n      if (res.isConfirmed) (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState)();\n    });\n  }\n};\n\n// Handle clear form button click\nvar handleClearForm = function handleClearForm(e) {\n  e.preventDefault();\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges) {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Clear Form',\n      text: 'You have unsaved changes. Would you like to save your story to the site before clearing the form?',\n      showDenyButton: true,\n      confirmButtonText: 'Save first',\n      denyButtonText: 'Clear without saving'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.addCurrentStoryToSavedStories();\n        setTimeout(_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState, 1000);\n      } else if (result.isDenied) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n          title: 'Are you sure?',\n          text: 'This will clear your current form and discard all unsaved changes.',\n          confirmButtonText: 'Yes, clear form'\n        }).then(function (res) {\n          if (res.isConfirmed) (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState)();\n        });\n      }\n    });\n  } else {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Clear Form',\n      text: 'This will clear all content from the current form. Are you sure?',\n      confirmButtonText: 'Yes, clear form'\n    }).then(function (res) {\n      if (res.isConfirmed) (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState)();\n    });\n  }\n};\n\n// Handle generate story button click\nvar handleGenerateStory = function handleGenerateStory() {\n  // Use the form validation function from forms.js\n  if (!(0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.validateInputForm)()) {\n    return; // Validation failed\n  }\n\n  // Collect values from the input form\n  var inputForm = document.getElementById('inputForm');\n  var inputs = inputForm.querySelectorAll('input[type=\"text\"]');\n\n  // Reset fillValues\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = {};\n\n  // Populate fillValues with the values from the input fields\n  inputs.forEach(function (input) {\n    var id = input.getAttribute('data-id');\n    if (id && input.value.trim() !== '') {\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues[id] = input.value.trim();\n      console.log(\"Collected input value for \".concat(id, \": \\\"\").concat(input.value.trim(), \"\\\"\"));\n    }\n  });\n\n  // Generate the final story with replacements\n  var _final = (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.generateLegacyText)();\n  _final = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.fillPlaceholders)(_final, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups);\n\n  // Update the result display\n  $('#finalStory').text(_final);\n  $('#displayTitle').text($('#storyTitle').val());\n  $('#displayAuthor').text($('#storyAuthor').val());\n  $('#displayTags').text($('#storyTags').val());\n  $('#result').removeClass('d-none');\n  $('#inputs').addClass('d-none');\n};\n\n// Handle save story to site button\nvar handleSaveStoryToSite = function handleSaveStoryToSite() {\n  sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n    title: 'Save Story',\n    html: \"\\n          <input type=\\\"text\\\" id=\\\"swalTitle\\\" class=\\\"swal2-input\\\" placeholder=\\\"Story Title\\\" value=\\\"\".concat($('#storyTitle').val(), \"\\\">\\n          <input type=\\\"text\\\" id=\\\"swalAuthor\\\" class=\\\"swal2-input\\\" placeholder=\\\"Author\\\" value=\\\"\").concat($('#storyAuthor').val(), \"\\\">\\n          <input type=\\\"text\\\" id=\\\"swalTags\\\" class=\\\"swal2-input\\\" placeholder=\\\"Tags (comma separated)\\\" value=\\\"\").concat($('#storyTags').val(), \"\\\">\\n          <input type=\\\"password\\\" id=\\\"swalPassword\\\" class=\\\"swal2-input\\\" placeholder=\\\"Password (optional)\\\">\\n          <div id=\\\"preexistingTagsContainer\\\" style=\\\"text-align:left; margin-top:10px;\\\"></div>\\n        \"),\n    didOpen: function didOpen() {\n      loadPreexistingTags();\n    },\n    showCancelButton: true,\n    confirmButtonText: 'Save',\n    preConfirm: function preConfirm() {\n      return {\n        title: document.getElementById('swalTitle').value,\n        author: document.getElementById('swalAuthor').value,\n        tags: document.getElementById('swalTags').value,\n        password: document.getElementById('swalPassword').value\n      };\n    }\n  }).then(function (result) {\n    if (result.isConfirmed) {\n      var data = result.value;\n      // Update fields in the editor\n      $('#storyTitle').val(data.title);\n      $('#storyAuthor').val(data.author);\n      $('#storyTags').val(data.tags);\n      var story = {\n        storyTitle: data.title,\n        storyAuthor: data.author,\n        storyText: $('#storyText').html(),\n        variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n        pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups,\n        variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts,\n        pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount,\n        customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders,\n        tags: data.tags ? data.tags.split(',').map(function (s) {\n          return s.trim();\n        }) : [],\n        savedAt: new Date().toISOString(),\n        password: data.password && data.password.trim() !== '' ? data.password : null\n      };\n      $.ajax({\n        url: '/api/savestory',\n        method: 'POST',\n        contentType: 'application/json',\n        data: JSON.stringify(story),\n        success: function success() {\n          sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n            toast: true,\n            position: 'top-end',\n            icon: 'success',\n            title: 'Story saved to site!',\n            showConfirmButton: false,\n            timer: 1500\n          });\n        },\n        error: function error(xhr, statusText, errorThrown) {\n          if (xhr.status === 409) {\n            sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n              title: 'Story exists',\n              text: 'A story with this title already exists. Overwrite?',\n              icon: 'warning',\n              showCancelButton: true,\n              confirmButtonText: 'Yes, overwrite',\n              cancelButtonText: 'No'\n            }).then(function (result) {\n              if (result.isConfirmed) {\n                story.overwrite = true;\n                $.ajax({\n                  url: '/api/savestory',\n                  method: 'POST',\n                  contentType: 'application/json',\n                  data: JSON.stringify(story),\n                  success: function success() {\n                    sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n                      toast: true,\n                      position: 'top-end',\n                      icon: 'success',\n                      title: 'Story overwritten!',\n                      showConfirmButton: false,\n                      timer: 1500\n                    });\n                  },\n                  error: function error(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite) {\n                    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.handleAjaxError(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite, 'Failed to overwrite story');\n                  }\n                });\n              }\n            });\n          } else {\n            _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to save story');\n          }\n        }\n      });\n    }\n  });\n};\n\n// Load preexisting tags for tag selector\nvar loadPreexistingTags = function loadPreexistingTags() {\n  $.ajax({\n    url: '/api/gettags',\n    method: 'GET',\n    success: function success(tags) {\n      var container = $('#preexistingTagsContainer');\n      container.empty();\n      if (tags.length > 0) {\n        container.append('<p>Select a tag:</p>');\n        tags.forEach(function (tag) {\n          var btn = $('<button type=\"button\" class=\"btn btn-sm btn-outline-secondary m-1 preexisting-tag-btn\"></button>');\n          btn.text(tag);\n          btn.on('click', function () {\n            var current = $('#swalTags').val();\n            var tagsArr = current ? current.split(',').map(function (t) {\n              return t.trim();\n            }).filter(Boolean) : [];\n            if (!tagsArr.includes(tag)) {\n              tagsArr.push(tag);\n              $('#swalTags').val(tagsArr.join(', '));\n            }\n          });\n          container.append(btn);\n        });\n      }\n    },\n    error: function error(err) {\n      console.error('Failed to load preexisting tags', err);\n    }\n  });\n};\n\n// NEW: Handle chapter selector change\nvar handleChapterChange = function handleChapterChange() {\n  var chapterNumber = $('#chapterSelector').val();\n\n  // First check if we need to save the current chapter\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges) {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Unsaved changes',\n      text: 'You have unsaved changes to the current chapter. Would you like to save before switching?',\n      showDenyButton: true,\n      confirmButtonText: 'Save and switch',\n      denyButtonText: 'Discard changes'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        // Save current chapter first\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.saveCurrentChapter();\n\n        // Then load the selected chapter\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadChapter(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId, chapterNumber);\n      } else if (result.isDenied) {\n        // Discard changes and load the selected chapter\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadChapter(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId, chapterNumber);\n      }\n    });\n  } else {\n    // No unsaved changes, just load the selected chapter\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadChapter(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId, chapterNumber);\n  }\n};\n\n// NEW: Handle add chapter button click\nvar handleAddChapter = function handleAddChapter() {\n  _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.addChapterToCurrentStory();\n};\n\n// NEW: Handle save chapter button click\nvar handleSaveChapter = function handleSaveChapter() {\n  _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.saveCurrentChapter();\n};\n\n// NEW: Handle delete chapter button click\nvar handleDeleteChapter = function handleDeleteChapter() {\n  var chapterNumber = parseInt($('#chapterSelector').val());\n  if (chapterNumber === 0) {\n    (0,_ui_notifications_js__WEBPACK_IMPORTED_MODULE_10__.showToast)('Cannot delete the main story', 'error');\n    return;\n  }\n  _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.deleteChapter(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId, chapterNumber);\n};\n\n// NEW: Handle play chapter selection change\nvar handlePlayChapterChange = function handlePlayChapterChange() {\n  var chapterNumber = $('#playChapterSelector').val();\n  _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.switchPlayChapter(chapterNumber);\n};\n\n// NEW: Handle previous chapter button click\nvar handlePrevChapter = function handlePrevChapter() {\n  var currentChapter = parseInt($('#playChapterSelector').val());\n  if (currentChapter > 0) {\n    $('#playChapterSelector').val(currentChapter - 1).change();\n  }\n};\n\n// NEW: Handle next chapter button click\nvar handleNextChapter = function handleNextChapter() {\n  var currentChapter = parseInt($('#playChapterSelector').val());\n  var maxChapter = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].allChapters ? _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].allChapters.length - 1 : 0;\n  if (currentChapter < maxChapter) {\n    $('#playChapterSelector').val(currentChapter + 1).change();\n  }\n};\n\n// Attach all event handlers\nvar initEvents = function initEvents() {\n  // Debug: Create a test placeholder if there are none (for debugging only - remove in production)\n  var createTestPlaceholders = function createTestPlaceholders() {\n    console.log(\"Creating test placeholders for debugging\");\n    if (!_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables || _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.length === 0) {\n      // Create a couple of test placeholders in the editor\n      var editor = document.getElementById('storyText');\n      if (editor && editor.innerHTML.trim() === '') {\n        editor.innerHTML = 'This is a test story with <span class=\"placeholder\" contenteditable=\"false\" data-id=\"NN_Animal1\" title=\"NN_Animal1 (noun)\">animal</span> placeholders. There is also a <span class=\"placeholder\" contenteditable=\"false\" data-id=\"VB_Jump1\" title=\"VB_Jump1 (verb)\">jump</span> placeholder.';\n\n        // Update variables from the editor content\n        (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n        console.log(\"Test placeholders created:\", _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables);\n      }\n    }\n  };\n\n  // Uncomment this line to automatically create test placeholders\n  // createTestPlaceholders();\n\n  // Placeholder button click handler\n  $(document).on('click', '.placeholder-btn', function () {\n    var internalType = $(this).data('internal');\n    var displayName = $(this).data('display');\n    handlePlaceholderClick(internalType, displayName);\n  });\n\n  // Fill info icon click handler\n  $(document).on('click', '.fill-info-icon', function (e) {\n    e.stopPropagation();\n    var type = $(e.currentTarget).data('type');\n    var tooltip = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_4__.TypeHelpers.getTooltipForType(type);\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast(tooltip, 'info');\n  });\n\n  // Add accordion info icon click handler\n  $(document).on('click', '.accordion-info-icon', function (e) {\n    e.stopPropagation();\n    var tooltip = $(e.currentTarget).data('tooltip');\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast(tooltip, 'info');\n  });\n\n  // Show more toggle event handler\n  $(document).on('click', '.show-more-toggle', function () {\n    var parentList = $(this).closest('.list-group');\n    var hiddenItems = parentList.find('.secondary-placeholder-wrapper .secondary-placeholder');\n    var link = $(this);\n    link.text(link.text() === 'Show More' ? 'Show Less' : 'Show More');\n    hiddenItems.toggle();\n  });\n\n  // Add copy to clipboard handler\n  $('#copyStory').on('click', function () {\n    var finalText = $('#finalStory').text();\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.copyToClipboard(finalText);\n  });\n\n  // Selection changes\n  document.addEventListener('selectionchange', function () {\n    var editor = document.getElementById(\"storyText\");\n    var sel = window.getSelection();\n    if (sel.rangeCount > 0 && editor.contains(sel.anchorNode)) {\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = sel.getRangeAt(0);\n    }\n  });\n\n  // Attach search handlers with a reduced debounce delay (50ms)\n  $('#placeholderSearch').on('input', _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.Utils.debounce(function () {\n    var searchVal = $(this).val();\n    var scrollTop = $('#sidePlaceholderPanel').scrollTop(); // Store current scroll position\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', searchVal);\n    $('#addCustomPlaceholderBtn').text('Add \"' + searchVal + '\"');\n\n    // Restore scroll position after update if needed\n    if (searchVal && scrollTop === 0) {\n      $('#sidePlaceholderPanel').scrollTop(0); // Ensure stays at top\n    }\n  }, 50));\n  $('#modalPlaceholderSearch').on('input', _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.Utils.debounce(function () {\n    var searchVal = $(this).val();\n    var scrollTop = $('.modal-body').scrollTop(); // Store current scroll position\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', searchVal);\n    $('#modalAddCustomPlaceholderBtn').text('Add \"' + searchVal + '\"');\n\n    // Restore scroll position after update if needed\n    if (searchVal && scrollTop === 0) {\n      $('.modal-body').scrollTop(0); // Ensure stays at top\n    }\n  }, 50));\n\n  // Initialize accordions\n  (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n  (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n\n  // Initialize existing placeholder view too - make sure placeholders are loaded right away\n  (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n  (0,_core_existingPlaceholderUI_js__WEBPACK_IMPORTED_MODULE_11__.forceUpdateExistingPlaceholders)();\n\n  // Filter tag input handler\n  $('#filterTag').on('input', _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.Utils.debounce(function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n  }, 300));\n\n  // Sort option change handler\n  $('#sortOption').on('change', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n  });\n\n  // Alphabetical order button\n  $('#alphabeticalOrderBtn').on('click', function () {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillOrder = 'alphabetical';\n    $(this).removeClass('btn-outline-secondary').addClass('btn-outline-primary');\n    $('#randomOrderBtn').removeClass('btn-outline-primary').addClass('btn-outline-secondary');\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n  });\n\n  // Random order button\n  $('#randomOrderBtn').on('click', function () {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillOrder = 'random';\n    $(this).removeClass('btn-outline-secondary').addClass('btn-outline-primary');\n    $('#alphabeticalOrderBtn').removeClass('btn-outline-primary').addClass('btn-outline-secondary');\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n  });\n\n  // Tag autocomplete\n  $(\"#filterTag\").autocomplete({\n    source: function source(request, response) {\n      $.ajax({\n        url: '/api/gettags',\n        method: 'GET',\n        dataType: 'json',\n        success: function success(tags) {\n          var filteredTags = $.ui.autocomplete.filter(tags, request.term);\n          response(filteredTags);\n        },\n        error: function error(err) {\n          console.error('Failed to load tags for autocomplete', err);\n          response([]);\n        }\n      });\n    },\n    minLength: 1,\n    select: function select(event, ui) {\n      $(\"#filterTag\").val(ui.item.value);\n      $(\"#applyFilters\").click();\n      return false;\n    }\n  });\n\n  // Apply filters button\n  $('#applyFilters').on('click', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n  });\n\n  // Share story button\n  $('#shareStory').on('click', function () {\n    var finalText = $('#finalStory').text();\n    var title = $('#displayTitle').text();\n    var author = $('#displayAuthor').text();\n    var content = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.formatStoryForExport)(title, author, finalText);\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.copyToClipboard(content).then(function (success) {\n      if (success) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast('Story copied to clipboard!');\n      } else {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showError('Copy Failed', 'Failed to copy story. Please copy manually.');\n      }\n    });\n  });\n\n  // Story editor input event\n  $('#storyText').on('input', function () {\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges = true;\n  });\n\n  // Removed upload story functionality\n\n  // Start game button\n  $('#startGame').on('click', function (e) {\n    e.preventDefault();\n    var formValidated = _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.Utils.validateFormInputs(['#storyTitle', '#storyAuthor', '#storyText']);\n    if (!formValidated) {\n      (0,_ui_notifications_js__WEBPACK_IMPORTED_MODULE_10__.showToast)('Please fill out all required fields', 'error');\n      return;\n    }\n\n    // Save current content to state for processing\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyTitle = $('#storyTitle').val();\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyAuthor = $('#storyAuthor').val();\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyText = $('#storyText').html();\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n\n    // NEW: If story has chapters, load all chapters for playing\n    if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId && _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters && _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chapters.length > 0) {\n      _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadAllChaptersForPlay(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId);\n    } else {\n      // Just build the form with the current story text\n      (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n      $('#editor').addClass('d-none');\n      $('#inputs').removeClass('d-none');\n    }\n  });\n\n  // Generate story button\n  $('#generateStory').on('click', handleGenerateStory);\n\n  // Create new story buttons\n  $('#createNewStory2, #createNewStory').on('click', handleCreateNewStory);\n\n  // Clear form button\n  $('#clearFormBtn').on('click', handleClearForm);\n\n  // Story editing flow buttons\n  $('#editStoryEntries').on('click', function () {\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n    $('#result').addClass('d-none');\n    $('#inputs').removeClass('d-none');\n  });\n  $('#backToEditor, #backToEditor2').on('click', function () {\n    $('#result, #inputs').addClass('d-none');\n    $('#editor').removeClass('d-none');\n  });\n\n  // Save story to site button\n  $('#saveStoryToSite').on('click', handleSaveStoryToSite);\n\n  // Download story button\n  $('#downloadStory').on('click', function () {\n    var finalText = $('#finalStory').text();\n    var title = $('#displayTitle').text();\n    var author = $('#displayAuthor').text();\n    var content = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.formatStoryForExport)(title, author, finalText);\n    var fileName = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.createFilenameFromTitle)(title);\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.downloadTextFile(content, fileName);\n  });\n\n  // Save completed story button\n  $('#saveCompletedStory').on('click', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.addCompletedStoryToSavedStories();\n  });\n\n  // Saved stories buttons\n  $('#mySavedStoriesBtn').on('click', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n    $('#savedStoriesModal').modal('show');\n  });\n  $(document).on('click', '.loadSavedStoryBtn', function () {\n    var index = $(this).data('index');\n    $('#savedStoriesModal').modal('hide');\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStory(index, \"play\");\n  });\n  $(document).on('click', '.editSavedStoryBtn', function () {\n    var index = $(this).data('index');\n    $('#savedStoriesModal').modal('hide');\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStory(index, \"edit\");\n  });\n  $(document).on('click', '.deleteSavedStoryBtn', function () {\n    var title = $(this).data('title');\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Delete Story?',\n      text: 'Are you sure you want to delete this saved story?',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(function (result) {\n      if (result.isConfirmed) _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.deleteSavedStory(title);\n    });\n  });\n\n  // Rating submission\n  $('#submitRating').on('click', function () {\n    var rating = parseInt($('#storyRating').val(), 10);\n    if (!_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId) {\n      _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showError('Error', 'Story ID not found.');\n      return;\n    }\n    $.ajax({\n      url: '/api/rateStory',\n      method: 'POST',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        storyId: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId,\n        rating: rating\n      }),\n      success: function success(data) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast(\"Thank you for rating! New average: \".concat(data.rating.toFixed(1), \" (\").concat(data.ratingCount, \" votes)\"));\n      },\n      error: function error(xhr, statusText, errorThrown) {\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to rate story');\n      }\n    });\n  });\n\n  // Editor key handling for placeholders\n  $('#storyText').on('keydown', function (e) {\n    var sel = window.getSelection();\n    if (sel.rangeCount) {\n      var range = sel.getRangeAt(0);\n      if (e.key === \"ArrowRight\") {\n        var _node = sel.anchorNode;\n        if (_node.nodeType === Node.TEXT_NODE && _node.parentNode.classList.contains('placeholder')) {\n          if (sel.anchorOffset >= _node.nodeValue.length) {\n            e.preventDefault();\n            var placeholder = _node.parentNode;\n            var newRange = document.createRange();\n            newRange.setStartAfter(placeholder);\n            newRange.collapse(true);\n            sel.removeAllRanges();\n            sel.addRange(newRange);\n          }\n        }\n      }\n      if (e.key === \"Backspace\") {\n        var _node2 = sel.anchorNode;\n        if (_node2.nodeType === Node.TEXT_NODE && _node2.parentNode.classList.contains('placeholder') && sel.anchorOffset === 0) {\n          e.preventDefault();\n          var _placeholder = _node2.parentNode;\n          var _newRange = document.createRange();\n          _newRange.setStartBefore(_placeholder);\n          _newRange.collapse(true);\n          sel.removeAllRanges();\n          sel.addRange(_newRange);\n        }\n      }\n    }\n  });\n\n  // Add placeholder button\n  $('#addPlaceholderBtn').on('click', function () {\n    $('#placeholderModal').modal('show');\n  });\n\n  // Toggle between New and Existing Placeholder views in sidebar\n  $('#newPlaceholderToggle, #existingPlaceholderToggle').on('click', function () {\n    var isNewToggle = $(this).attr('id') === 'newPlaceholderToggle';\n\n    // Update button active states\n    $('#newPlaceholderToggle, #existingPlaceholderToggle').removeClass('active');\n    $(this).addClass('active');\n\n    // Toggle views\n    if (isNewToggle) {\n      $('#newPlaceholderView').show();\n      $('#existingPlaceholderView').hide();\n    } else {\n      $('#newPlaceholderView').hide();\n      $('#existingPlaceholderView').show();\n      // Ensure we update variables first\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n      // Then update the existing placeholder accordion\n      (0,_core_existingPlaceholderUI_js__WEBPACK_IMPORTED_MODULE_11__.updateExistingPlaceholderAccordion)('#existingPlaceholderAccordion', '#noExistingResults');\n    }\n  });\n\n  // Toggle between New and Existing Placeholder views in modal\n  $('#modalNewPlaceholderToggle, #modalExistingPlaceholderToggle').on('click', function () {\n    var isNewToggle = $(this).attr('id') === 'modalNewPlaceholderToggle';\n\n    // Update button active states\n    $('#modalNewPlaceholderToggle, #modalExistingPlaceholderToggle').removeClass('active');\n    $(this).addClass('active');\n\n    // Toggle views\n    if (isNewToggle) {\n      $('#modalNewPlaceholderView').show();\n      $('#modalExistingPlaceholderView').hide();\n    } else {\n      $('#modalNewPlaceholderView').hide();\n      $('#modalExistingPlaceholderView').show();\n      // Ensure we update variables first\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n      // Then update the existing placeholder accordion\n      (0,_core_existingPlaceholderUI_js__WEBPACK_IMPORTED_MODULE_11__.updateExistingPlaceholderAccordion)('#modalExistingPlaceholderAccordion', '#modalNoExistingResults');\n    }\n  });\n\n  // Initialize existing placeholder events\n  (0,_core_existingPlaceholderUI_js__WEBPACK_IMPORTED_MODULE_11__.initExistingPlaceholderEvents)();\n\n  // Add custom placeholder button\n  $('#addCustomPlaceholderBtn').on('click', function () {\n    var raw = $('#placeholderSearch').val();\n    var usage = $('input[name=\"customPlaceholderType\"]:checked').val() || \"generic\";\n    if (usage === \"noun\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"noun\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection)(\"NN_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else if (usage === \"verb\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"verb\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection)(\"VB_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw);\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.insertPlaceholderFromCustom)(raw);\n    }\n    $('#placeholderSearch').val('');\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n  });\n\n  // Modal add custom placeholder button\n  $('#modalAddCustomPlaceholderBtn').on('click', function () {\n    var raw = $('#modalPlaceholderSearch').val();\n    var usage = $('input[name=\"modalCustomPlaceholderType\"]:checked').val() || \"generic\";\n    if (usage === \"noun\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"noun\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection)(\"NN_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else if (usage === \"verb\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"verb\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection)(\"VB_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw);\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.insertPlaceholderFromCustom)(raw);\n    }\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n    $('#placeholderModal').modal('hide');\n    $('#modalPlaceholderSearch').val('');\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n  });\n\n  // Search modal placeholder input\n  $('#modalPlaceholderSearchInput').on('input', function () {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch = $(this).val().trim().toLowerCase();\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n  });\n\n  // NEW: Chapter management events\n  $('#chapterSelector').on('change', handleChapterChange);\n  $('#addChapterBtn').on('click', handleAddChapter);\n  $('#saveChapterBtn').on('click', handleSaveChapter);\n  $('#deleteChapterBtn').on('click', handleDeleteChapter);\n\n  // NEW: Play chapter navigation events\n  $('#playChapterSelector').on('change', handlePlayChapterChange);\n  $('#prevChapterBtn').on('click', handlePrevChapter);\n  $('#nextChapterBtn').on('click', handleNextChapter);\n\n  // The remaining initialization code follows\n  // ... existing code ...\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svcHVibGljL2pzL2hhbmRsZXJzL2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ3FDO0FBQ1E7QUFDSDtBQUNZO0FBQ0E7QUFlckI7QUFDaUM7QUFPL0I7QUFDYztBQUNsQixDQUFDO0FBQ21CO0FBQ21HOztBQUV0SjtBQUNBLElBQU0rQixzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXNCQSxDQUFJQyxZQUFZLEVBQUVDLFdBQVcsRUFBSztFQUMxRCxJQUFJakMsc0RBQUssQ0FBQ2tDLG9CQUFvQixJQUFJbEMsc0RBQUssQ0FBQ21DLHNCQUFzQixFQUFFO0lBQzVEcEIsZ0ZBQXlCLENBQUNmLHNEQUFLLENBQUNtQyxzQkFBc0IsRUFBRUgsWUFBWSxFQUFFQyxXQUFXLENBQUM7SUFDbEZqQyxzREFBSyxDQUFDa0Msb0JBQW9CLEdBQUcsS0FBSztJQUNsQ2xDLHNEQUFLLENBQUNtQyxzQkFBc0IsR0FBRyxJQUFJO0lBQ25DQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLE1BQU0sQ0FBQztFQUN4QyxDQUFDLE1BQU07SUFDSDtJQUNBLElBQUlMLFlBQVksS0FBSyxTQUFTLEVBQUU7TUFDNUJwQiw4RUFBdUIsQ0FBQyxDQUFDO01BQUMwQixJQUFJO01BQzlCRixDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQ0csR0FBRyxDQUFDLEVBQUUsQ0FBQztNQUMvQmxDLGlGQUEwQixDQUFDLHVCQUF1QixFQUFFLFlBQVksRUFBRUwsc0RBQUssQ0FBQ3dDLHdCQUF3QixDQUFDO01BQ2pHO01BQ0FKLENBQUMsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDSyxJQUFJLENBQUMsQ0FBQztNQUM1QztJQUNKO0lBQ0EsSUFBSVQsWUFBWSxDQUFDVSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDL0IsSUFBSVYsWUFBWSxLQUFLLFdBQVcsRUFBRTtRQUM5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Q0FBQztFQUNwSCxDQUFDLENBQUM7O0VBRUY7RUFDQTdKLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDbUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZO0lBQ3REdkksc0RBQUssQ0FBQ2lNLDZCQUE2QixHQUFHN0osQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDRyxHQUFHLENBQUMsQ0FBQyxDQUFDa0MsSUFBSSxDQUFDLENBQUMsQ0FBQ2dMLFdBQVcsQ0FBQyxDQUFDO0lBQ3hFcFAsaUZBQTBCLENBQUMsNEJBQTRCLEVBQUUsaUJBQWlCLEVBQUVMLHNEQUFLLENBQUNpTSw2QkFBNkIsQ0FBQztFQUNwSCxDQUFDLENBQUM7O0VBRUY7RUFDQTdKLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDbUcsRUFBRSxDQUFDLFFBQVEsRUFBRVUsbUJBQW1CLENBQUM7RUFDdkQ3RyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ21HLEVBQUUsQ0FBQyxPQUFPLEVBQUVlLGdCQUFnQixDQUFDO0VBQ2pEbEgsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUNtRyxFQUFFLENBQUMsT0FBTyxFQUFFaUIsaUJBQWlCLENBQUM7RUFDbkRwSCxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQ21HLEVBQUUsQ0FBQyxPQUFPLEVBQUVrQixtQkFBbUIsQ0FBQzs7RUFFdkQ7RUFDQXJILENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDbUcsRUFBRSxDQUFDLFFBQVEsRUFBRXFCLHVCQUF1QixDQUFDO0VBQy9EeEgsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUNtRyxFQUFFLENBQUMsT0FBTyxFQUFFdUIsaUJBQWlCLENBQUM7RUFDbkQxSCxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQ21HLEVBQUUsQ0FBQyxPQUFPLEVBQUUwQixpQkFBaUIsQ0FBQzs7RUFFbkQ7RUFDQTtBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFua2Jvb2svLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svcHVibGljL2pzL2hhbmRsZXJzL2V2ZW50cy5qcz80YzM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHB1YmxpYy9qcy9oYW5kbGVycy9ldmVudHMuanNcbmltcG9ydCBzdGF0ZSBmcm9tICcuLi9jb3JlL3N0YXRlLmpzJztcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICcuLi9kYXRhL3N0b3JhZ2UuanMnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi91dGlscy91dGlscy5qcyc7XG5pbXBvcnQgeyBTdHJpbmdVdGlscyB9IGZyb20gJy4uL3V0aWxzL1N0cmluZ1V0aWxzLmpzJztcbmltcG9ydCB7IFR5cGVIZWxwZXJzIH0gZnJvbSAnLi4vdXRpbHMvdHlwZUhlbHBlcnMuanMnO1xuaW1wb3J0IHsgXG4gICAgdXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24sIFxuICAgIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IsIFxuICAgIGdlbmVyYXRlTGVnYWN5VGV4dCxcbiAgICBhZGRDdXN0b21QbGFjZWhvbGRlcixcbiAgICBzaG93Tm91bk51bWJlclNlbGVjdGlvbixcbiAgICBzaG93VmVyYlRlbnNlU2VsZWN0aW9uLFxuICAgIGluc2VydFBsYWNlaG9sZGVyRnJvbUN1c3RvbSxcbiAgICBwaWNrUHJvbm91bkZvcm1BbmRHcm91cCxcbiAgICB1cGRhdGVWYXJpYWJsZXNMaXN0LFxuICAgIGR1cGxpY2F0ZVBsYWNlaG9sZGVyLFxuICAgIHVwZGF0ZUV4aXN0aW5nUGxhY2Vob2xkZXIsXG4gICAgaW5zZXJ0UGxhY2Vob2xkZXIsXG4gICAgc2hvd1BlcnNvblR5cGVTZWxlY3Rpb25cbn0gZnJvbSAnLi4vY29yZS9wbGFjZWhvbGRlcnMuanMnO1xuaW1wb3J0IHsgYnVpbGRGaWxsRm9ybSwgdmFsaWRhdGVJbnB1dEZvcm0gfSBmcm9tICcuLi91aS9mb3Jtcy5qcyc7XG5pbXBvcnQgeyBcbiAgICBmaWxsUGxhY2Vob2xkZXJzLCBcbiAgICBwYXJzZVN0b3J5RmlsZSwgXG4gICAgZm9ybWF0U3RvcnlGb3JFeHBvcnQsIFxuICAgIGNyZWF0ZUZpbGVuYW1lRnJvbVRpdGxlLFxuICAgIHJlc2V0U3RvcnlTdGF0ZVxufSBmcm9tICcuLi9jb3JlL3N0b3J5UHJvY2Vzc29yLmpzJztcbmltcG9ydCAqIGFzIGRvbVV0aWxzIGZyb20gJy4uL3V0aWxzL2RvbVV0aWxzLmpzJztcbmltcG9ydCBTd2FsIGZyb20gJ3N3ZWV0YWxlcnQyJzsgLy8gRW5zdXJlIFN3YWwgaXMgaW1wb3J0ZWQgaWYgdXNlZFxuaW1wb3J0IHsgc2hvd1RvYXN0IH0gZnJvbSAnLi4vdWkvbm90aWZpY2F0aW9ucy5qcyc7XG5pbXBvcnQgeyB1cGRhdGVFeGlzdGluZ1BsYWNlaG9sZGVyQWNjb3JkaW9uLCBpbml0RXhpc3RpbmdQbGFjZWhvbGRlckV2ZW50cywgZm9yY2VVcGRhdGVFeGlzdGluZ1BsYWNlaG9sZGVycyB9IGZyb20gJy4uL2NvcmUvZXhpc3RpbmdQbGFjZWhvbGRlclVJLmpzJztcblxuLy8gSGFuZGxlIHBsYWNlaG9sZGVyIGJ1dHRvbiBjbGlja1xuY29uc3QgaGFuZGxlUGxhY2Vob2xkZXJDbGljayA9IChpbnRlcm5hbFR5cGUsIGRpc3BsYXlOYW1lKSA9PiB7XG4gICAgaWYgKHN0YXRlLmlzRWRpdGluZ1BsYWNlaG9sZGVyICYmIHN0YXRlLmN1cnJlbnRFZGl0aW5nVmFyaWFibGUpIHtcbiAgICAgICAgdXBkYXRlRXhpc3RpbmdQbGFjZWhvbGRlcihzdGF0ZS5jdXJyZW50RWRpdGluZ1ZhcmlhYmxlLCBpbnRlcm5hbFR5cGUsIGRpc3BsYXlOYW1lKTtcbiAgICAgICAgc3RhdGUuaXNFZGl0aW5nUGxhY2Vob2xkZXIgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuY3VycmVudEVkaXRpbmdWYXJpYWJsZSA9IG51bGw7XG4gICAgICAgICQoJyNwbGFjZWhvbGRlck1vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igc3BlY2lhbGl6ZWQgdHlwZXMgdGhhdCBoYXZlIHRoZWlyIG93biBtb2RhbCBjaGFpbnNcbiAgICAgICAgaWYgKGludGVybmFsVHlwZSA9PT0gXCJQUk9OT1VOXCIpIHtcbiAgICAgICAgICAgIHBpY2tQcm9ub3VuRm9ybUFuZEdyb3VwKCk7bm9kZVxuICAgICAgICAgICAgJCgnI3BsYWNlaG9sZGVyU2VhcmNoJykudmFsKCcnKTtcbiAgICAgICAgICAgIHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uKCcjcGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI25vUmVzdWx0cycsIHN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlclNlYXJjaCk7XG4gICAgICAgICAgICAvLyBIaWRlIHRoZSBhY2NvcmRpb24gY29udGFpbmVyIGFmdGVyIHNlbGVjdGluZ1xuICAgICAgICAgICAgJCgnLnBsYWNlaG9sZGVyLWFjY29yZGlvbi1jb250YWluZXInKS5oaWRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVybmFsVHlwZS5zdGFydHNXaXRoKFwiTk5cIikpIHtcbiAgICAgICAgICAgIGlmIChpbnRlcm5hbFR5cGUgPT09IFwiTk5fUGVyc29uXCIpIHtcbiAgICAgICAgICAgICAgICBzaG93UGVyc29uVHlwZVNlbGVjdGlvbihpbnRlcm5hbFR5cGUsIGRpc3BsYXlOYW1lKTtcbiAgICAgICAgICAgICAgICAkKCcjcGxhY2Vob2xkZXJTZWFyY2gnKS52YWwoJycpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uKCcjcGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI25vUmVzdWx0cycsIHN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlclNlYXJjaCk7XG4gICAgICAgICAgICAgICAgLy8gSGlkZSB0aGUgYWNjb3JkaW9uIGNvbnRhaW5lciBhZnRlciBzZWxlY3RpbmdcbiAgICAgICAgICAgICAgICAkKCcucGxhY2Vob2xkZXItYWNjb3JkaW9uLWNvbnRhaW5lcicpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaG93Tm91bk51bWJlclNlbGVjdGlvbihpbnRlcm5hbFR5cGUsIGRpc3BsYXlOYW1lKTtcbiAgICAgICAgICAgICQoJyNwbGFjZWhvbGRlclNlYXJjaCcpLnZhbCgnJyk7XG4gICAgICAgICAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI3BsYWNlaG9sZGVyQWNjb3JkaW9uJywgJyNub1Jlc3VsdHMnLCBzdGF0ZS5jdXJyZW50UGxhY2Vob2xkZXJTZWFyY2gpO1xuICAgICAgICAgICAgLy8gSGlkZSB0aGUgYWNjb3JkaW9uIGNvbnRhaW5lciBhZnRlciBzZWxlY3RpbmdcbiAgICAgICAgICAgICQoJy5wbGFjZWhvbGRlci1hY2NvcmRpb24tY29udGFpbmVyJykuaGlkZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGludGVybmFsVHlwZS5zdGFydHNXaXRoKFwiVkJcIikgfHwgaW50ZXJuYWxUeXBlID09PSBcIk1EXCIpIHtcbiAgICAgICAgICAgIHNob3dWZXJiVGVuc2VTZWxlY3Rpb24oaW50ZXJuYWxUeXBlLCBkaXNwbGF5TmFtZSk7XG4gICAgICAgICAgICAkKCcjcGxhY2Vob2xkZXJTZWFyY2gnKS52YWwoJycpO1xuICAgICAgICAgICAgdXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24oJyNwbGFjZWhvbGRlckFjY29yZGlvbicsICcjbm9SZXN1bHRzJywgc3RhdGUuY3VycmVudFBsYWNlaG9sZGVyU2VhcmNoKTtcbiAgICAgICAgICAgIC8vIEhpZGUgdGhlIGFjY29yZGlvbiBjb250YWluZXIgYWZ0ZXIgc2VsZWN0aW5nXG4gICAgICAgICAgICAkKCcucGxhY2Vob2xkZXItYWNjb3JkaW9uLWNvbnRhaW5lcicpLmhpZGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvciBkaXJlY3QgcGxhY2Vob2xkZXIgaW5zZXJ0aW9uIChub24tcHJvbm91biwgbm9uLW5vdW4sIG5vbi12ZXJiKVxuICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIG1vZGlmeSBzdGF0ZS5sYXN0U2VsZWN0ZWRUZXh0IGhlcmUgYXMgaXQgc2hvdWxkIGFscmVhZHkgYmUgc2V0XG4gICAgICAgIC8vIGJ5IGhhbmRsZU5ld1BsYWNlaG9sZGVyIHdoZW4gdGhlIHNlbGVjdGlvbiBtZW51IHdhcyBjbGlja2VkXG4gICAgICAgIGluc2VydFBsYWNlaG9sZGVyKGludGVybmFsVHlwZSwgZGlzcGxheU5hbWUsIGZhbHNlKTtcbiAgICAgICAgJCgnI3BsYWNlaG9sZGVyU2VhcmNoJykudmFsKCcnKTtcbiAgICAgICAgdXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24oJyNwbGFjZWhvbGRlckFjY29yZGlvbicsICcjbm9SZXN1bHRzJywgc3RhdGUuY3VycmVudFBsYWNlaG9sZGVyU2VhcmNoKTtcbiAgICAgICAgLy8gSGlkZSB0aGUgYWNjb3JkaW9uIGNvbnRhaW5lciBhZnRlciBpbnNlcnRpbmcgdGhlIHBsYWNlaG9sZGVyXG4gICAgICAgICQoJy5wbGFjZWhvbGRlci1hY2NvcmRpb24tY29udGFpbmVyJykuaGlkZSgpO1xuICAgIH1cbn07XG5cbi8vIEhhbmRsZSBjcmVhdGUgbmV3IHN0b3J5IGJ1dHRvbiBjbGlja1xuY29uc3QgaGFuZGxlQ3JlYXRlTmV3U3RvcnkgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3RhdGUuc3RvcnlIYXNVbnNhdmVkQ2hhbmdlcykge1xuICAgICAgICBkb21VdGlscy5jb25maXJtRGlhbG9nKHtcbiAgICAgICAgICAgIHRpdGxlOiAnVW5zYXZlZCBjaGFuZ2VzJyxcbiAgICAgICAgICAgIHRleHQ6ICdZb3VyIHN0b3J5IGhhcyB1bnNhdmVkIGNoYW5nZXMuIFdvdWxkIHlvdSBsaWtlIHRvIHNhdmUgaXQgdG8gdGhlIHNpdGUgYmVmb3JlIHN0YXJ0aW5nIGEgbmV3IG9uZT8nLFxuICAgICAgICAgICAgc2hvd0RlbnlCdXR0b246IHRydWUsXG4gICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1NhdmUgYW5kIHN0YXJ0IG5ldycsXG4gICAgICAgICAgICBkZW55QnV0dG9uVGV4dDogJ0Rpc2NhcmQgY2hhbmdlcydcbiAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7XG4gICAgICAgICAgICAgICAgU3RvcmFnZS5hZGRDdXJyZW50U3RvcnlUb1NhdmVkU3RvcmllcygpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQocmVzZXRTdG9yeVN0YXRlLCAxMDAwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmlzRGVuaWVkKSB7XG4gICAgICAgICAgICAgICAgZG9tVXRpbHMuY29uZmlybURpYWxvZyh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQXJlIHlvdSBzdXJlPycsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdUaGlzIHdpbGwgZGlzY2FyZCB5b3VyIGN1cnJlbnQgdW5zYXZlZCBzdG9yeS4nLFxuICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1llcywgc3RhcnQgbmV3J1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmlzQ29uZmlybWVkKSByZXNldFN0b3J5U3RhdGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG9tVXRpbHMuY29uZmlybURpYWxvZyh7XG4gICAgICAgICAgICB0aXRsZTogJ0FyZSB5b3Ugc3VyZT8nLFxuICAgICAgICAgICAgdGV4dDogJ1RoaXMgd2lsbCBkaXNjYXJkIHlvdXIgY3VycmVudCBzdG9yeS4nLFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMsIHN0YXJ0IG5ldydcbiAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLmlzQ29uZmlybWVkKSByZXNldFN0b3J5U3RhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuLy8gSGFuZGxlIGNsZWFyIGZvcm0gYnV0dG9uIGNsaWNrXG5jb25zdCBoYW5kbGVDbGVhckZvcm0gPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3RhdGUuc3RvcnlIYXNVbnNhdmVkQ2hhbmdlcykge1xuICAgICAgICBkb21VdGlscy5jb25maXJtRGlhbG9nKHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ2xlYXIgRm9ybScsXG4gICAgICAgICAgICB0ZXh0OiAnWW91IGhhdmUgdW5zYXZlZCBjaGFuZ2VzLiBXb3VsZCB5b3UgbGlrZSB0byBzYXZlIHlvdXIgc3RvcnkgdG8gdGhlIHNpdGUgYmVmb3JlIGNsZWFyaW5nIHRoZSBmb3JtPycsXG4gICAgICAgICAgICBzaG93RGVueUJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnU2F2ZSBmaXJzdCcsXG4gICAgICAgICAgICBkZW55QnV0dG9uVGV4dDogJ0NsZWFyIHdpdGhvdXQgc2F2aW5nJ1xuICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHtcbiAgICAgICAgICAgICAgICBTdG9yYWdlLmFkZEN1cnJlbnRTdG9yeVRvU2F2ZWRTdG9yaWVzKCk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChyZXNldFN0b3J5U3RhdGUsIDEwMDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuaXNEZW5pZWQpIHtcbiAgICAgICAgICAgICAgICBkb21VdGlscy5jb25maXJtRGlhbG9nKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdBcmUgeW91IHN1cmU/JyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1RoaXMgd2lsbCBjbGVhciB5b3VyIGN1cnJlbnQgZm9ybSBhbmQgZGlzY2FyZCBhbGwgdW5zYXZlZCBjaGFuZ2VzLicsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnWWVzLCBjbGVhciBmb3JtJ1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmlzQ29uZmlybWVkKSByZXNldFN0b3J5U3RhdGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG9tVXRpbHMuY29uZmlybURpYWxvZyh7XG4gICAgICAgICAgICB0aXRsZTogJ0NsZWFyIEZvcm0nLFxuICAgICAgICAgICAgdGV4dDogJ1RoaXMgd2lsbCBjbGVhciBhbGwgY29udGVudCBmcm9tIHRoZSBjdXJyZW50IGZvcm0uIEFyZSB5b3Ugc3VyZT8nLFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMsIGNsZWFyIGZvcm0nXG4gICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5pc0NvbmZpcm1lZCkgcmVzZXRTdG9yeVN0YXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbi8vIEhhbmRsZSBnZW5lcmF0ZSBzdG9yeSBidXR0b24gY2xpY2tcbmNvbnN0IGhhbmRsZUdlbmVyYXRlU3RvcnkgPSAoKSA9PiB7XG4gICAgLy8gVXNlIHRoZSBmb3JtIHZhbGlkYXRpb24gZnVuY3Rpb24gZnJvbSBmb3Jtcy5qc1xuICAgIGlmICghdmFsaWRhdGVJbnB1dEZvcm0oKSkge1xuICAgICAgICByZXR1cm47IC8vIFZhbGlkYXRpb24gZmFpbGVkXG4gICAgfVxuICAgIFxuICAgIC8vIENvbGxlY3QgdmFsdWVzIGZyb20gdGhlIGlucHV0IGZvcm1cbiAgICBjb25zdCBpbnB1dEZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRGb3JtJyk7XG4gICAgY29uc3QgaW5wdXRzID0gaW5wdXRGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJ0ZXh0XCJdJyk7XG4gICAgXG4gICAgLy8gUmVzZXQgZmlsbFZhbHVlc1xuICAgIHN0YXRlLmZpbGxWYWx1ZXMgPSB7fTtcbiAgICBcbiAgICAvLyBQb3B1bGF0ZSBmaWxsVmFsdWVzIHdpdGggdGhlIHZhbHVlcyBmcm9tIHRoZSBpbnB1dCBmaWVsZHNcbiAgICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gaW5wdXQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG4gICAgICAgIGlmIChpZCAmJiBpbnB1dC52YWx1ZS50cmltKCkgIT09ICcnKSB7XG4gICAgICAgICAgICBzdGF0ZS5maWxsVmFsdWVzW2lkXSA9IGlucHV0LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDb2xsZWN0ZWQgaW5wdXQgdmFsdWUgZm9yICR7aWR9OiBcIiR7aW5wdXQudmFsdWUudHJpbSgpfVwiYCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSB0aGUgZmluYWwgc3Rvcnkgd2l0aCByZXBsYWNlbWVudHNcbiAgICBsZXQgZmluYWwgPSBnZW5lcmF0ZUxlZ2FjeVRleHQoKTtcbiAgICBmaW5hbCA9IGZpbGxQbGFjZWhvbGRlcnMoZmluYWwsIHN0YXRlLnZhcmlhYmxlcywgc3RhdGUuZmlsbFZhbHVlcywgc3RhdGUucHJvbm91bkdyb3Vwcyk7XG4gICAgXG4gICAgLy8gVXBkYXRlIHRoZSByZXN1bHQgZGlzcGxheVxuICAgICQoJyNmaW5hbFN0b3J5JykudGV4dChmaW5hbCk7XG4gICAgJCgnI2Rpc3BsYXlUaXRsZScpLnRleHQoJCgnI3N0b3J5VGl0bGUnKS52YWwoKSk7XG4gICAgJCgnI2Rpc3BsYXlBdXRob3InKS50ZXh0KCQoJyNzdG9yeUF1dGhvcicpLnZhbCgpKTtcbiAgICAkKCcjZGlzcGxheVRhZ3MnKS50ZXh0KCQoJyNzdG9yeVRhZ3MnKS52YWwoKSk7XG4gICAgJCgnI3Jlc3VsdCcpLnJlbW92ZUNsYXNzKCdkLW5vbmUnKTtcbiAgICAkKCcjaW5wdXRzJykuYWRkQ2xhc3MoJ2Qtbm9uZScpO1xufTtcblxuLy8gSGFuZGxlIHNhdmUgc3RvcnkgdG8gc2l0ZSBidXR0b25cbmNvbnN0IGhhbmRsZVNhdmVTdG9yeVRvU2l0ZSA9ICgpID0+IHtcbiAgICBTd2FsLmZpcmUoe1xuICAgICAgICB0aXRsZTogJ1NhdmUgU3RvcnknLFxuICAgICAgICBodG1sOiBgXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJzd2FsVGl0bGVcIiBjbGFzcz1cInN3YWwyLWlucHV0XCIgcGxhY2Vob2xkZXI9XCJTdG9yeSBUaXRsZVwiIHZhbHVlPVwiJHskKCcjc3RvcnlUaXRsZScpLnZhbCgpfVwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwic3dhbEF1dGhvclwiIGNsYXNzPVwic3dhbDItaW5wdXRcIiBwbGFjZWhvbGRlcj1cIkF1dGhvclwiIHZhbHVlPVwiJHskKCcjc3RvcnlBdXRob3InKS52YWwoKX1cIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cInN3YWxUYWdzXCIgY2xhc3M9XCJzd2FsMi1pbnB1dFwiIHBsYWNlaG9sZGVyPVwiVGFncyAoY29tbWEgc2VwYXJhdGVkKVwiIHZhbHVlPVwiJHskKCcjc3RvcnlUYWdzJykudmFsKCl9XCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGlkPVwic3dhbFBhc3N3b3JkXCIgY2xhc3M9XCJzd2FsMi1pbnB1dFwiIHBsYWNlaG9sZGVyPVwiUGFzc3dvcmQgKG9wdGlvbmFsKVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJwcmVleGlzdGluZ1RhZ3NDb250YWluZXJcIiBzdHlsZT1cInRleHQtYWxpZ246bGVmdDsgbWFyZ2luLXRvcDoxMHB4O1wiPjwvZGl2PlxuICAgICAgICBgLFxuICAgICAgICBkaWRPcGVuOiAoKSA9PiB7XG4gICAgICAgICAgbG9hZFByZWV4aXN0aW5nVGFncygpO1xuICAgICAgICB9LFxuICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1NhdmUnLFxuICAgICAgICBwcmVDb25maXJtOiAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dhbFRpdGxlJykudmFsdWUsXG4gICAgICAgICAgICBhdXRob3I6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2FsQXV0aG9yJykudmFsdWUsXG4gICAgICAgICAgICB0YWdzOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dhbFRhZ3MnKS52YWx1ZSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dhbFBhc3N3b3JkJykudmFsdWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXN1bHQudmFsdWU7XG4gICAgICAgICAgICAvLyBVcGRhdGUgZmllbGRzIGluIHRoZSBlZGl0b3JcbiAgICAgICAgICAgICQoJyNzdG9yeVRpdGxlJykudmFsKGRhdGEudGl0bGUpO1xuICAgICAgICAgICAgJCgnI3N0b3J5QXV0aG9yJykudmFsKGRhdGEuYXV0aG9yKTtcbiAgICAgICAgICAgICQoJyNzdG9yeVRhZ3MnKS52YWwoZGF0YS50YWdzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHN0b3J5ID0ge1xuICAgICAgICAgICAgICAgIHN0b3J5VGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgc3RvcnlBdXRob3I6IGRhdGEuYXV0aG9yLFxuICAgICAgICAgICAgICAgIHN0b3J5VGV4dDogJCgnI3N0b3J5VGV4dCcpLmh0bWwoKSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHN0YXRlLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICBwcm9ub3VuR3JvdXBzOiBzdGF0ZS5wcm9ub3VuR3JvdXBzLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlQ291bnRzOiBzdGF0ZS52YXJpYWJsZUNvdW50cyxcbiAgICAgICAgICAgICAgICBwcm9ub3VuR3JvdXBDb3VudDogc3RhdGUucHJvbm91bkdyb3VwQ291bnQsXG4gICAgICAgICAgICAgICAgY3VzdG9tUGxhY2Vob2xkZXJzOiBzdGF0ZS5jdXN0b21QbGFjZWhvbGRlcnMsXG4gICAgICAgICAgICAgICAgdGFnczogZGF0YS50YWdzID8gZGF0YS50YWdzLnNwbGl0KCcsJykubWFwKHMgPT4gcy50cmltKCkpIDogW10sXG4gICAgICAgICAgICAgICAgc2F2ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBkYXRhLnBhc3N3b3JkICYmIGRhdGEucGFzc3dvcmQudHJpbSgpICE9PSAnJyA/IGRhdGEucGFzc3dvcmQgOiBudWxsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogJy9hcGkvc2F2ZXN0b3J5JyxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHN0b3J5KSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wLWVuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1N0b3J5IHNhdmVkIHRvIHNpdGUhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyOiAxNTAwXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6ICh4aHIsIHN0YXR1c1RleHQsIGVycm9yVGhyb3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSA0MDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTdG9yeSBleGlzdHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdBIHN0b3J5IHdpdGggdGhpcyB0aXRsZSBhbHJlYWR5IGV4aXN0cy4gT3ZlcndyaXRlPycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMsIG92ZXJ3cml0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05vJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yeS5vdmVyd3JpdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2FwaS9zYXZlc3RvcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoc3RvcnkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcC1lbmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU3Rvcnkgb3ZlcndyaXR0ZW4hJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lcjogMTUwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAoeGhyT3ZlcndyaXRlLCBzdGF0dXNUZXh0T3ZlcndyaXRlLCBlcnJvclRocm93bk92ZXJ3cml0ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0b3JhZ2UuaGFuZGxlQWpheEVycm9yKHhock92ZXJ3cml0ZSwgc3RhdHVzVGV4dE92ZXJ3cml0ZSwgZXJyb3JUaHJvd25PdmVyd3JpdGUsICdGYWlsZWQgdG8gb3ZlcndyaXRlIHN0b3J5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZS5oYW5kbGVBamF4RXJyb3IoeGhyLCBzdGF0dXNUZXh0LCBlcnJvclRocm93biwgJ0ZhaWxlZCB0byBzYXZlIHN0b3J5Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuLy8gTG9hZCBwcmVleGlzdGluZyB0YWdzIGZvciB0YWcgc2VsZWN0b3JcbmNvbnN0IGxvYWRQcmVleGlzdGluZ1RhZ3MgPSAoKSA9PiB7XG4gICAgJC5hamF4KHtcbiAgICAgICAgdXJsOiAnL2FwaS9nZXR0YWdzJyxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgc3VjY2VzczogKHRhZ3MpID0+IHtcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSAkKCcjcHJlZXhpc3RpbmdUYWdzQ29udGFpbmVyJyk7XG4gICAgICAgICAgICBjb250YWluZXIuZW1wdHkoKTtcbiAgICAgICAgICAgIGlmICh0YWdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKCc8cD5TZWxlY3QgYSB0YWc6PC9wPicpO1xuICAgICAgICAgICAgICAgIHRhZ3MuZm9yRWFjaCh0YWcgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBidG4gPSAkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IG0tMSBwcmVleGlzdGluZy10YWctYnRuXCI+PC9idXR0b24+Jyk7XG4gICAgICAgICAgICAgICAgICAgIGJ0bi50ZXh0KHRhZyk7XG4gICAgICAgICAgICAgICAgICAgIGJ0bi5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudCA9ICQoJyNzd2FsVGFncycpLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRhZ3NBcnIgPSBjdXJyZW50ID8gY3VycmVudC5zcGxpdCgnLCcpLm1hcCh0ID0+IHQudHJpbSgpKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFnc0Fyci5pbmNsdWRlcyh0YWcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnc0Fyci5wdXNoKHRhZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3N3YWxUYWdzJykudmFsKHRhZ3NBcnIuam9pbignLCAnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKGJ0bik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiAoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBwcmVleGlzdGluZyB0YWdzJywgZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuLy8gTkVXOiBIYW5kbGUgY2hhcHRlciBzZWxlY3RvciBjaGFuZ2VcbmNvbnN0IGhhbmRsZUNoYXB0ZXJDaGFuZ2UgPSAoKSA9PiB7XG4gICAgY29uc3QgY2hhcHRlck51bWJlciA9ICQoJyNjaGFwdGVyU2VsZWN0b3InKS52YWwoKTtcbiAgICBcbiAgICAvLyBGaXJzdCBjaGVjayBpZiB3ZSBuZWVkIHRvIHNhdmUgdGhlIGN1cnJlbnQgY2hhcHRlclxuICAgIGlmIChzdGF0ZS5zdG9yeUhhc1Vuc2F2ZWRDaGFuZ2VzKSB7XG4gICAgICAgIGRvbVV0aWxzLmNvbmZpcm1EaWFsb2coe1xuICAgICAgICAgICAgdGl0bGU6ICdVbnNhdmVkIGNoYW5nZXMnLFxuICAgICAgICAgICAgdGV4dDogJ1lvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcyB0byB0aGUgY3VycmVudCBjaGFwdGVyLiBXb3VsZCB5b3UgbGlrZSB0byBzYXZlIGJlZm9yZSBzd2l0Y2hpbmc/JyxcbiAgICAgICAgICAgIHNob3dEZW55QnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdTYXZlIGFuZCBzd2l0Y2gnLFxuICAgICAgICAgICAgZGVueUJ1dHRvblRleHQ6ICdEaXNjYXJkIGNoYW5nZXMnXG4gICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkge1xuICAgICAgICAgICAgICAgIC8vIFNhdmUgY3VycmVudCBjaGFwdGVyIGZpcnN0XG4gICAgICAgICAgICAgICAgU3RvcmFnZS5zYXZlQ3VycmVudENoYXB0ZXIoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBUaGVuIGxvYWQgdGhlIHNlbGVjdGVkIGNoYXB0ZXJcbiAgICAgICAgICAgICAgICBTdG9yYWdlLmxvYWRDaGFwdGVyKHN0YXRlLmN1cnJlbnRTdG9yeUlkLCBjaGFwdGVyTnVtYmVyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmlzRGVuaWVkKSB7XG4gICAgICAgICAgICAgICAgLy8gRGlzY2FyZCBjaGFuZ2VzIGFuZCBsb2FkIHRoZSBzZWxlY3RlZCBjaGFwdGVyXG4gICAgICAgICAgICAgICAgU3RvcmFnZS5sb2FkQ2hhcHRlcihzdGF0ZS5jdXJyZW50U3RvcnlJZCwgY2hhcHRlck51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vIHVuc2F2ZWQgY2hhbmdlcywganVzdCBsb2FkIHRoZSBzZWxlY3RlZCBjaGFwdGVyXG4gICAgICAgIFN0b3JhZ2UubG9hZENoYXB0ZXIoc3RhdGUuY3VycmVudFN0b3J5SWQsIGNoYXB0ZXJOdW1iZXIpO1xuICAgIH1cbn07XG5cbi8vIE5FVzogSGFuZGxlIGFkZCBjaGFwdGVyIGJ1dHRvbiBjbGlja1xuY29uc3QgaGFuZGxlQWRkQ2hhcHRlciA9ICgpID0+IHtcbiAgICBTdG9yYWdlLmFkZENoYXB0ZXJUb0N1cnJlbnRTdG9yeSgpO1xufTtcblxuLy8gTkVXOiBIYW5kbGUgc2F2ZSBjaGFwdGVyIGJ1dHRvbiBjbGlja1xuY29uc3QgaGFuZGxlU2F2ZUNoYXB0ZXIgPSAoKSA9PiB7XG4gICAgU3RvcmFnZS5zYXZlQ3VycmVudENoYXB0ZXIoKTtcbn07XG5cbi8vIE5FVzogSGFuZGxlIGRlbGV0ZSBjaGFwdGVyIGJ1dHRvbiBjbGlja1xuY29uc3QgaGFuZGxlRGVsZXRlQ2hhcHRlciA9ICgpID0+IHtcbiAgICBjb25zdCBjaGFwdGVyTnVtYmVyID0gcGFyc2VJbnQoJCgnI2NoYXB0ZXJTZWxlY3RvcicpLnZhbCgpKTtcbiAgICBpZiAoY2hhcHRlck51bWJlciA9PT0gMCkge1xuICAgICAgICBzaG93VG9hc3QoJ0Nhbm5vdCBkZWxldGUgdGhlIG1haW4gc3RvcnknLCAnZXJyb3InKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBTdG9yYWdlLmRlbGV0ZUNoYXB0ZXIoc3RhdGUuY3VycmVudFN0b3J5SWQsIGNoYXB0ZXJOdW1iZXIpO1xufTtcblxuLy8gTkVXOiBIYW5kbGUgcGxheSBjaGFwdGVyIHNlbGVjdGlvbiBjaGFuZ2VcbmNvbnN0IGhhbmRsZVBsYXlDaGFwdGVyQ2hhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IGNoYXB0ZXJOdW1iZXIgPSAkKCcjcGxheUNoYXB0ZXJTZWxlY3RvcicpLnZhbCgpO1xuICAgIFN0b3JhZ2Uuc3dpdGNoUGxheUNoYXB0ZXIoY2hhcHRlck51bWJlcik7XG59O1xuXG4vLyBORVc6IEhhbmRsZSBwcmV2aW91cyBjaGFwdGVyIGJ1dHRvbiBjbGlja1xuY29uc3QgaGFuZGxlUHJldkNoYXB0ZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudENoYXB0ZXIgPSBwYXJzZUludCgkKCcjcGxheUNoYXB0ZXJTZWxlY3RvcicpLnZhbCgpKTtcbiAgICBpZiAoY3VycmVudENoYXB0ZXIgPiAwKSB7XG4gICAgICAgICQoJyNwbGF5Q2hhcHRlclNlbGVjdG9yJykudmFsKGN1cnJlbnRDaGFwdGVyIC0gMSkuY2hhbmdlKCk7XG4gICAgfVxufTtcblxuLy8gTkVXOiBIYW5kbGUgbmV4dCBjaGFwdGVyIGJ1dHRvbiBjbGlja1xuY29uc3QgaGFuZGxlTmV4dENoYXB0ZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudENoYXB0ZXIgPSBwYXJzZUludCgkKCcjcGxheUNoYXB0ZXJTZWxlY3RvcicpLnZhbCgpKTtcbiAgICBjb25zdCBtYXhDaGFwdGVyID0gc3RhdGUuYWxsQ2hhcHRlcnMgPyBzdGF0ZS5hbGxDaGFwdGVycy5sZW5ndGggLSAxIDogMDtcbiAgICBcbiAgICBpZiAoY3VycmVudENoYXB0ZXIgPCBtYXhDaGFwdGVyKSB7XG4gICAgICAgICQoJyNwbGF5Q2hhcHRlclNlbGVjdG9yJykudmFsKGN1cnJlbnRDaGFwdGVyICsgMSkuY2hhbmdlKCk7XG4gICAgfVxufTtcblxuLy8gQXR0YWNoIGFsbCBldmVudCBoYW5kbGVyc1xuZXhwb3J0IGNvbnN0IGluaXRFdmVudHMgPSAoKSA9PiB7XG4gICAgLy8gRGVidWc6IENyZWF0ZSBhIHRlc3QgcGxhY2Vob2xkZXIgaWYgdGhlcmUgYXJlIG5vbmUgKGZvciBkZWJ1Z2dpbmcgb25seSAtIHJlbW92ZSBpbiBwcm9kdWN0aW9uKVxuICAgIGNvbnN0IGNyZWF0ZVRlc3RQbGFjZWhvbGRlcnMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ3JlYXRpbmcgdGVzdCBwbGFjZWhvbGRlcnMgZm9yIGRlYnVnZ2luZ1wiKTtcbiAgICAgICAgaWYgKCFzdGF0ZS52YXJpYWJsZXMgfHwgc3RhdGUudmFyaWFibGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY291cGxlIG9mIHRlc3QgcGxhY2Vob2xkZXJzIGluIHRoZSBlZGl0b3JcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9yeVRleHQnKTtcbiAgICAgICAgICAgIGlmIChlZGl0b3IgJiYgZWRpdG9yLmlubmVySFRNTC50cmltKCkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgZWRpdG9yLmlubmVySFRNTCA9ICdUaGlzIGlzIGEgdGVzdCBzdG9yeSB3aXRoIDxzcGFuIGNsYXNzPVwicGxhY2Vob2xkZXJcIiBjb250ZW50ZWRpdGFibGU9XCJmYWxzZVwiIGRhdGEtaWQ9XCJOTl9BbmltYWwxXCIgdGl0bGU9XCJOTl9BbmltYWwxIChub3VuKVwiPmFuaW1hbDwvc3Bhbj4gcGxhY2Vob2xkZXJzLiBUaGVyZSBpcyBhbHNvIGEgPHNwYW4gY2xhc3M9XCJwbGFjZWhvbGRlclwiIGNvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCIgZGF0YS1pZD1cIlZCX0p1bXAxXCIgdGl0bGU9XCJWQl9KdW1wMSAodmVyYilcIj5qdW1wPC9zcGFuPiBwbGFjZWhvbGRlci4nO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB2YXJpYWJsZXMgZnJvbSB0aGUgZWRpdG9yIGNvbnRlbnRcbiAgICAgICAgICAgICAgICB1cGRhdGVWYXJpYWJsZXNGcm9tRWRpdG9yKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUZXN0IHBsYWNlaG9sZGVycyBjcmVhdGVkOlwiLCBzdGF0ZS52YXJpYWJsZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICAvLyBVbmNvbW1lbnQgdGhpcyBsaW5lIHRvIGF1dG9tYXRpY2FsbHkgY3JlYXRlIHRlc3QgcGxhY2Vob2xkZXJzXG4gICAgLy8gY3JlYXRlVGVzdFBsYWNlaG9sZGVycygpO1xuICAgIFxuICAgIC8vIFBsYWNlaG9sZGVyIGJ1dHRvbiBjbGljayBoYW5kbGVyXG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5wbGFjZWhvbGRlci1idG4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgaW50ZXJuYWxUeXBlID0gJCh0aGlzKS5kYXRhKCdpbnRlcm5hbCcpO1xuICAgICAgICBjb25zdCBkaXNwbGF5TmFtZSA9ICQodGhpcykuZGF0YSgnZGlzcGxheScpO1xuICAgICAgICBoYW5kbGVQbGFjZWhvbGRlckNsaWNrKGludGVybmFsVHlwZSwgZGlzcGxheU5hbWUpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIEZpbGwgaW5mbyBpY29uIGNsaWNrIGhhbmRsZXJcbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmZpbGwtaW5mby1pY29uJywgKGUpID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc3QgdHlwZSA9ICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCd0eXBlJyk7XG4gICAgICAgIGNvbnN0IHRvb2x0aXAgPSBUeXBlSGVscGVycy5nZXRUb29sdGlwRm9yVHlwZSh0eXBlKTtcbiAgICAgICAgZG9tVXRpbHMuc2hvd1RvYXN0KHRvb2x0aXAsICdpbmZvJyk7XG4gICAgfSk7XG4gICAgXG4gICAgLy8gQWRkIGFjY29yZGlvbiBpbmZvIGljb24gY2xpY2sgaGFuZGxlclxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuYWNjb3JkaW9uLWluZm8taWNvbicsIChlKSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGNvbnN0IHRvb2x0aXAgPSAkKGUuY3VycmVudFRhcmdldCkuZGF0YSgndG9vbHRpcCcpO1xuICAgICAgICBkb21VdGlscy5zaG93VG9hc3QodG9vbHRpcCwgJ2luZm8nKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBTaG93IG1vcmUgdG9nZ2xlIGV2ZW50IGhhbmRsZXJcbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnNob3ctbW9yZS10b2dnbGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudExpc3QgPSAkKHRoaXMpLmNsb3Nlc3QoJy5saXN0LWdyb3VwJyk7XG4gICAgICAgIGNvbnN0IGhpZGRlbkl0ZW1zID0gcGFyZW50TGlzdC5maW5kKCcuc2Vjb25kYXJ5LXBsYWNlaG9sZGVyLXdyYXBwZXIgLnNlY29uZGFyeS1wbGFjZWhvbGRlcicpO1xuICAgICAgICBjb25zdCBsaW5rID0gJCh0aGlzKTtcbiAgICAgICAgbGluay50ZXh0KGxpbmsudGV4dCgpID09PSAnU2hvdyBNb3JlJyA/ICdTaG93IExlc3MnIDogJ1Nob3cgTW9yZScpO1xuICAgICAgICBoaWRkZW5JdGVtcy50b2dnbGUoKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBBZGQgY29weSB0byBjbGlwYm9hcmQgaGFuZGxlclxuICAgICQoJyNjb3B5U3RvcnknKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbmFsVGV4dCA9ICQoJyNmaW5hbFN0b3J5JykudGV4dCgpO1xuICAgICAgICBkb21VdGlscy5jb3B5VG9DbGlwYm9hcmQoZmluYWxUZXh0KTtcbiAgICB9KTtcblxuICAgIC8vIFNlbGVjdGlvbiBjaGFuZ2VzXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBlZGl0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0b3J5VGV4dFwiKTtcbiAgICAgICAgY29uc3Qgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICBpZiAoc2VsLnJhbmdlQ291bnQgPiAwICYmIGVkaXRvci5jb250YWlucyhzZWwuYW5jaG9yTm9kZSkpIHtcbiAgICAgICAgICAgIHN0YXRlLmxhc3RSYW5nZSA9IHNlbC5nZXRSYW5nZUF0KDApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBBdHRhY2ggc2VhcmNoIGhhbmRsZXJzIHdpdGggYSByZWR1Y2VkIGRlYm91bmNlIGRlbGF5ICg1MG1zKVxuICAgICQoJyNwbGFjZWhvbGRlclNlYXJjaCcpLm9uKCdpbnB1dCcsIFV0aWxzLmRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoVmFsID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gJCgnI3NpZGVQbGFjZWhvbGRlclBhbmVsJykuc2Nyb2xsVG9wKCk7IC8vIFN0b3JlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICAgIHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uKCcjcGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI25vUmVzdWx0cycsIHNlYXJjaFZhbCk7XG4gICAgICAgICQoJyNhZGRDdXN0b21QbGFjZWhvbGRlckJ0bicpLnRleHQoJ0FkZCBcIicgKyBzZWFyY2hWYWwgKyAnXCInKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uIGFmdGVyIHVwZGF0ZSBpZiBuZWVkZWRcbiAgICAgICAgaWYgKHNlYXJjaFZhbCAmJiBzY3JvbGxUb3AgPT09IDApIHtcbiAgICAgICAgICAgICQoJyNzaWRlUGxhY2Vob2xkZXJQYW5lbCcpLnNjcm9sbFRvcCgwKTsgLy8gRW5zdXJlIHN0YXlzIGF0IHRvcFxuICAgICAgICB9XG4gICAgfSwgNTApKTtcblxuICAgICQoJyNtb2RhbFBsYWNlaG9sZGVyU2VhcmNoJykub24oJ2lucHV0JywgVXRpbHMuZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBzZWFyY2hWYWwgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSAkKCcubW9kYWwtYm9keScpLnNjcm9sbFRvcCgpOyAvLyBTdG9yZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICAgICAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI21vZGFsUGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI21vZGFsTm9SZXN1bHRzJywgc2VhcmNoVmFsKTtcbiAgICAgICAgJCgnI21vZGFsQWRkQ3VzdG9tUGxhY2Vob2xkZXJCdG4nKS50ZXh0KCdBZGQgXCInICsgc2VhcmNoVmFsICsgJ1wiJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZXN0b3JlIHNjcm9sbCBwb3NpdGlvbiBhZnRlciB1cGRhdGUgaWYgbmVlZGVkXG4gICAgICAgIGlmIChzZWFyY2hWYWwgJiYgc2Nyb2xsVG9wID09PSAwKSB7XG4gICAgICAgICAgICAkKCcubW9kYWwtYm9keScpLnNjcm9sbFRvcCgwKTsgLy8gRW5zdXJlIHN0YXlzIGF0IHRvcFxuICAgICAgICB9XG4gICAgfSwgNTApKTtcblxuICAgIC8vIEluaXRpYWxpemUgYWNjb3JkaW9uc1xuICAgIHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uKCcjcGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI25vUmVzdWx0cycsIHN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlclNlYXJjaCk7XG4gICAgdXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24oJyNtb2RhbFBsYWNlaG9sZGVyQWNjb3JkaW9uJywgJyNtb2RhbE5vUmVzdWx0cycsIHN0YXRlLmN1cnJlbnRNb2RhbFBsYWNlaG9sZGVyU2VhcmNoKTtcbiAgICBcbiAgICAvLyBJbml0aWFsaXplIGV4aXN0aW5nIHBsYWNlaG9sZGVyIHZpZXcgdG9vIC0gbWFrZSBzdXJlIHBsYWNlaG9sZGVycyBhcmUgbG9hZGVkIHJpZ2h0IGF3YXlcbiAgICB1cGRhdGVWYXJpYWJsZXNGcm9tRWRpdG9yKCk7XG4gICAgZm9yY2VVcGRhdGVFeGlzdGluZ1BsYWNlaG9sZGVycygpO1xuXG4gICAgLy8gRmlsdGVyIHRhZyBpbnB1dCBoYW5kbGVyXG4gICAgJCgnI2ZpbHRlclRhZycpLm9uKCdpbnB1dCcsIFV0aWxzLmRlYm91bmNlKCgpID0+IHtcbiAgICAgICAgU3RvcmFnZS5sb2FkU2F2ZWRTdG9yaWVzTGlzdCgpO1xuICAgIH0sIDMwMCkpO1xuXG4gICAgLy8gU29ydCBvcHRpb24gY2hhbmdlIGhhbmRsZXJcbiAgICAkKCcjc29ydE9wdGlvbicpLm9uKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgIFN0b3JhZ2UubG9hZFNhdmVkU3Rvcmllc0xpc3QoKTtcbiAgICB9KTtcblxuICAgIC8vIEFscGhhYmV0aWNhbCBvcmRlciBidXR0b25cbiAgICAkKCcjYWxwaGFiZXRpY2FsT3JkZXJCdG4nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0YXRlLmZpbGxPcmRlciA9ICdhbHBoYWJldGljYWwnO1xuICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdidG4tb3V0bGluZS1zZWNvbmRhcnknKS5hZGRDbGFzcygnYnRuLW91dGxpbmUtcHJpbWFyeScpO1xuICAgICAgICAkKCcjcmFuZG9tT3JkZXJCdG4nKS5yZW1vdmVDbGFzcygnYnRuLW91dGxpbmUtcHJpbWFyeScpLmFkZENsYXNzKCdidG4tb3V0bGluZS1zZWNvbmRhcnknKTtcbiAgICAgICAgYnVpbGRGaWxsRm9ybSgpO1xuICAgIH0pO1xuXG4gICAgLy8gUmFuZG9tIG9yZGVyIGJ1dHRvblxuICAgICQoJyNyYW5kb21PcmRlckJ0bicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RhdGUuZmlsbE9yZGVyID0gJ3JhbmRvbSc7XG4gICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2J0bi1vdXRsaW5lLXNlY29uZGFyeScpLmFkZENsYXNzKCdidG4tb3V0bGluZS1wcmltYXJ5Jyk7XG4gICAgICAgICQoJyNhbHBoYWJldGljYWxPcmRlckJ0bicpLnJlbW92ZUNsYXNzKCdidG4tb3V0bGluZS1wcmltYXJ5JykuYWRkQ2xhc3MoJ2J0bi1vdXRsaW5lLXNlY29uZGFyeScpO1xuICAgICAgICBidWlsZEZpbGxGb3JtKCk7XG4gICAgfSk7XG5cbiAgICAvLyBUYWcgYXV0b2NvbXBsZXRlXG4gICAgJChcIiNmaWx0ZXJUYWdcIikuYXV0b2NvbXBsZXRlKHtcbiAgICAgICAgc291cmNlOiBmdW5jdGlvbiAocmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2FwaS9nZXR0YWdzJyxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogKHRhZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRUYWdzID0gJC51aS5hdXRvY29tcGxldGUuZmlsdGVyKHRhZ3MsIHJlcXVlc3QudGVybSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlKGZpbHRlcmVkVGFncyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCB0YWdzIGZvciBhdXRvY29tcGxldGUnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZShbXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1pbkxlbmd0aDogMSxcbiAgICAgICAgc2VsZWN0OiAoZXZlbnQsIHVpKSA9PiB7XG4gICAgICAgICAgICAkKFwiI2ZpbHRlclRhZ1wiKS52YWwodWkuaXRlbS52YWx1ZSk7XG4gICAgICAgICAgICAkKFwiI2FwcGx5RmlsdGVyc1wiKS5jbGljaygpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBBcHBseSBmaWx0ZXJzIGJ1dHRvblxuICAgICQoJyNhcHBseUZpbHRlcnMnKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIFN0b3JhZ2UubG9hZFNhdmVkU3Rvcmllc0xpc3QoKTtcbiAgICB9KTtcblxuICAgIC8vIFNoYXJlIHN0b3J5IGJ1dHRvblxuICAgICQoJyNzaGFyZVN0b3J5Jykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBmaW5hbFRleHQgPSAkKCcjZmluYWxTdG9yeScpLnRleHQoKTtcbiAgICAgICAgY29uc3QgdGl0bGUgPSAkKCcjZGlzcGxheVRpdGxlJykudGV4dCgpO1xuICAgICAgICBjb25zdCBhdXRob3IgPSAkKCcjZGlzcGxheUF1dGhvcicpLnRleHQoKTtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGZvcm1hdFN0b3J5Rm9yRXhwb3J0KHRpdGxlLCBhdXRob3IsIGZpbmFsVGV4dCk7XG4gICAgICAgIFxuICAgICAgICBkb21VdGlscy5jb3B5VG9DbGlwYm9hcmQoY29udGVudClcbiAgICAgICAgICAgIC50aGVuKHN1Y2Nlc3MgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnNob3dUb2FzdCgnU3RvcnkgY29waWVkIHRvIGNsaXBib2FyZCEnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5zaG93RXJyb3IoJ0NvcHkgRmFpbGVkJywgJ0ZhaWxlZCB0byBjb3B5IHN0b3J5LiBQbGVhc2UgY29weSBtYW51YWxseS4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIFN0b3J5IGVkaXRvciBpbnB1dCBldmVudFxuICAgICQoJyNzdG9yeVRleHQnKS5vbignaW5wdXQnLCAoKSA9PiB7XG4gICAgICAgIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IoKTtcbiAgICAgICAgc3RhdGUuc3RvcnlIYXNVbnNhdmVkQ2hhbmdlcyA9IHRydWU7XG4gICAgfSk7XG5cbiAgICAvLyBSZW1vdmVkIHVwbG9hZCBzdG9yeSBmdW5jdGlvbmFsaXR5XG5cbiAgICAvLyBTdGFydCBnYW1lIGJ1dHRvblxuICAgICQoJyNzdGFydEdhbWUnKS5vbignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBmb3JtVmFsaWRhdGVkID0gVXRpbHMudmFsaWRhdGVGb3JtSW5wdXRzKFsnI3N0b3J5VGl0bGUnLCAnI3N0b3J5QXV0aG9yJywgJyNzdG9yeVRleHQnXSk7XG4gICAgICAgIGlmICghZm9ybVZhbGlkYXRlZCkge1xuICAgICAgICAgICAgc2hvd1RvYXN0KCdQbGVhc2UgZmlsbCBvdXQgYWxsIHJlcXVpcmVkIGZpZWxkcycsICdlcnJvcicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTYXZlIGN1cnJlbnQgY29udGVudCB0byBzdGF0ZSBmb3IgcHJvY2Vzc2luZ1xuICAgICAgICBzdGF0ZS5zdG9yeVRpdGxlID0gJCgnI3N0b3J5VGl0bGUnKS52YWwoKTtcbiAgICAgICAgc3RhdGUuc3RvcnlBdXRob3IgPSAkKCcjc3RvcnlBdXRob3InKS52YWwoKTtcbiAgICAgICAgc3RhdGUuc3RvcnlUZXh0ID0gJCgnI3N0b3J5VGV4dCcpLmh0bWwoKTtcbiAgICAgICAgXG4gICAgICAgIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE5FVzogSWYgc3RvcnkgaGFzIGNoYXB0ZXJzLCBsb2FkIGFsbCBjaGFwdGVycyBmb3IgcGxheWluZ1xuICAgICAgICBpZiAoc3RhdGUuY3VycmVudFN0b3J5SWQgJiYgc3RhdGUuY2hhcHRlcnMgJiYgc3RhdGUuY2hhcHRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgU3RvcmFnZS5sb2FkQWxsQ2hhcHRlcnNGb3JQbGF5KHN0YXRlLmN1cnJlbnRTdG9yeUlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEp1c3QgYnVpbGQgdGhlIGZvcm0gd2l0aCB0aGUgY3VycmVudCBzdG9yeSB0ZXh0XG4gICAgICAgICAgICBidWlsZEZpbGxGb3JtKCk7XG4gICAgICAgICAgICAkKCcjZWRpdG9yJykuYWRkQ2xhc3MoJ2Qtbm9uZScpO1xuICAgICAgICAgICAgJCgnI2lucHV0cycpLnJlbW92ZUNsYXNzKCdkLW5vbmUnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gR2VuZXJhdGUgc3RvcnkgYnV0dG9uXG4gICAgJCgnI2dlbmVyYXRlU3RvcnknKS5vbignY2xpY2snLCBoYW5kbGVHZW5lcmF0ZVN0b3J5KTtcblxuICAgIC8vIENyZWF0ZSBuZXcgc3RvcnkgYnV0dG9uc1xuICAgICQoJyNjcmVhdGVOZXdTdG9yeTIsICNjcmVhdGVOZXdTdG9yeScpLm9uKCdjbGljaycsIGhhbmRsZUNyZWF0ZU5ld1N0b3J5KTtcbiAgICBcbiAgICAvLyBDbGVhciBmb3JtIGJ1dHRvblxuICAgICQoJyNjbGVhckZvcm1CdG4nKS5vbignY2xpY2snLCBoYW5kbGVDbGVhckZvcm0pO1xuXG4gICAgLy8gU3RvcnkgZWRpdGluZyBmbG93IGJ1dHRvbnNcbiAgICAkKCcjZWRpdFN0b3J5RW50cmllcycpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgYnVpbGRGaWxsRm9ybSgpO1xuICAgICAgICAkKCcjcmVzdWx0JykuYWRkQ2xhc3MoJ2Qtbm9uZScpO1xuICAgICAgICAkKCcjaW5wdXRzJykucmVtb3ZlQ2xhc3MoJ2Qtbm9uZScpO1xuICAgIH0pO1xuICAgIFxuICAgICQoJyNiYWNrVG9FZGl0b3IsICNiYWNrVG9FZGl0b3IyJykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAkKCcjcmVzdWx0LCAjaW5wdXRzJykuYWRkQ2xhc3MoJ2Qtbm9uZScpO1xuICAgICAgICAkKCcjZWRpdG9yJykucmVtb3ZlQ2xhc3MoJ2Qtbm9uZScpO1xuICAgIH0pO1xuXG4gICAgLy8gU2F2ZSBzdG9yeSB0byBzaXRlIGJ1dHRvblxuICAgICQoJyNzYXZlU3RvcnlUb1NpdGUnKS5vbignY2xpY2snLCBoYW5kbGVTYXZlU3RvcnlUb1NpdGUpO1xuXG4gICAgLy8gRG93bmxvYWQgc3RvcnkgYnV0dG9uXG4gICAgJCgnI2Rvd25sb2FkU3RvcnknKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbmFsVGV4dCA9ICQoJyNmaW5hbFN0b3J5JykudGV4dCgpO1xuICAgICAgICBjb25zdCB0aXRsZSA9ICQoJyNkaXNwbGF5VGl0bGUnKS50ZXh0KCk7XG4gICAgICAgIGNvbnN0IGF1dGhvciA9ICQoJyNkaXNwbGF5QXV0aG9yJykudGV4dCgpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gZm9ybWF0U3RvcnlGb3JFeHBvcnQodGl0bGUsIGF1dGhvciwgZmluYWxUZXh0KTtcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBjcmVhdGVGaWxlbmFtZUZyb21UaXRsZSh0aXRsZSk7XG4gICAgICAgIFxuICAgICAgICBkb21VdGlscy5kb3dubG9hZFRleHRGaWxlKGNvbnRlbnQsIGZpbGVOYW1lKTtcbiAgICB9KTtcblxuICAgIC8vIFNhdmUgY29tcGxldGVkIHN0b3J5IGJ1dHRvblxuICAgICQoJyNzYXZlQ29tcGxldGVkU3RvcnknKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIFN0b3JhZ2UuYWRkQ29tcGxldGVkU3RvcnlUb1NhdmVkU3RvcmllcygpO1xuICAgIH0pO1xuXG4gICAgLy8gU2F2ZWQgc3RvcmllcyBidXR0b25zXG4gICAgJCgnI215U2F2ZWRTdG9yaWVzQnRuJykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBTdG9yYWdlLmxvYWRTYXZlZFN0b3JpZXNMaXN0KCk7XG4gICAgICAgICQoJyNzYXZlZFN0b3JpZXNNb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgfSk7XG4gICAgXG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5sb2FkU2F2ZWRTdG9yeUJ0bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSAkKHRoaXMpLmRhdGEoJ2luZGV4Jyk7XG4gICAgICAgICQoJyNzYXZlZFN0b3JpZXNNb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgIFN0b3JhZ2UubG9hZFNhdmVkU3RvcnkoaW5kZXgsIFwicGxheVwiKTtcbiAgICB9KTtcbiAgICBcbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmVkaXRTYXZlZFN0b3J5QnRuJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpbmRleCA9ICQodGhpcykuZGF0YSgnaW5kZXgnKTtcbiAgICAgICAgJCgnI3NhdmVkU3Rvcmllc01vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgU3RvcmFnZS5sb2FkU2F2ZWRTdG9yeShpbmRleCwgXCJlZGl0XCIpO1xuICAgIH0pO1xuICAgIFxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZGVsZXRlU2F2ZWRTdG9yeUJ0bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSAkKHRoaXMpLmRhdGEoJ3RpdGxlJyk7XG4gICAgICAgIGRvbVV0aWxzLmNvbmZpcm1EaWFsb2coe1xuICAgICAgICAgICAgdGl0bGU6ICdEZWxldGUgU3Rvcnk/JyxcbiAgICAgICAgICAgIHRleHQ6ICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgc2F2ZWQgc3Rvcnk/JyxcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnWWVzLCBkZWxldGUgaXQhJ1xuICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIFN0b3JhZ2UuZGVsZXRlU2F2ZWRTdG9yeSh0aXRsZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gUmF0aW5nIHN1Ym1pc3Npb25cbiAgICAkKCcjc3VibWl0UmF0aW5nJykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCByYXRpbmcgPSBwYXJzZUludCgkKCcjc3RvcnlSYXRpbmcnKS52YWwoKSwgMTApO1xuICAgICAgICBpZiAoIXN0YXRlLmN1cnJlbnRTdG9yeUlkKSB7XG4gICAgICAgICAgICBkb21VdGlscy5zaG93RXJyb3IoJ0Vycm9yJywgJ1N0b3J5IElEIG5vdCBmb3VuZC4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiAnL2FwaS9yYXRlU3RvcnknLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoeyBzdG9yeUlkOiBzdGF0ZS5jdXJyZW50U3RvcnlJZCwgcmF0aW5nIH0pLFxuICAgICAgICAgICAgc3VjY2VzczogKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBkb21VdGlscy5zaG93VG9hc3QoYFRoYW5rIHlvdSBmb3IgcmF0aW5nISBOZXcgYXZlcmFnZTogJHtkYXRhLnJhdGluZy50b0ZpeGVkKDEpfSAoJHtkYXRhLnJhdGluZ0NvdW50fSB2b3RlcylgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogKHhociwgc3RhdHVzVGV4dCwgZXJyb3JUaHJvd24pID0+IHtcbiAgICAgICAgICAgICAgICBTdG9yYWdlLmhhbmRsZUFqYXhFcnJvcih4aHIsIHN0YXR1c1RleHQsIGVycm9yVGhyb3duLCAnRmFpbGVkIHRvIHJhdGUgc3RvcnknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBFZGl0b3Iga2V5IGhhbmRsaW5nIGZvciBwbGFjZWhvbGRlcnNcbiAgICAkKCcjc3RvcnlUZXh0Jykub24oJ2tleWRvd24nLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIGlmIChzZWwucmFuZ2VDb3VudCkge1xuICAgICAgICAgICAgbGV0IHJhbmdlID0gc2VsLmdldFJhbmdlQXQoMCk7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiQXJyb3dSaWdodFwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5vZGUgPSBzZWwuYW5jaG9yTm9kZTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgJiYgbm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygncGxhY2Vob2xkZXInKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsLmFuY2hvck9mZnNldCA+PSBub2RlLm5vZGVWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwbGFjZWhvbGRlciA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdSYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdSYW5nZS5zZXRTdGFydEFmdGVyKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1JhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKG5ld1JhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gXCJCYWNrc3BhY2VcIikge1xuICAgICAgICAgICAgICAgIGxldCBub2RlID0gc2VsLmFuY2hvck5vZGU7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFICYmIG5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ3BsYWNlaG9sZGVyJykgJiYgc2VsLmFuY2hvck9mZnNldCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwbGFjZWhvbGRlciA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1JhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3UmFuZ2Uuc2V0U3RhcnRCZWZvcmUocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICBuZXdSYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UobmV3UmFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQWRkIHBsYWNlaG9sZGVyIGJ1dHRvblxuICAgICQoJyNhZGRQbGFjZWhvbGRlckJ0bicpLm9uKCdjbGljaycsICgpID0+IHsgXG4gICAgICAgICQoJyNwbGFjZWhvbGRlck1vZGFsJykubW9kYWwoJ3Nob3cnKTsgXG4gICAgfSk7XG5cbiAgICAvLyBUb2dnbGUgYmV0d2VlbiBOZXcgYW5kIEV4aXN0aW5nIFBsYWNlaG9sZGVyIHZpZXdzIGluIHNpZGViYXJcbiAgICAkKCcjbmV3UGxhY2Vob2xkZXJUb2dnbGUsICNleGlzdGluZ1BsYWNlaG9sZGVyVG9nZ2xlJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGlzTmV3VG9nZ2xlID0gJCh0aGlzKS5hdHRyKCdpZCcpID09PSAnbmV3UGxhY2Vob2xkZXJUb2dnbGUnO1xuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIGJ1dHRvbiBhY3RpdmUgc3RhdGVzXG4gICAgICAgICQoJyNuZXdQbGFjZWhvbGRlclRvZ2dsZSwgI2V4aXN0aW5nUGxhY2Vob2xkZXJUb2dnbGUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICBcbiAgICAgICAgLy8gVG9nZ2xlIHZpZXdzXG4gICAgICAgIGlmIChpc05ld1RvZ2dsZSkge1xuICAgICAgICAgICAgJCgnI25ld1BsYWNlaG9sZGVyVmlldycpLnNob3coKTtcbiAgICAgICAgICAgICQoJyNleGlzdGluZ1BsYWNlaG9sZGVyVmlldycpLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoJyNuZXdQbGFjZWhvbGRlclZpZXcnKS5oaWRlKCk7XG4gICAgICAgICAgICAkKCcjZXhpc3RpbmdQbGFjZWhvbGRlclZpZXcnKS5zaG93KCk7XG4gICAgICAgICAgICAvLyBFbnN1cmUgd2UgdXBkYXRlIHZhcmlhYmxlcyBmaXJzdFxuICAgICAgICAgICAgdXBkYXRlVmFyaWFibGVzRnJvbUVkaXRvcigpO1xuICAgICAgICAgICAgLy8gVGhlbiB1cGRhdGUgdGhlIGV4aXN0aW5nIHBsYWNlaG9sZGVyIGFjY29yZGlvblxuICAgICAgICAgICAgdXBkYXRlRXhpc3RpbmdQbGFjZWhvbGRlckFjY29yZGlvbignI2V4aXN0aW5nUGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI25vRXhpc3RpbmdSZXN1bHRzJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBUb2dnbGUgYmV0d2VlbiBOZXcgYW5kIEV4aXN0aW5nIFBsYWNlaG9sZGVyIHZpZXdzIGluIG1vZGFsXG4gICAgJCgnI21vZGFsTmV3UGxhY2Vob2xkZXJUb2dnbGUsICNtb2RhbEV4aXN0aW5nUGxhY2Vob2xkZXJUb2dnbGUnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgaXNOZXdUb2dnbGUgPSAkKHRoaXMpLmF0dHIoJ2lkJykgPT09ICdtb2RhbE5ld1BsYWNlaG9sZGVyVG9nZ2xlJztcbiAgICAgICAgXG4gICAgICAgIC8vIFVwZGF0ZSBidXR0b24gYWN0aXZlIHN0YXRlc1xuICAgICAgICAkKCcjbW9kYWxOZXdQbGFjZWhvbGRlclRvZ2dsZSwgI21vZGFsRXhpc3RpbmdQbGFjZWhvbGRlclRvZ2dsZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBUb2dnbGUgdmlld3NcbiAgICAgICAgaWYgKGlzTmV3VG9nZ2xlKSB7XG4gICAgICAgICAgICAkKCcjbW9kYWxOZXdQbGFjZWhvbGRlclZpZXcnKS5zaG93KCk7XG4gICAgICAgICAgICAkKCcjbW9kYWxFeGlzdGluZ1BsYWNlaG9sZGVyVmlldycpLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoJyNtb2RhbE5ld1BsYWNlaG9sZGVyVmlldycpLmhpZGUoKTtcbiAgICAgICAgICAgICQoJyNtb2RhbEV4aXN0aW5nUGxhY2Vob2xkZXJWaWV3Jykuc2hvdygpO1xuICAgICAgICAgICAgLy8gRW5zdXJlIHdlIHVwZGF0ZSB2YXJpYWJsZXMgZmlyc3RcbiAgICAgICAgICAgIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IoKTtcbiAgICAgICAgICAgIC8vIFRoZW4gdXBkYXRlIHRoZSBleGlzdGluZyBwbGFjZWhvbGRlciBhY2NvcmRpb25cbiAgICAgICAgICAgIHVwZGF0ZUV4aXN0aW5nUGxhY2Vob2xkZXJBY2NvcmRpb24oJyNtb2RhbEV4aXN0aW5nUGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI21vZGFsTm9FeGlzdGluZ1Jlc3VsdHMnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIEluaXRpYWxpemUgZXhpc3RpbmcgcGxhY2Vob2xkZXIgZXZlbnRzXG4gICAgaW5pdEV4aXN0aW5nUGxhY2Vob2xkZXJFdmVudHMoKTtcblxuICAgIC8vIEFkZCBjdXN0b20gcGxhY2Vob2xkZXIgYnV0dG9uXG4gICAgJCgnI2FkZEN1c3RvbVBsYWNlaG9sZGVyQnRuJykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCByYXcgPSAkKCcjcGxhY2Vob2xkZXJTZWFyY2gnKS52YWwoKTtcbiAgICAgICAgY29uc3QgdXNhZ2UgPSAkKCdpbnB1dFtuYW1lPVwiY3VzdG9tUGxhY2Vob2xkZXJUeXBlXCJdOmNoZWNrZWQnKS52YWwoKSB8fCBcImdlbmVyaWNcIjtcbiAgICAgICAgaWYgKHVzYWdlID09PSBcIm5vdW5cIikge1xuICAgICAgICAgICAgYWRkQ3VzdG9tUGxhY2Vob2xkZXIocmF3LCBcIm5vdW5cIik7XG4gICAgICAgICAgICBzaG93Tm91bk51bWJlclNlbGVjdGlvbihcIk5OX1wiICsgU3RyaW5nVXRpbHMucGFzY2FsQ2FzZShyYXcpLCBTdHJpbmdVdGlscy5uYXR1cmFsRGlzcGxheShyYXcpKTtcbiAgICAgICAgfSBlbHNlIGlmICh1c2FnZSA9PT0gXCJ2ZXJiXCIpIHtcbiAgICAgICAgICAgIGFkZEN1c3RvbVBsYWNlaG9sZGVyKHJhdywgXCJ2ZXJiXCIpO1xuICAgICAgICAgICAgc2hvd1ZlcmJUZW5zZVNlbGVjdGlvbihcIlZCX1wiICsgU3RyaW5nVXRpbHMucGFzY2FsQ2FzZShyYXcpLCBTdHJpbmdVdGlscy5uYXR1cmFsRGlzcGxheShyYXcpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZEN1c3RvbVBsYWNlaG9sZGVyKHJhdyk7XG4gICAgICAgICAgICBpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b20ocmF3KTtcbiAgICAgICAgfVxuICAgICAgICAkKCcjcGxhY2Vob2xkZXJTZWFyY2gnKS52YWwoJycpO1xuICAgICAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI3BsYWNlaG9sZGVyQWNjb3JkaW9uJywgJyNub1Jlc3VsdHMnLCBzdGF0ZS5jdXJyZW50UGxhY2Vob2xkZXJTZWFyY2gpO1xuICAgIH0pO1xuXG4gICAgLy8gTW9kYWwgYWRkIGN1c3RvbSBwbGFjZWhvbGRlciBidXR0b25cbiAgICAkKCcjbW9kYWxBZGRDdXN0b21QbGFjZWhvbGRlckJ0bicpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmF3ID0gJCgnI21vZGFsUGxhY2Vob2xkZXJTZWFyY2gnKS52YWwoKTtcbiAgICAgICAgY29uc3QgdXNhZ2UgPSAkKCdpbnB1dFtuYW1lPVwibW9kYWxDdXN0b21QbGFjZWhvbGRlclR5cGVcIl06Y2hlY2tlZCcpLnZhbCgpIHx8IFwiZ2VuZXJpY1wiO1xuICAgICAgICBpZiAodXNhZ2UgPT09IFwibm91blwiKSB7XG4gICAgICAgICAgICBhZGRDdXN0b21QbGFjZWhvbGRlcihyYXcsIFwibm91blwiKTtcbiAgICAgICAgICAgIHNob3dOb3VuTnVtYmVyU2VsZWN0aW9uKFwiTk5fXCIgKyBTdHJpbmdVdGlscy5wYXNjYWxDYXNlKHJhdyksIFN0cmluZ1V0aWxzLm5hdHVyYWxEaXNwbGF5KHJhdykpO1xuICAgICAgICB9IGVsc2UgaWYgKHVzYWdlID09PSBcInZlcmJcIikge1xuICAgICAgICAgICAgYWRkQ3VzdG9tUGxhY2Vob2xkZXIocmF3LCBcInZlcmJcIik7XG4gICAgICAgICAgICBzaG93VmVyYlRlbnNlU2VsZWN0aW9uKFwiVkJfXCIgKyBTdHJpbmdVdGlscy5wYXNjYWxDYXNlKHJhdyksIFN0cmluZ1V0aWxzLm5hdHVyYWxEaXNwbGF5KHJhdykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWRkQ3VzdG9tUGxhY2Vob2xkZXIocmF3KTtcbiAgICAgICAgICAgIGluc2VydFBsYWNlaG9sZGVyRnJvbUN1c3RvbShyYXcpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVBsYWNlaG9sZGVyQWNjb3JkaW9uKCcjbW9kYWxQbGFjZWhvbGRlckFjY29yZGlvbicsICcjbW9kYWxOb1Jlc3VsdHMnLCBzdGF0ZS5jdXJyZW50TW9kYWxQbGFjZWhvbGRlclNlYXJjaCk7XG4gICAgICAgICQoJyNwbGFjZWhvbGRlck1vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgJCgnI21vZGFsUGxhY2Vob2xkZXJTZWFyY2gnKS52YWwoJycpO1xuICAgICAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI21vZGFsUGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI21vZGFsTm9SZXN1bHRzJywgc3RhdGUuY3VycmVudE1vZGFsUGxhY2Vob2xkZXJTZWFyY2gpO1xuICAgIH0pO1xuXG4gICAgLy8gU2VhcmNoIG1vZGFsIHBsYWNlaG9sZGVyIGlucHV0XG4gICAgJCgnI21vZGFsUGxhY2Vob2xkZXJTZWFyY2hJbnB1dCcpLm9uKCdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RhdGUuY3VycmVudE1vZGFsUGxhY2Vob2xkZXJTZWFyY2ggPSAkKHRoaXMpLnZhbCgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB1cGRhdGVQbGFjZWhvbGRlckFjY29yZGlvbignI21vZGFsUGxhY2Vob2xkZXJBY2NvcmRpb24nLCAnI21vZGFsTm9SZXN1bHRzJywgc3RhdGUuY3VycmVudE1vZGFsUGxhY2Vob2xkZXJTZWFyY2gpO1xuICAgIH0pO1xuXG4gICAgLy8gTkVXOiBDaGFwdGVyIG1hbmFnZW1lbnQgZXZlbnRzXG4gICAgJCgnI2NoYXB0ZXJTZWxlY3RvcicpLm9uKCdjaGFuZ2UnLCBoYW5kbGVDaGFwdGVyQ2hhbmdlKTtcbiAgICAkKCcjYWRkQ2hhcHRlckJ0bicpLm9uKCdjbGljaycsIGhhbmRsZUFkZENoYXB0ZXIpO1xuICAgICQoJyNzYXZlQ2hhcHRlckJ0bicpLm9uKCdjbGljaycsIGhhbmRsZVNhdmVDaGFwdGVyKTtcbiAgICAkKCcjZGVsZXRlQ2hhcHRlckJ0bicpLm9uKCdjbGljaycsIGhhbmRsZURlbGV0ZUNoYXB0ZXIpO1xuICAgIFxuICAgIC8vIE5FVzogUGxheSBjaGFwdGVyIG5hdmlnYXRpb24gZXZlbnRzXG4gICAgJCgnI3BsYXlDaGFwdGVyU2VsZWN0b3InKS5vbignY2hhbmdlJywgaGFuZGxlUGxheUNoYXB0ZXJDaGFuZ2UpO1xuICAgICQoJyNwcmV2Q2hhcHRlckJ0bicpLm9uKCdjbGljaycsIGhhbmRsZVByZXZDaGFwdGVyKTtcbiAgICAkKCcjbmV4dENoYXB0ZXJCdG4nKS5vbignY2xpY2snLCBoYW5kbGVOZXh0Q2hhcHRlcik7XG5cbiAgICAvLyBUaGUgcmVtYWluaW5nIGluaXRpYWxpemF0aW9uIGNvZGUgZm9sbG93c1xuICAgIC8vIC4uLiBleGlzdGluZyBjb2RlIC4uLlxufTsiXSwibmFtZXMiOlsic3RhdGUiLCJTdG9yYWdlIiwiVXRpbHMiLCJTdHJpbmdVdGlscyIsIlR5cGVIZWxwZXJzIiwidXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24iLCJ1cGRhdGVWYXJpYWJsZXNGcm9tRWRpdG9yIiwiZ2VuZXJhdGVMZWdhY3lUZXh0IiwiYWRkQ3VzdG9tUGxhY2Vob2xkZXIiLCJzaG93Tm91bk51bWJlclNlbGVjdGlvbiIsInNob3dWZXJiVGVuc2VTZWxlY3Rpb24iLCJpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b20iLCJwaWNrUHJvbm91bkZvcm1BbmRHcm91cCIsInVwZGF0ZVZhcmlhYmxlc0xpc3QiLCJkdXBsaWNhdGVQbGFjZWhvbGRlciIsInVwZGF0ZUV4aXN0aW5nUGxhY2Vob2xkZXIiLCJpbnNlcnRQbGFjZWhvbGRlciIsInNob3dQZXJzb25UeXBlU2VsZWN0aW9uIiwiYnVpbGRGaWxsRm9ybSIsInZhbGlkYXRlSW5wdXRGb3JtIiwiZmlsbFBsYWNlaG9sZGVycyIsInBhcnNlU3RvcnlGaWxlIiwiZm9ybWF0U3RvcnlGb3JFeHBvcnQiLCJjcmVhdGVGaWxlbmFtZUZyb21UaXRsZSIsInJlc2V0U3RvcnlTdGF0ZSIsImRvbVV0aWxzIiwiU3dhbCIsInNob3dUb2FzdCIsInVwZGF0ZUV4aXN0aW5nUGxhY2Vob2xkZXJBY2NvcmRpb24iLCJpbml0RXhpc3RpbmdQbGFjZWhvbGRlckV2ZW50cyIsImZvcmNlVXBkYXRlRXhpc3RpbmdQbGFjZWhvbGRlcnMiLCJoYW5kbGVQbGFjZWhvbGRlckNsaWNrIiwiaW50ZXJuYWxUeXBlIiwiZGlzcGxheU5hbWUiLCJpc0VkaXRpbmdQbGFjZWhvbGRlciIsImN1cnJlbnRFZGl0aW5nVmFyaWFibGUiLCIkIiwibW9kYWwiLCJub2RlIiwidmFsIiwiY3VycmVudFBsYWNlaG9sZGVyU2VhcmNoIiwiaGlkZSIsInN0YXJ0c1dpdGgiLCJoYW5kbGVDcmVhdGVOZXdTdG9yeSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3J5SGFzVW5zYXZlZENoYW5nZXMiLCJjb25maXJtRGlhbG9nIiwidGl0bGUiLCJ0ZXh0Iiwic2hvd0RlbnlCdXR0b24iLCJjb25maXJtQnV0dG9uVGV4dCIsImRlbnlCdXR0b25UZXh0IiwidGhlbiIsInJlc3VsdCIsImlzQ29uZmlybWVkIiwiYWRkQ3VycmVudFN0b3J5VG9TYXZlZFN0b3JpZXMiLCJzZXRUaW1lb3V0IiwiaXNEZW5pZWQiLCJyZXMiLCJoYW5kbGVDbGVhckZvcm0iLCJoYW5kbGVHZW5lcmF0ZVN0b3J5IiwiaW5wdXRGb3JtIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlucHV0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWxsVmFsdWVzIiwiZm9yRWFjaCIsImlucHV0IiwiaWQiLCJnZXRBdHRyaWJ1dGUiLCJ2YWx1ZSIsInRyaW0iLCJjb25zb2xlIiwibG9nIiwiY29uY2F0IiwiZmluYWwiLCJ2YXJpYWJsZXMiLCJwcm9ub3VuR3JvdXBzIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImhhbmRsZVNhdmVTdG9yeVRvU2l0ZSIsImZpcmUiLCJodG1sIiwiZGlkT3BlbiIsImxvYWRQcmVleGlzdGluZ1RhZ3MiLCJzaG93Q2FuY2VsQnV0dG9uIiwicHJlQ29uZmlybSIsImF1dGhvciIsInRhZ3MiLCJwYXNzd29yZCIsImRhdGEiLCJzdG9yeSIsInN0b3J5VGl0bGUiLCJzdG9yeUF1dGhvciIsInN0b3J5VGV4dCIsInZhcmlhYmxlQ291bnRzIiwicHJvbm91bkdyb3VwQ291bnQiLCJjdXN0b21QbGFjZWhvbGRlcnMiLCJzcGxpdCIsIm1hcCIsInMiLCJzYXZlZEF0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiYWpheCIsInVybCIsIm1ldGhvZCIsImNvbnRlbnRUeXBlIiwiSlNPTiIsInN0cmluZ2lmeSIsInN1Y2Nlc3MiLCJ0b2FzdCIsInBvc2l0aW9uIiwiaWNvbiIsInNob3dDb25maXJtQnV0dG9uIiwidGltZXIiLCJlcnJvciIsInhociIsInN0YXR1c1RleHQiLCJlcnJvclRocm93biIsInN0YXR1cyIsImNhbmNlbEJ1dHRvblRleHQiLCJvdmVyd3JpdGUiLCJ4aHJPdmVyd3JpdGUiLCJzdGF0dXNUZXh0T3ZlcndyaXRlIiwiZXJyb3JUaHJvd25PdmVyd3JpdGUiLCJoYW5kbGVBamF4RXJyb3IiLCJjb250YWluZXIiLCJlbXB0eSIsImxlbmd0aCIsImFwcGVuZCIsInRhZyIsImJ0biIsIm9uIiwiY3VycmVudCIsInRhZ3NBcnIiLCJ0IiwiZmlsdGVyIiwiQm9vbGVhbiIsImluY2x1ZGVzIiwicHVzaCIsImpvaW4iLCJlcnIiLCJoYW5kbGVDaGFwdGVyQ2hhbmdlIiwiY2hhcHRlck51bWJlciIsInNhdmVDdXJyZW50Q2hhcHRlciIsImxvYWRDaGFwdGVyIiwiY3VycmVudFN0b3J5SWQiLCJoYW5kbGVBZGRDaGFwdGVyIiwiYWRkQ2hhcHRlclRvQ3VycmVudFN0b3J5IiwiaGFuZGxlU2F2ZUNoYXB0ZXIiLCJoYW5kbGVEZWxldGVDaGFwdGVyIiwicGFyc2VJbnQiLCJkZWxldGVDaGFwdGVyIiwiaGFuZGxlUGxheUNoYXB0ZXJDaGFuZ2UiLCJzd2l0Y2hQbGF5Q2hhcHRlciIsImhhbmRsZVByZXZDaGFwdGVyIiwiY3VycmVudENoYXB0ZXIiLCJjaGFuZ2UiLCJoYW5kbGVOZXh0Q2hhcHRlciIsIm1heENoYXB0ZXIiLCJhbGxDaGFwdGVycyIsImluaXRFdmVudHMiLCJjcmVhdGVUZXN0UGxhY2Vob2xkZXJzIiwiZWRpdG9yIiwiaW5uZXJIVE1MIiwic3RvcFByb3BhZ2F0aW9uIiwidHlwZSIsImN1cnJlbnRUYXJnZXQiLCJ0b29sdGlwIiwiZ2V0VG9vbHRpcEZvclR5cGUiLCJwYXJlbnRMaXN0IiwiY2xvc2VzdCIsImhpZGRlbkl0ZW1zIiwiZmluZCIsImxpbmsiLCJ0b2dnbGUiLCJmaW5hbFRleHQiLCJjb3B5VG9DbGlwYm9hcmQiLCJhZGRFdmVudExpc3RlbmVyIiwic2VsIiwid2luZG93IiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImNvbnRhaW5zIiwiYW5jaG9yTm9kZSIsImxhc3RSYW5nZSIsImdldFJhbmdlQXQiLCJkZWJvdW5jZSIsInNlYXJjaFZhbCIsInNjcm9sbFRvcCIsImN1cnJlbnRNb2RhbFBsYWNlaG9sZGVyU2VhcmNoIiwibG9hZFNhdmVkU3Rvcmllc0xpc3QiLCJmaWxsT3JkZXIiLCJhdXRvY29tcGxldGUiLCJzb3VyY2UiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJkYXRhVHlwZSIsImZpbHRlcmVkVGFncyIsInVpIiwidGVybSIsIm1pbkxlbmd0aCIsInNlbGVjdCIsImV2ZW50IiwiaXRlbSIsImNsaWNrIiwiY29udGVudCIsInNob3dFcnJvciIsImZvcm1WYWxpZGF0ZWQiLCJ2YWxpZGF0ZUZvcm1JbnB1dHMiLCJjaGFwdGVycyIsImxvYWRBbGxDaGFwdGVyc0ZvclBsYXkiLCJmaWxlTmFtZSIsImRvd25sb2FkVGV4dEZpbGUiLCJhZGRDb21wbGV0ZWRTdG9yeVRvU2F2ZWRTdG9yaWVzIiwiaW5kZXgiLCJsb2FkU2F2ZWRTdG9yeSIsImRlbGV0ZVNhdmVkU3RvcnkiLCJyYXRpbmciLCJzdG9yeUlkIiwidG9GaXhlZCIsInJhdGluZ0NvdW50IiwicmFuZ2UiLCJrZXkiLCJub2RlVHlwZSIsIk5vZGUiLCJURVhUX05PREUiLCJwYXJlbnROb2RlIiwiY2xhc3NMaXN0IiwiYW5jaG9yT2Zmc2V0Iiwibm9kZVZhbHVlIiwicGxhY2Vob2xkZXIiLCJuZXdSYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnRBZnRlciIsImNvbGxhcHNlIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRTdGFydEJlZm9yZSIsImlzTmV3VG9nZ2xlIiwiYXR0ciIsInNob3ciLCJyYXciLCJ1c2FnZSIsInBhc2NhbENhc2UiLCJuYXR1cmFsRGlzcGxheSIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/handlers/events.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/main.js":
/*!**********************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/main.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/utils.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/typeHelpers.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/typeHelpers.js\");\n/* harmony import */ var _data_storage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data/storage.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/data/storage.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/placeholders.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholders.js\");\n/* harmony import */ var _ui_forms_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/forms.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/ui/forms.js\");\n/* harmony import */ var _ui_menu_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/menu.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/ui/menu.js\");\n/* harmony import */ var _handlers_events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./handlers/events.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/handlers/events.js\");\n/* harmony import */ var _core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./core/storyProcessor.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/storyProcessor.js\");\n/* harmony import */ var _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/domUtils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/domUtils.js\");\n// public/js/main.js\n\n\n\n\n\n\n\n\n\n\n\n(function () {\n  \"use strict\";\n\n  // Make Utils and decodeHTMLEntities available on window for legacy code\n  window.Utils = _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.Utils;\n  window.decodeHTMLEntities = _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.decodeHTMLEntities;\n\n  // ====================================================\n  // EVENT HANDLERS & DOCUMENT READY\n  // ====================================================\n  $(document).ready(function () {\n    // Initialize the application\n    (0,_ui_menu_js__WEBPACK_IMPORTED_MODULE_6__.initMenus)();\n    (0,_handlers_events_js__WEBPACK_IMPORTED_MODULE_7__.initEvents)();\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_4__.initPlaceholders)();\n\n    // Set a flag to indicate that the app has loaded\n    window.appLoaded = true;\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svcHVibGljL2pzL21haW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFb0U7QUFDUDtBQUNSO0FBQ1Q7QUFtQlo7QUFDYztBQVF4QjtBQUM0QjtBQU1oQjtBQUNjO0FBRWhELENBQUMsWUFBWTtFQUNULFlBQVk7O0VBRVo7RUFDQXFDLE1BQU0sQ0FBQ2xDLEtBQUssR0FBR0Esa0RBQUs7RUFDcEJrQyxNQUFNLENBQUNqQyxrQkFBa0IsR0FBR0EsK0RBQWtCOztFQUU5QztFQUNBO0VBQ0E7RUFDQWtDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLENBQUNDLEtBQUssQ0FBQyxZQUFNO0lBQ3BCO0lBQ0FaLHNEQUFTLENBQUMsQ0FBQztJQUNYRywrREFBVSxDQUFDLENBQUM7SUFDWlIsdUVBQWdCLENBQUMsQ0FBQzs7SUFFbEI7SUFDQWMsTUFBTSxDQUFDSSxTQUFTLEdBQUcsSUFBSTtFQUMzQixDQUFDLENBQUM7QUFDTixDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rYm9vay8uLi8uLi8uLi9PbmVEcml2ZS9EZXZlbG9wbWVudC9IVE1ML0JsYW5rQm9vay9wdWJsaWMvanMvbWFpbi5qcz81Mzk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHB1YmxpYy9qcy9tYWluLmpzXG5cbmltcG9ydCBzdGF0ZSwgeyByZXNldFN0YXRlLCBwcm9ub3VuTWFwcGluZyB9IGZyb20gJy4vY29yZS9zdGF0ZS5qcyc7XG5pbXBvcnQgeyBVdGlscywgZGVjb2RlSFRNTEVudGl0aWVzIH0gZnJvbSAnLi91dGlscy91dGlscy5qcyc7XG5pbXBvcnQgeyBUeXBlSGVscGVycyB9IGZyb20gJy4vdXRpbHMvdHlwZUhlbHBlcnMuanMnO1xuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gJy4vZGF0YS9zdG9yYWdlLmpzJztcbmltcG9ydCB7IFxuICAgIGNhdGVnb3J5T3JkZXIsIFxuICAgIGFsbFBsYWNlaG9sZGVycyxcbiAgICBpbnNlcnRQbGFjZWhvbGRlcixcbiAgICB1cGRhdGVWYXJpYWJsZXNMaXN0LFxuICAgIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IsXG4gICAgZ2VuZXJhdGVMZWdhY3lUZXh0LFxuICAgIHNob3dOb3VuTnVtYmVyU2VsZWN0aW9uLFxuICAgIHNob3dWZXJiVGVuc2VTZWxlY3Rpb24sXG4gICAgc2hvd1BlcnNvblR5cGVTZWxlY3Rpb24sXG4gICAgdXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24sXG4gICAgcGlja1Byb25vdW5Gb3JtQW5kR3JvdXAsXG4gICAgaW5zZXJ0UHJvbm91blBsYWNlaG9sZGVyU2ltcGxlLFxuICAgIGNob29zZVByb25vdW5UZW1wVmFsdWUsXG4gICAgdXBkYXRlRXhpc3RpbmdQbGFjZWhvbGRlcixcbiAgICBhZGRDdXN0b21QbGFjZWhvbGRlcixcbiAgICBpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b20sXG4gICAgaW5pdFBsYWNlaG9sZGVyc1xufSBmcm9tICcuL2NvcmUvcGxhY2Vob2xkZXJzLmpzJztcbmltcG9ydCB7IGJ1aWxkRmlsbEZvcm0gfSBmcm9tICcuL3VpL2Zvcm1zLmpzJztcbmltcG9ydCB7IFxuICAgIHBvc2l0aW9uTWVudSwgXG4gICAgaGlkZU1lbnUsIFxuICAgIGhpZGVBbGxNZW51cyxcbiAgICBpbml0TWVudXMsXG4gICAgaGFuZGxlVGV4dFNlbGVjdGlvbixcbiAgICBoYW5kbGVQbGFjZWhvbGRlckNsaWNrXG59IGZyb20gJy4vdWkvbWVudS5qcyc7XG5pbXBvcnQgeyBpbml0RXZlbnRzIH0gZnJvbSAnLi9oYW5kbGVycy9ldmVudHMuanMnO1xuaW1wb3J0IHsgXG4gICAgZmlsbFBsYWNlaG9sZGVycyxcbiAgICByZXNldFN0b3J5U3RhdGUsXG4gICAgZm9ybWF0U3RvcnlGb3JFeHBvcnQsXG4gICAgY3JlYXRlRmlsZW5hbWVGcm9tVGl0bGVcbn0gZnJvbSAnLi9jb3JlL3N0b3J5UHJvY2Vzc29yLmpzJztcbmltcG9ydCAqIGFzIGRvbVV0aWxzIGZyb20gJy4vdXRpbHMvZG9tVXRpbHMuanMnO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLy8gTWFrZSBVdGlscyBhbmQgZGVjb2RlSFRNTEVudGl0aWVzIGF2YWlsYWJsZSBvbiB3aW5kb3cgZm9yIGxlZ2FjeSBjb2RlXG4gICAgd2luZG93LlV0aWxzID0gVXRpbHM7XG4gICAgd2luZG93LmRlY29kZUhUTUxFbnRpdGllcyA9IGRlY29kZUhUTUxFbnRpdGllcztcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBFVkVOVCBIQU5ETEVSUyAmIERPQ1VNRU5UIFJFQURZXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgYXBwbGljYXRpb25cbiAgICAgICAgaW5pdE1lbnVzKCk7XG4gICAgICAgIGluaXRFdmVudHMoKTtcbiAgICAgICAgaW5pdFBsYWNlaG9sZGVycygpO1xuICAgICAgICBcbiAgICAgICAgLy8gU2V0IGEgZmxhZyB0byBpbmRpY2F0ZSB0aGF0IHRoZSBhcHAgaGFzIGxvYWRlZFxuICAgICAgICB3aW5kb3cuYXBwTG9hZGVkID0gdHJ1ZTtcbiAgICB9KTtcbn0pKCk7Il0sIm5hbWVzIjpbInN0YXRlIiwicmVzZXRTdGF0ZSIsInByb25vdW5NYXBwaW5nIiwiVXRpbHMiLCJkZWNvZGVIVE1MRW50aXRpZXMiLCJUeXBlSGVscGVycyIsIlN0b3JhZ2UiLCJjYXRlZ29yeU9yZGVyIiwiYWxsUGxhY2Vob2xkZXJzIiwiaW5zZXJ0UGxhY2Vob2xkZXIiLCJ1cGRhdGVWYXJpYWJsZXNMaXN0IiwidXBkYXRlVmFyaWFibGVzRnJvbUVkaXRvciIsImdlbmVyYXRlTGVnYWN5VGV4dCIsInNob3dOb3VuTnVtYmVyU2VsZWN0aW9uIiwic2hvd1ZlcmJUZW5zZVNlbGVjdGlvbiIsInNob3dQZXJzb25UeXBlU2VsZWN0aW9uIiwidXBkYXRlUGxhY2Vob2xkZXJBY2NvcmRpb24iLCJwaWNrUHJvbm91bkZvcm1BbmRHcm91cCIsImluc2VydFByb25vdW5QbGFjZWhvbGRlclNpbXBsZSIsImNob29zZVByb25vdW5UZW1wVmFsdWUiLCJ1cGRhdGVFeGlzdGluZ1BsYWNlaG9sZGVyIiwiYWRkQ3VzdG9tUGxhY2Vob2xkZXIiLCJpbnNlcnRQbGFjZWhvbGRlckZyb21DdXN0b20iLCJpbml0UGxhY2Vob2xkZXJzIiwiYnVpbGRGaWxsRm9ybSIsInBvc2l0aW9uTWVudSIsImhpZGVNZW51IiwiaGlkZUFsbE1lbnVzIiwiaW5pdE1lbnVzIiwiaGFuZGxlVGV4dFNlbGVjdGlvbiIsImhhbmRsZVBsYWNlaG9sZGVyQ2xpY2siLCJpbml0RXZlbnRzIiwiZmlsbFBsYWNlaG9sZGVycyIsInJlc2V0U3RvcnlTdGF0ZSIsImZvcm1hdFN0b3J5Rm9yRXhwb3J0IiwiY3JlYXRlRmlsZW5hbWVGcm9tVGl0bGUiLCJkb21VdGlscyIsIndpbmRvdyIsIiQiLCJkb2N1bWVudCIsInJlYWR5IiwiYXBwTG9hZGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/main.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/ui/forms.js":
/*!**************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/ui/forms.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildFillForm: () => (/* binding */ buildFillForm),\n/* harmony export */   createInputRow: () => (/* binding */ createInputRow),\n/* harmony export */   validateInputForm: () => (/* binding */ validateInputForm)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/typeHelpers.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/typeHelpers.js\");\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// public/js/ui/forms.js\n\n\n\n// ====================================================\n// BUILD THE FILL-IN-THE-BLANK FORM\n// ====================================================\nvar buildFillForm = function buildFillForm() {\n  var form = $('#inputForm').empty();\n  appendPronounGroupsToForm(form);\n  appendNonPronounVariablesToForm(form);\n};\nvar appendPronounGroupsToForm = function appendPronounGroupsToForm(form) {\n  var groupSet = getPronounGroups();\n  var sortedGroups = Array.from(groupSet).sort(function (a, b) {\n    return a.localeCompare(b);\n  });\n  if (sortedGroups.length > 0) {\n    form.append(\"<h4>Pronouns</h4>\");\n    sortedGroups.forEach(function (g) {\n      var block = createPronounGroupBlock(g);\n      form.append(block);\n    });\n    form.on('change', \"input[type='radio']\", handlePronounChoiceChange);\n  }\n};\nvar getPronounGroups = function getPronounGroups() {\n  var groupSet = new Set();\n  var _iterator = _createForOfIteratorHelper(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var v = _step.value;\n      if (v.internalType.startsWith('PRONOUN|')) {\n        var parts = v.internalType.split('|');\n        groupSet.add(parts[1]);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return groupSet;\n};\nvar createPronounGroupBlock = function createPronounGroupBlock(groupName) {\n  var block = $(\"\\n      <div class='form-group'>\\n        <label id='\".concat(groupName, \"-label' title=\\\"Hover to see internal ID\\\">\\n          \").concat(groupName, \" - Person (select pronoun)\\n          <i class=\\\"fas fa-info-circle fill-info-icon\\\" data-type=\\\"\").concat(groupName, \"\\\" style=\\\"font-size:0.8em; margin-left:5px;\\\"></i>\\n        </label>\\n      </div>\\n    \"));\n  var radios = \"\\n      <div class='form-check'>\\n        <input type='radio' class='form-check-input' name='\".concat(groupName, \"-choice' value='HeHim'>\\n        <label class='form-check-label'>He/Him</label>\\n      </div>\\n      <div class='form-check'>\\n        <input type='radio' class='form-check-input' name='\").concat(groupName, \"-choice' value='SheHer'>\\n        <label class='form-check-label'>She/Her</label>\\n      </div>\\n      <div class='form-check'>\\n        <input type='radio' class='form-check-input' name='\").concat(groupName, \"-choice' value='TheyThem'>\\n        <label class='form-check-label'>They/Them</label>\\n      </div>\\n      <div class='form-check mb-2'>\\n        <input type='radio' class='form-check-input' name='\").concat(groupName, \"-choice' value='Custom'>\\n        <label class='form-check-label'>Custom</label>\\n      </div>\\n      <input type='text' class='form-control form-control-sm d-none' id='\").concat(groupName, \"-custom'\\n        placeholder='comma-separated: subject, object, possAdj, possPron, reflexive'>\\n    \");\n  block.append(radios);\n  return block;\n};\nvar handlePronounChoiceChange = function handlePronounChoiceChange() {\n  var groupName = $(this).attr('name').replace('-choice', '');\n  if ($(this).val() === 'Custom') {\n    $(\"#\".concat(groupName, \"-custom\")).removeClass('d-none');\n  } else {\n    $(\"#\".concat(groupName, \"-custom\")).addClass('d-none');\n  }\n};\nvar appendNonPronounVariablesToForm = function appendNonPronounVariablesToForm(form) {\n  var nonPronounVars = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.filter(function (v) {\n    return !v.internalType.startsWith('PRONOUN|');\n  });\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillOrder === 'alphabetical') {\n    nonPronounVars.sort(function (a, b) {\n      return a.officialDisplay.localeCompare(b.officialDisplay);\n    });\n  } else if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillOrder === 'random') {\n    nonPronounVars.sort(function () {\n      return Math.random() - 0.5;\n    });\n  }\n  nonPronounVars.forEach(function (variable) {\n    var groupRow = createInputRow(variable);\n    form.append(groupRow);\n  });\n};\nvar createInputRow = function createInputRow(variable) {\n  var inputRow = document.createElement(\"div\");\n  inputRow.className = \"form-group mb-3\";\n  console.log(\"Creating input row for variable: \".concat(variable.id), variable);\n\n  // Create standardized display label (remove any text within parentheses and trim)\n  var displayLabel = variable.officialDisplay.replace(/\\s*\\([^)]*\\)/g, '').trim();\n\n  // Create the label element\n  var label = document.createElement(\"label\");\n  label.htmlFor = variable.id;\n  label.textContent = variable.officialDisplay;\n  label.className = \"form-label\";\n\n  // Create the input element\n  var input = document.createElement(\"input\");\n  input.type = \"text\";\n  input.className = \"form-control\";\n  input.id = variable.id;\n  input.setAttribute(\"data-id\", variable.id);\n  input.setAttribute(\"data-label\", variable.officialDisplay);\n  input.setAttribute(\"data-display\", displayLabel);\n  input.setAttribute(\"data-type\", variable.internalType.split('|')[0]);\n  input.setAttribute(\"placeholder\", displayLabel);\n\n  // If we have existing values, use them\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues && _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues[variable.id]) {\n    input.value = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues[variable.id];\n    console.log(\"Pre-filling \".concat(variable.id, \" with existing value: \\\"\").concat(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues[variable.id], \"\\\"\"));\n  }\n\n  // Add elements to the row\n  inputRow.appendChild(label);\n  inputRow.appendChild(input);\n  return inputRow;\n};\n\n// Add the missing validateInputForm function to forms.js\n\nvar validateInputForm = function validateInputForm(formData) {\n  // If no formData is provided, this is being called from handleGenerateStory\n  // to validate the entire form before generating the story\n  if (!formData) {\n    // Check if we have any filled values that need validation\n    // Return valid for basic story generation\n    return {\n      valid: true\n    };\n  }\n\n  // Input validation logic for placeholders/variables\n  if (!formData.display || formData.display.trim() === '') {\n    return {\n      valid: false,\n      message: 'Display name is required'\n    };\n  }\n  if (!formData.internalType || formData.internalType.trim() === '') {\n    return {\n      valid: false,\n      message: 'Internal type is required'\n    };\n  }\n  return {\n    valid: true\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/ui/forms.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/ui/menu.js":
/*!*************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/ui/menu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPlaceholderEditMenu: () => (/* binding */ getPlaceholderEditMenu),\n/* harmony export */   getSelectionMenu: () => (/* binding */ getSelectionMenu),\n/* harmony export */   handleDeletePlaceholder: () => (/* binding */ handleDeletePlaceholder),\n/* harmony export */   handleEditOverride: () => (/* binding */ handleEditOverride),\n/* harmony export */   handleEditPlaceholder: () => (/* binding */ handleEditPlaceholder),\n/* harmony export */   handleNewPlaceholder: () => (/* binding */ handleNewPlaceholder),\n/* harmony export */   handlePlaceholderClick: () => (/* binding */ handlePlaceholderClick),\n/* harmony export */   handleReplaceAll: () => (/* binding */ handleReplaceAll),\n/* harmony export */   handleReusePlaceholder: () => (/* binding */ handleReusePlaceholder),\n/* harmony export */   handleTextSelection: () => (/* binding */ handleTextSelection),\n/* harmony export */   hideAllMenus: () => (/* binding */ hideAllMenus),\n/* harmony export */   hideMenu: () => (/* binding */ hideMenu),\n/* harmony export */   initMenuSystem: () => (/* binding */ initMenuSystem),\n/* harmony export */   initMenus: () => (/* binding */ initMenus),\n/* harmony export */   positionMenu: () => (/* binding */ positionMenu)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/StringUtils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/StringUtils.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/placeholders.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholders.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n// Start of Selection\n// public/js/ui/menu.js\n\n\n\n\n// Menu element references\nvar selectionMenu;\nvar placeholderEditMenu;\n\n// Helper function to position menu near an element\nvar positionMenu = function positionMenu(menu, rect) {\n  menu.style.display = 'block';\n  var menuWidth = menu.offsetWidth;\n  var menuHeight = menu.offsetHeight;\n  var offset = 10;\n\n  // Calculate position - center horizontally over the placeholder\n  var desiredLeft = window.scrollX + rect.left + rect.width / 2 - menuWidth / 2;\n  desiredLeft = Math.max(window.scrollX + 5, Math.min(desiredLeft, window.scrollX + window.innerWidth - menuWidth - 5));\n\n  // Position below element by default (to avoid mobile device system menus)\n  // Only position above if there's no room below\n  var desiredTop;\n  var spaceBelow = window.innerHeight - (rect.bottom - window.scrollY);\n  if (spaceBelow >= menuHeight + offset) {\n    // Position below the element - preferred\n    desiredTop = window.scrollY + rect.bottom + offset;\n    menu.classList.add('menu-position-bottom');\n    menu.classList.remove('menu-position-top');\n  } else {\n    // If no space below, position above\n    desiredTop = window.scrollY + rect.top - menuHeight - offset;\n    menu.classList.add('menu-position-top');\n    menu.classList.remove('menu-position-bottom');\n  }\n  menu.style.top = desiredTop + 'px';\n  menu.style.left = desiredLeft + 'px';\n};\n\n// Hide a menu\nvar hideMenu = function hideMenu(menu) {\n  if (menu) menu.style.display = 'none';\n};\n\n// Hide all menus\nvar hideAllMenus = function hideAllMenus() {\n  hideMenu(selectionMenu);\n  hideMenu(placeholderEditMenu);\n};\n\n// Reset current editing state\nvar resetCurrentEditing = function resetCurrentEditing() {\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = null;\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement = null;\n};\n\n// Initialize the context menus\nvar initMenus = function initMenus() {\n  // Create selection menu for text selections\n  selectionMenu = document.createElement('div');\n  selectionMenu.id = 'textSelectionMenu';\n  selectionMenu.className = 'floating-menu';\n  selectionMenu.innerHTML = \"\\n        <div class=\\\"placeholder-menu-row\\\">\\n          <button id=\\\"newPlaceholderBtn\\\" class=\\\"btn btn-sm btn-primary fixed-size-btn\\\">New Placeholder</button>\\n          <button id=\\\"reusePlaceholderBtn\\\" class=\\\"btn btn-sm btn-secondary fixed-size-btn\\\">Reuse Placeholder</button>\\n        </div>\\n      \";\n  document.body.appendChild(selectionMenu);\n\n  // Create placeholder edit menu for modifying existing placeholders\n  placeholderEditMenu = document.createElement('div');\n  placeholderEditMenu.id = 'placeholderEditMenu';\n  placeholderEditMenu.className = 'floating-menu';\n  placeholderEditMenu.innerHTML = \"\\n        <div class=\\\"placeholder-menu-row\\\">\\n          <button id=\\\"editPlaceholderBtn\\\" class=\\\"btn btn-sm btn-primary fixed-size-btn\\\">Change</button>\\n          <button id=\\\"editOverrideBtn\\\" class=\\\"btn btn-sm btn-secondary fixed-size-btn\\\">Rename</button>\\n        </div>\\n        <div class=\\\"placeholder-menu-row\\\">\\n          <button id=\\\"replaceAllBtn\\\" class=\\\"btn btn-sm btn-warning fixed-size-btn\\\">Find All</button>\\n          <button id=\\\"deletePlaceholderBtn\\\" class=\\\"btn btn-sm btn-danger fixed-size-btn\\\">Delete</button>\\n        </div>\\n      \";\n  document.body.appendChild(placeholderEditMenu);\n\n  // Attach event listeners\n  attachMenuEventListeners();\n};\n\n// Handle text selection to show the selection menu\nvar handleTextSelection = function handleTextSelection() {\n  setTimeout(function () {\n    var sel = window.getSelection();\n    if (sel && sel.toString().trim().length > 0) {\n      if (sel.anchorNode && sel.anchorNode.parentNode && !sel.anchorNode.parentNode.classList.contains('placeholder')) {\n        _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = sel.getRangeAt(0);\n        var rect = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.getBoundingClientRect();\n        positionMenu(selectionMenu, rect);\n      }\n    } else {\n      hideMenu(selectionMenu);\n    }\n  }, 0);\n};\n\n// Show the placeholder edit menu when a placeholder is clicked\nvar handlePlaceholderClick = function handlePlaceholderClick(e) {\n  if (e.target.classList.contains('placeholder')) {\n    // Stop propagation so that other handlers (e.g. selection menu) do not interfere\n    e.stopPropagation();\n    // Find the corresponding variable using the data-id attribute\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.find(function (v) {\n      return v.id === e.target.getAttribute('data-id');\n    });\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement = e.target;\n    // Position the placeholder edit menu near the clicked element\n    positionMenu(placeholderEditMenu, e.target.getBoundingClientRect());\n  }\n};\n\n// Handle delete button click in placeholder edit menu\nvar handleDeletePlaceholder = function handleDeletePlaceholder() {\n  hideMenu(placeholderEditMenu);\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement) {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement.remove();\n  }\n  // Update the variables in the editor after deletion\n  if (typeof _core_placeholders_js__WEBPACK_IMPORTED_MODULE_2__.updateVariablesFromEditor === 'function') {\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_2__.updateVariablesFromEditor)();\n  }\n  resetCurrentEditing();\n};\n\n// Handle edit placeholder button click\nvar handleEditPlaceholder = function handleEditPlaceholder() {\n  hideMenu(placeholderEditMenu);\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder = true;\n  // Open the modal so the user can select a new placeholder type\n  $('#placeholderModal').modal('show');\n  resetCurrentEditing();\n};\n\n// Handle edit override button click\nvar handleEditOverride = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var _yield$Swal$fire, newOverride;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          hideMenu(placeholderEditMenu);\n          _context.next = 3;\n          return Swal.fire({\n            title: 'Change Override',\n            input: 'text',\n            inputLabel: 'Enter new override text',\n            inputValue: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement ? _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement.textContent : ''\n          });\n        case 3:\n          _yield$Swal$fire = _context.sent;\n          newOverride = _yield$Swal$fire.value;\n          if (newOverride !== undefined) {\n            if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement) {\n              _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement.textContent = newOverride;\n            }\n            if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable) {\n              _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable.displayOverride = newOverride;\n            }\n            if (typeof _core_placeholders_js__WEBPACK_IMPORTED_MODULE_2__.updateVariablesList === 'function') {\n              (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_2__.updateVariablesList)();\n            }\n          }\n          resetCurrentEditing();\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function handleEditOverride() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// Handle \"New Placeholder\" button click\nvar handleNewPlaceholder = function handleNewPlaceholder() {\n  // Reset any previously saved selection data\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n\n  // Save the current selected text to state before hiding the selection menu\n  var sel = window.getSelection();\n  if (sel && sel.toString().trim().length > 0) {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = sel.toString().trim();\n    console.log(\"Selection menu: Saved selected text:\", _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText);\n  } else {\n    console.log(\"Selection menu: No text selected\");\n  }\n  hideMenu(selectionMenu);\n  $('#placeholderModal').modal('show');\n};\n\n// Handle \"Reuse Placeholder\" button click\nvar handleReusePlaceholder = function handleReusePlaceholder() {\n  // Reset any previously saved selection data\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n\n  // Save the current selected text to state before hiding the selection menu\n  var sel = window.getSelection();\n  if (sel && sel.toString().trim().length > 0) {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = sel.toString().trim();\n    console.log(\"Reuse placeholder menu: Saved selected text:\", _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText);\n  } else {\n    console.log(\"Reuse placeholder menu: No text selected\");\n  }\n  hideMenu(selectionMenu);\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.length === 0) {\n    Swal.fire('No existing placeholders', 'There are no placeholders to reuse yet.', 'info');\n    return;\n  }\n  var sortedVariables = _toConsumableArray(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables).sort(function (a, b) {\n    return (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[b.id] || 0) - (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[a.id] || 0) || a.order - b.order;\n  });\n  var html = \"<div id=\\\"reusePlaceholderContainer\\\" style=\\\"display: flex; flex-wrap: wrap;\\\">\";\n  sortedVariables.forEach(function (v) {\n    var displayText = v.displayOverride || v.officialDisplay;\n    html += \"<button type=\\\"button\\\" \\n                       class=\\\"btn btn-outline-secondary btn-sm m-1 reuse-placeholder-btn\\\" \\n                       data-id=\\\"\".concat(v.id, \"\\\" \\n                       title=\\\"\").concat(v.id, \"\\\">\\n                 \").concat(displayText, \"\\n               </button>\");\n  });\n  html += \"</div>\";\n  Swal.fire({\n    title: 'Select a placeholder to reuse',\n    html: html,\n    showCancelButton: true,\n    showConfirmButton: false,\n    didOpen: function didOpen() {\n      var container = Swal.getHtmlContainer();\n      var btns = container.querySelectorAll('.reuse-placeholder-btn');\n      btns.forEach(function (button) {\n        button.addEventListener('click', function () {\n          var id = button.getAttribute('data-id');\n          var variable = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.find(function (v) {\n            return v.id === id;\n          });\n          if (variable) (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_2__.duplicatePlaceholder)(variable);\n          Swal.close();\n        });\n      });\n    }\n  });\n};\n\n// Handle \"Replace All\" button click in placeholder edit menu\nvar handleReplaceAll = function handleReplaceAll() {\n  hideMenu(placeholderEditMenu);\n\n  // Make sure we have the current placeholder element and variable\n  if (!_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement || !_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable) {\n    console.error(\"Missing placeholder element or variable for replace all\");\n    resetCurrentEditing();\n    return;\n  }\n\n  // Get the text from the placeholder\n  var placeholderText = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderElement.textContent.trim();\n  if (!placeholderText) {\n    console.error(\"Placeholder has no text to search for\");\n    resetCurrentEditing();\n    return;\n  }\n  var placeholderId = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable.id;\n  if (!placeholderId) {\n    console.error(\"Placeholder has no ID\");\n    resetCurrentEditing();\n    return;\n  }\n\n  // Count occurrences of the text in the editor\n  var editor = document.getElementById(\"storyText\");\n  var editorContent = editor.textContent;\n  var occurrences = (editorContent.match(new RegExp(\"\\\\b\".concat(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.escapeRegExp(placeholderText), \"\\\\b\"), 'g')) || []).length;\n\n  // If there's only one occurrence (the placeholder itself), notify the user\n  if (occurrences <= 1) {\n    Swal.fire({\n      title: 'No other occurrences found',\n      text: \"No other instances of \\\"\".concat(placeholderText, \"\\\" were found in your story.\"),\n      icon: 'info'\n    });\n    resetCurrentEditing();\n    return;\n  }\n\n  // Ask user to confirm replacing all occurrences\n  Swal.fire({\n    title: 'Multiple occurrences found',\n    html: \"Found <strong>\".concat(occurrences - 1, \"</strong> other instance(s) of \\\"<strong>\").concat(placeholderText, \"</strong>\\\" in your story.<br>Would you like to replace all these instances with this placeholder?\"),\n    icon: 'question',\n    showCancelButton: true,\n    confirmButtonText: 'Yes, replace all',\n    cancelButtonText: 'No, cancel'\n  }).then(function (result) {\n    if (result.isConfirmed) {\n      console.log(\"Replacing all occurrences of \\\"\".concat(placeholderText, \"\\\" with placeholder \").concat(placeholderId));\n\n      // Use the existing function to perform the replacement\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_2__.applyPlaceholderToAllOccurrences)(placeholderText, placeholderId, placeholderText);\n    }\n  });\n  resetCurrentEditing();\n};\n\n// Attach event listeners to the menu elements\nvar attachMenuEventListeners = function attachMenuEventListeners() {\n  // Click outside menus to close them\n  document.addEventListener('click', function (e) {\n    if (!selectionMenu.contains(e.target) && !placeholderEditMenu.contains(e.target)) {\n      hideAllMenus();\n    }\n  });\n\n  // Text selection events\n  document.getElementById('storyText').addEventListener('mouseup', handleTextSelection);\n\n  // Placeholder click events\n  document.getElementById('storyText').addEventListener('click', handlePlaceholderClick);\n\n  // Menu button event handlers\n  document.getElementById('newPlaceholderBtn').addEventListener('click', handleNewPlaceholder);\n  document.getElementById('reusePlaceholderBtn').addEventListener('click', handleReusePlaceholder);\n  document.getElementById('editPlaceholderBtn').addEventListener('click', handleEditPlaceholder);\n  document.getElementById('editOverrideBtn').addEventListener('click', handleEditOverride);\n  document.getElementById('deletePlaceholderBtn').addEventListener('click', handleDeletePlaceholder);\n  document.getElementById('replaceAllBtn').addEventListener('click', handleReplaceAll);\n};\n\n// Export menu elements for external access if needed\nvar getSelectionMenu = function getSelectionMenu() {\n  return selectionMenu;\n};\nvar getPlaceholderEditMenu = function getPlaceholderEditMenu() {\n  return placeholderEditMenu;\n};\n\n// Export the initialization of menus to be called from main.js\nvar initMenuSystem = function initMenuSystem() {\n  // Create menus if they don't exist yet\n  if (!selectionMenu || !placeholderEditMenu) {\n    initMenus();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svcHVibGljL2pzL3VpL21lbnUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQ0FDQSxxSkFBQUEsbUJBQUEsWUFBQUEsb0JBQUEsV0FBQUMsQ0FBQSxTQUFBQyxDQUFBLEVBQUFELENBQUEsT0FBQUUsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLFNBQUEsRUFBQUMsQ0FBQSxHQUFBSCxDQUFBLENBQUFJLGNBQUEsRUFBQUMsQ0FBQSxHQUFBSixNQUFBLENBQUFLLGNBQUEsY0FBQVAsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsSUFBQUQsQ0FBQSxDQUFBRCxDQUFBLElBQUFFLENBQUEsQ0FBQU8sS0FBQSxLQUFBQyxDQUFBLHdCQUFBQyxNQUFBLEdBQUFBLE1BQUEsT0FBQUMsQ0FBQSxHQUFBRixDQUFBLENBQUFHLFFBQUEsa0JBQUFDLENBQUEsR0FBQUosQ0FBQSxDQUFBSyxhQUFBLHVCQUFBQyxDQUFBLEdBQUFOLENBQUEsQ0FBQU8sV0FBQSw4QkFBQUMsT0FBQWpCLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLFdBQUFDLE1BQUEsQ0FBQUssY0FBQSxDQUFBUCxDQUFBLEVBQUFELENBQUEsSUFBQVMsS0FBQSxFQUFBUCxDQUFBLEVBQUFpQixVQUFBLE1BQUFDLFlBQUEsTUFBQUMsUUFBQSxTQUFBcEIsQ0FBQSxDQUFBRCxDQUFBLFdBQUFrQixNQUFBLG1CQUFBakIsQ0FBQSxJQUFBaUIsTUFBQSxZQUFBQSxPQUFBakIsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsV0FBQUQsQ0FBQSxDQUFBRCxDQUFBLElBQUFFLENBQUEsZ0JBQUFvQixLQUFBckIsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsRUFBQUcsQ0FBQSxRQUFBSyxDQUFBLEdBQUFWLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxTQUFBLFlBQUFtQixTQUFBLEdBQUF2QixDQUFBLEdB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LENBQUM7O0VBRXRGO0VBQ0FwQixRQUFRLENBQUM4RSxjQUFjLENBQUMsbUJBQW1CLENBQUMsQ0FBQ1IsZ0JBQWdCLENBQUMsT0FBTyxFQUFFdkIsb0JBQW9CLENBQUM7RUFDNUYvQyxRQUFRLENBQUM4RSxjQUFjLENBQUMscUJBQXFCLENBQUMsQ0FBQ1IsZ0JBQWdCLENBQUMsT0FBTyxFQUFFbkIsc0JBQXNCLENBQUM7RUFDaEduRCxRQUFRLENBQUM4RSxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQ1IsZ0JBQWdCLENBQUMsT0FBTyxFQUFFM0MscUJBQXFCLENBQUM7RUFDOUYzQixRQUFRLENBQUM4RSxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQ1IsZ0JBQWdCLENBQUMsT0FBTyxFQUFFdkMsa0JBQWtCLENBQUM7RUFDeEYvQixRQUFRLENBQUM4RSxjQUFjLENBQUMsc0JBQXNCLENBQUMsQ0FBQ1IsZ0JBQWdCLENBQUMsT0FBTyxFQUFFNUMsdUJBQXVCLENBQUM7RUFDbEcxQixRQUFRLENBQUM4RSxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUNSLGdCQUFnQixDQUFDLE9BQU8sRUFBRUcsZ0JBQWdCLENBQUM7QUFDeEYsQ0FBQzs7QUFFRDtBQUNPLElBQU1pQixnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFBO0VBQUEsT0FBUzlILGFBQWE7QUFBQTtBQUM1QyxJQUFNK0gsc0JBQXNCLEdBQUcsU0FBekJBLHNCQUFzQkEsQ0FBQTtFQUFBLE9BQVM5SCxtQkFBbUI7QUFBQTs7QUFFL0Q7QUFDTyxJQUFNK0gsY0FBYyxHQUFHLFNBQWpCQSxjQUFjQSxDQUFBLEVBQVM7RUFDaEM7RUFDQSxJQUFJLENBQUNoSSxhQUFhLElBQUksQ0FBQ0MsbUJBQW1CLEVBQUU7SUFDMUNrQyxTQUFTLENBQUMsQ0FBQztFQUNiO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rYm9vay8uLi8uLi8uLi9PbmVEcml2ZS9EZXZlbG9wbWVudC9IVE1ML0JsYW5rQm9vay9wdWJsaWMvanMvdWkvbWVudS5qcz80MzhlIl0sInNvdXJjZXNDb250ZW50IjpbIiAgICAvLyBTdGFydCBvZiBTZWxlY3Rpb25cbiAgICAvLyBwdWJsaWMvanMvdWkvbWVudS5qc1xuICAgIGltcG9ydCBzdGF0ZSBmcm9tICcuLi9jb3JlL3N0YXRlLmpzJztcbiAgICBpbXBvcnQgeyBTdHJpbmdVdGlscyB9IGZyb20gJy4uL3V0aWxzL1N0cmluZ1V0aWxzLmpzJztcbiAgICBpbXBvcnQgeyBkdXBsaWNhdGVQbGFjZWhvbGRlciwgaW5zZXJ0UGxhY2Vob2xkZXIsIHVwZGF0ZVZhcmlhYmxlc0xpc3QsIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IsIGFwcGx5UGxhY2Vob2xkZXJUb0FsbE9jY3VycmVuY2VzIH0gZnJvbSAnLi4vY29yZS9wbGFjZWhvbGRlcnMuanMnO1xuICAgIFxuICAgIC8vIE1lbnUgZWxlbWVudCByZWZlcmVuY2VzXG4gICAgbGV0IHNlbGVjdGlvbk1lbnU7XG4gICAgbGV0IHBsYWNlaG9sZGVyRWRpdE1lbnU7XG4gICAgXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHBvc2l0aW9uIG1lbnUgbmVhciBhbiBlbGVtZW50XG4gICAgZXhwb3J0IGNvbnN0IHBvc2l0aW9uTWVudSA9IChtZW51LCByZWN0KSA9PiB7XG4gICAgICAgIG1lbnUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGNvbnN0IG1lbnVXaWR0aCA9IG1lbnUub2Zmc2V0V2lkdGg7XG4gICAgICAgIGNvbnN0IG1lbnVIZWlnaHQgPSBtZW51Lm9mZnNldEhlaWdodDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gMTA7XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhdGUgcG9zaXRpb24gLSBjZW50ZXIgaG9yaXpvbnRhbGx5IG92ZXIgdGhlIHBsYWNlaG9sZGVyXG4gICAgICAgIGxldCBkZXNpcmVkTGVmdCA9IHdpbmRvdy5zY3JvbGxYICsgcmVjdC5sZWZ0ICsgKHJlY3Qud2lkdGggLyAyKSAtIChtZW51V2lkdGggLyAyKTtcbiAgICAgICAgZGVzaXJlZExlZnQgPSBNYXRoLm1heCh3aW5kb3cuc2Nyb2xsWCArIDUsIE1hdGgubWluKGRlc2lyZWRMZWZ0LCB3aW5kb3cuc2Nyb2xsWCArIHdpbmRvdy5pbm5lcldpZHRoIC0gbWVudVdpZHRoIC0gNSkpO1xuICAgICAgICBcbiAgICAgICAgLy8gUG9zaXRpb24gYmVsb3cgZWxlbWVudCBieSBkZWZhdWx0ICh0byBhdm9pZCBtb2JpbGUgZGV2aWNlIHN5c3RlbSBtZW51cylcbiAgICAgICAgLy8gT25seSBwb3NpdGlvbiBhYm92ZSBpZiB0aGVyZSdzIG5vIHJvb20gYmVsb3dcbiAgICAgICAgbGV0IGRlc2lyZWRUb3A7XG4gICAgICAgIGNvbnN0IHNwYWNlQmVsb3cgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAocmVjdC5ib3R0b20gLSB3aW5kb3cuc2Nyb2xsWSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoc3BhY2VCZWxvdyA+PSBtZW51SGVpZ2h0ICsgb2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyBQb3NpdGlvbiBiZWxvdyB0aGUgZWxlbWVudCAtIHByZWZlcnJlZFxuICAgICAgICAgICAgZGVzaXJlZFRvcCA9IHdpbmRvdy5zY3JvbGxZICsgcmVjdC5ib3R0b20gKyBvZmZzZXQ7XG4gICAgICAgICAgICBtZW51LmNsYXNzTGlzdC5hZGQoJ21lbnUtcG9zaXRpb24tYm90dG9tJyk7XG4gICAgICAgICAgICBtZW51LmNsYXNzTGlzdC5yZW1vdmUoJ21lbnUtcG9zaXRpb24tdG9wJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiBubyBzcGFjZSBiZWxvdywgcG9zaXRpb24gYWJvdmVcbiAgICAgICAgICAgIGRlc2lyZWRUb3AgPSB3aW5kb3cuc2Nyb2xsWSArIHJlY3QudG9wIC0gbWVudUhlaWdodCAtIG9mZnNldDtcbiAgICAgICAgICAgIG1lbnUuY2xhc3NMaXN0LmFkZCgnbWVudS1wb3NpdGlvbi10b3AnKTtcbiAgICAgICAgICAgIG1lbnUuY2xhc3NMaXN0LnJlbW92ZSgnbWVudS1wb3NpdGlvbi1ib3R0b20nKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbWVudS5zdHlsZS50b3AgPSBkZXNpcmVkVG9wICsgJ3B4JztcbiAgICAgICAgbWVudS5zdHlsZS5sZWZ0ID0gZGVzaXJlZExlZnQgKyAncHgnO1xuICAgIH07XG4gICAgXG4gICAgLy8gSGlkZSBhIG1lbnVcbiAgICBleHBvcnQgY29uc3QgaGlkZU1lbnUgPSAobWVudSkgPT4geyBcbiAgICAgICAgaWYgKG1lbnUpIG1lbnUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgXG4gICAgfTtcbiAgICBcbiAgICAvLyBIaWRlIGFsbCBtZW51c1xuICAgIGV4cG9ydCBjb25zdCBoaWRlQWxsTWVudXMgPSAoKSA9PiB7IFxuICAgICAgICBoaWRlTWVudShzZWxlY3Rpb25NZW51KTsgXG4gICAgICAgIGhpZGVNZW51KHBsYWNlaG9sZGVyRWRpdE1lbnUpOyBcbiAgICB9O1xuICAgIFxuICAgIC8vIFJlc2V0IGN1cnJlbnQgZWRpdGluZyBzdGF0ZVxuICAgIGNvbnN0IHJlc2V0Q3VycmVudEVkaXRpbmcgPSAoKSA9PiB7XG4gICAgICAgIHN0YXRlLmN1cnJlbnRFZGl0aW5nVmFyaWFibGUgPSBudWxsO1xuICAgICAgICBzdGF0ZS5jdXJyZW50UGxhY2Vob2xkZXJFbGVtZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIFxuICAgIC8vIEluaXRpYWxpemUgdGhlIGNvbnRleHQgbWVudXNcbiAgICBleHBvcnQgY29uc3QgaW5pdE1lbnVzID0gKCkgPT4ge1xuICAgICAgICAvLyBDcmVhdGUgc2VsZWN0aW9uIG1lbnUgZm9yIHRleHQgc2VsZWN0aW9uc1xuICAgICAgICBzZWxlY3Rpb25NZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHNlbGVjdGlvbk1lbnUuaWQgPSAndGV4dFNlbGVjdGlvbk1lbnUnO1xuICAgICAgICBzZWxlY3Rpb25NZW51LmNsYXNzTmFtZSA9ICdmbG9hdGluZy1tZW51JztcbiAgICAgICAgc2VsZWN0aW9uTWVudS5pbm5lckhUTUwgPSBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwbGFjZWhvbGRlci1tZW51LXJvd1wiPlxuICAgICAgICAgIDxidXR0b24gaWQ9XCJuZXdQbGFjZWhvbGRlckJ0blwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeSBmaXhlZC1zaXplLWJ0blwiPk5ldyBQbGFjZWhvbGRlcjwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gaWQ9XCJyZXVzZVBsYWNlaG9sZGVyQnRuXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnkgZml4ZWQtc2l6ZS1idG5cIj5SZXVzZSBQbGFjZWhvbGRlcjwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2VsZWN0aW9uTWVudSk7XG4gICAgXG4gICAgICAgIC8vIENyZWF0ZSBwbGFjZWhvbGRlciBlZGl0IG1lbnUgZm9yIG1vZGlmeWluZyBleGlzdGluZyBwbGFjZWhvbGRlcnNcbiAgICAgICAgcGxhY2Vob2xkZXJFZGl0TWVudSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBwbGFjZWhvbGRlckVkaXRNZW51LmlkID0gJ3BsYWNlaG9sZGVyRWRpdE1lbnUnO1xuICAgICAgICBwbGFjZWhvbGRlckVkaXRNZW51LmNsYXNzTmFtZSA9ICdmbG9hdGluZy1tZW51JztcbiAgICAgICAgcGxhY2Vob2xkZXJFZGl0TWVudS5pbm5lckhUTUwgPSBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwbGFjZWhvbGRlci1tZW51LXJvd1wiPlxuICAgICAgICAgIDxidXR0b24gaWQ9XCJlZGl0UGxhY2Vob2xkZXJCdG5cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXByaW1hcnkgZml4ZWQtc2l6ZS1idG5cIj5DaGFuZ2U8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uIGlkPVwiZWRpdE92ZXJyaWRlQnRuXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnkgZml4ZWQtc2l6ZS1idG5cIj5SZW5hbWU8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwbGFjZWhvbGRlci1tZW51LXJvd1wiPlxuICAgICAgICAgIDxidXR0b24gaWQ9XCJyZXBsYWNlQWxsQnRuXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi13YXJuaW5nIGZpeGVkLXNpemUtYnRuXCI+RmluZCBBbGw8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uIGlkPVwiZGVsZXRlUGxhY2Vob2xkZXJCdG5cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWRhbmdlciBmaXhlZC1zaXplLWJ0blwiPkRlbGV0ZTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXJFZGl0TWVudSk7XG4gICAgXG4gICAgICAgIC8vIEF0dGFjaCBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgYXR0YWNoTWVudUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfTtcbiAgICBcbiAgICAvLyBIYW5kbGUgdGV4dCBzZWxlY3Rpb24gdG8gc2hvdyB0aGUgc2VsZWN0aW9uIG1lbnVcbiAgICBleHBvcnQgY29uc3QgaGFuZGxlVGV4dFNlbGVjdGlvbiA9ICgpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAoc2VsICYmIHNlbC50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbC5hbmNob3JOb2RlICYmIHNlbC5hbmNob3JOb2RlLnBhcmVudE5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgIXNlbC5hbmNob3JOb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdwbGFjZWhvbGRlcicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmxhc3RSYW5nZSA9IHNlbC5nZXRSYW5nZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gc3RhdGUubGFzdFJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbk1lbnUoc2VsZWN0aW9uTWVudSwgcmVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoaWRlTWVudShzZWxlY3Rpb25NZW51KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgfTtcbiAgICBcbiAgICAvLyBTaG93IHRoZSBwbGFjZWhvbGRlciBlZGl0IG1lbnUgd2hlbiBhIHBsYWNlaG9sZGVyIGlzIGNsaWNrZWRcbiAgICBleHBvcnQgY29uc3QgaGFuZGxlUGxhY2Vob2xkZXJDbGljayA9IChlKSA9PiB7XG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BsYWNlaG9sZGVyJykpIHtcbiAgICAgICAgICAgIC8vIFN0b3AgcHJvcGFnYXRpb24gc28gdGhhdCBvdGhlciBoYW5kbGVycyAoZS5nLiBzZWxlY3Rpb24gbWVudSkgZG8gbm90IGludGVyZmVyZVxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgdmFyaWFibGUgdXNpbmcgdGhlIGRhdGEtaWQgYXR0cmlidXRlXG4gICAgICAgICAgICBzdGF0ZS5jdXJyZW50RWRpdGluZ1ZhcmlhYmxlID0gc3RhdGUudmFyaWFibGVzLmZpbmQodiA9PiB2LmlkID09PSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSk7XG4gICAgICAgICAgICBzdGF0ZS5jdXJyZW50UGxhY2Vob2xkZXJFbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAvLyBQb3NpdGlvbiB0aGUgcGxhY2Vob2xkZXIgZWRpdCBtZW51IG5lYXIgdGhlIGNsaWNrZWQgZWxlbWVudFxuICAgICAgICAgICAgcG9zaXRpb25NZW51KHBsYWNlaG9sZGVyRWRpdE1lbnUsIGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgLy8gSGFuZGxlIGRlbGV0ZSBidXR0b24gY2xpY2sgaW4gcGxhY2Vob2xkZXIgZWRpdCBtZW51XG4gICAgZXhwb3J0IGNvbnN0IGhhbmRsZURlbGV0ZVBsYWNlaG9sZGVyID0gKCkgPT4ge1xuICAgICAgICBoaWRlTWVudShwbGFjZWhvbGRlckVkaXRNZW51KTtcbiAgICAgICAgaWYgKHN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlckVsZW1lbnQpIHtcbiAgICAgICAgICAgIHN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlckVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIHRoZSB2YXJpYWJsZXMgaW4gdGhlIGVkaXRvciBhZnRlciBkZWxldGlvblxuICAgICAgICBpZiAodHlwZW9mIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZXNldEN1cnJlbnRFZGl0aW5nKCk7XG4gICAgfTtcbiAgICBcbiAgICAvLyBIYW5kbGUgZWRpdCBwbGFjZWhvbGRlciBidXR0b24gY2xpY2tcbiAgICBleHBvcnQgY29uc3QgaGFuZGxlRWRpdFBsYWNlaG9sZGVyID0gKCkgPT4ge1xuICAgICAgICBoaWRlTWVudShwbGFjZWhvbGRlckVkaXRNZW51KTtcbiAgICAgICAgc3RhdGUuaXNFZGl0aW5nUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgICAvLyBPcGVuIHRoZSBtb2RhbCBzbyB0aGUgdXNlciBjYW4gc2VsZWN0IGEgbmV3IHBsYWNlaG9sZGVyIHR5cGVcbiAgICAgICAgJCgnI3BsYWNlaG9sZGVyTW9kYWwnKS5tb2RhbCgnc2hvdycpO1xuICAgICAgICByZXNldEN1cnJlbnRFZGl0aW5nKCk7XG4gICAgfTtcbiAgICBcbiAgICAvLyBIYW5kbGUgZWRpdCBvdmVycmlkZSBidXR0b24gY2xpY2tcbiAgICBleHBvcnQgY29uc3QgaGFuZGxlRWRpdE92ZXJyaWRlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBoaWRlTWVudShwbGFjZWhvbGRlckVkaXRNZW51KTtcbiAgICAgICAgY29uc3QgeyB2YWx1ZTogbmV3T3ZlcnJpZGUgfSA9IGF3YWl0IFN3YWwuZmlyZSh7XG4gICAgICAgICAgICB0aXRsZTogJ0NoYW5nZSBPdmVycmlkZScsXG4gICAgICAgICAgICBpbnB1dDogJ3RleHQnLFxuICAgICAgICAgICAgaW5wdXRMYWJlbDogJ0VudGVyIG5ldyBvdmVycmlkZSB0ZXh0JyxcbiAgICAgICAgICAgIGlucHV0VmFsdWU6IHN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlckVsZW1lbnQgPyBzdGF0ZS5jdXJyZW50UGxhY2Vob2xkZXJFbGVtZW50LnRleHRDb250ZW50IDogJydcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChuZXdPdmVycmlkZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuY3VycmVudFBsYWNlaG9sZGVyRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlckVsZW1lbnQudGV4dENvbnRlbnQgPSBuZXdPdmVycmlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5jdXJyZW50RWRpdGluZ1ZhcmlhYmxlKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuY3VycmVudEVkaXRpbmdWYXJpYWJsZS5kaXNwbGF5T3ZlcnJpZGUgPSBuZXdPdmVycmlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlVmFyaWFibGVzTGlzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZVZhcmlhYmxlc0xpc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXNldEN1cnJlbnRFZGl0aW5nKCk7XG4gICAgfTtcbiAgICBcbiAgICAvLyBIYW5kbGUgXCJOZXcgUGxhY2Vob2xkZXJcIiBidXR0b24gY2xpY2tcbiAgICBleHBvcnQgY29uc3QgaGFuZGxlTmV3UGxhY2Vob2xkZXIgPSAoKSA9PiB7XG4gICAgICAgIC8vIFJlc2V0IGFueSBwcmV2aW91c2x5IHNhdmVkIHNlbGVjdGlvbiBkYXRhXG4gICAgICAgIHN0YXRlLmxhc3RTZWxlY3RlZFRleHQgPSAnJztcbiAgICAgICAgXG4gICAgICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgdGV4dCB0byBzdGF0ZSBiZWZvcmUgaGlkaW5nIHRoZSBzZWxlY3Rpb24gbWVudVxuICAgICAgICBjb25zdCBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIGlmIChzZWwgJiYgc2VsLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHN0YXRlLmxhc3RTZWxlY3RlZFRleHQgPSBzZWwudG9TdHJpbmcoKS50cmltKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNlbGVjdGlvbiBtZW51OiBTYXZlZCBzZWxlY3RlZCB0ZXh0OlwiLCBzdGF0ZS5sYXN0U2VsZWN0ZWRUZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2VsZWN0aW9uIG1lbnU6IE5vIHRleHQgc2VsZWN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGhpZGVNZW51KHNlbGVjdGlvbk1lbnUpO1xuICAgICAgICAkKCcjcGxhY2Vob2xkZXJNb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgfTtcbiAgICBcbiAgICAvLyBIYW5kbGUgXCJSZXVzZSBQbGFjZWhvbGRlclwiIGJ1dHRvbiBjbGlja1xuICAgIGV4cG9ydCBjb25zdCBoYW5kbGVSZXVzZVBsYWNlaG9sZGVyID0gKCkgPT4ge1xuICAgICAgICAvLyBSZXNldCBhbnkgcHJldmlvdXNseSBzYXZlZCBzZWxlY3Rpb24gZGF0YVxuICAgICAgICBzdGF0ZS5sYXN0U2VsZWN0ZWRUZXh0ID0gJyc7XG4gICAgICAgIFxuICAgICAgICAvLyBTYXZlIHRoZSBjdXJyZW50IHNlbGVjdGVkIHRleHQgdG8gc3RhdGUgYmVmb3JlIGhpZGluZyB0aGUgc2VsZWN0aW9uIG1lbnVcbiAgICAgICAgY29uc3Qgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICBpZiAoc2VsICYmIHNlbC50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzdGF0ZS5sYXN0U2VsZWN0ZWRUZXh0ID0gc2VsLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZXVzZSBwbGFjZWhvbGRlciBtZW51OiBTYXZlZCBzZWxlY3RlZCB0ZXh0OlwiLCBzdGF0ZS5sYXN0U2VsZWN0ZWRUZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmV1c2UgcGxhY2Vob2xkZXIgbWVudTogTm8gdGV4dCBzZWxlY3RlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaGlkZU1lbnUoc2VsZWN0aW9uTWVudSk7XG4gICAgICAgIGlmIChzdGF0ZS52YXJpYWJsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBTd2FsLmZpcmUoJ05vIGV4aXN0aW5nIHBsYWNlaG9sZGVycycsICdUaGVyZSBhcmUgbm8gcGxhY2Vob2xkZXJzIHRvIHJldXNlIHlldC4nLCAnaW5mbycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNvcnRlZFZhcmlhYmxlcyA9IFsuLi5zdGF0ZS52YXJpYWJsZXNdLnNvcnQoKGEsIGIpID0+XG4gICAgICAgICAgICAoc3RhdGUudXNhZ2VUcmFja2VyW2IuaWRdIHx8IDApIC0gKHN0YXRlLnVzYWdlVHJhY2tlclthLmlkXSB8fCAwKSB8fCBhLm9yZGVyIC0gYi5vcmRlclxuICAgICAgICApO1xuICAgICAgICBsZXQgaHRtbCA9IGA8ZGl2IGlkPVwicmV1c2VQbGFjZWhvbGRlckNvbnRhaW5lclwiIHN0eWxlPVwiZGlzcGxheTogZmxleDsgZmxleC13cmFwOiB3cmFwO1wiPmA7XG4gICAgICAgIHNvcnRlZFZhcmlhYmxlcy5mb3JFYWNoKHYgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGlzcGxheVRleHQgPSB2LmRpc3BsYXlPdmVycmlkZSB8fCB2Lm9mZmljaWFsRGlzcGxheTtcbiAgICAgICAgICAgIGh0bWwgKz0gYDxidXR0b24gdHlwZT1cImJ1dHRvblwiIFxuICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkgYnRuLXNtIG0tMSByZXVzZS1wbGFjZWhvbGRlci1idG5cIiBcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD1cIiR7di5pZH1cIiBcbiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCIke3YuaWR9XCI+XG4gICAgICAgICAgICAgICAgICR7ZGlzcGxheVRleHR9XG4gICAgICAgICAgICAgICA8L2J1dHRvbj5gO1xuICAgICAgICB9KTtcbiAgICAgICAgaHRtbCArPSBgPC9kaXY+YDtcbiAgICAgICAgU3dhbC5maXJlKHtcbiAgICAgICAgICAgIHRpdGxlOiAnU2VsZWN0IGEgcGxhY2Vob2xkZXIgdG8gcmV1c2UnLFxuICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsXG4gICAgICAgICAgICBkaWRPcGVuOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gU3dhbC5nZXRIdG1sQ29udGFpbmVyKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYnRucyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcucmV1c2UtcGxhY2Vob2xkZXItYnRuJyk7XG4gICAgICAgICAgICAgICAgYnRucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGUgPSBzdGF0ZS52YXJpYWJsZXMuZmluZCh2ID0+IHYuaWQgPT09IGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZSkgZHVwbGljYXRlUGxhY2Vob2xkZXIodmFyaWFibGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBcbiAgICAvLyBIYW5kbGUgXCJSZXBsYWNlIEFsbFwiIGJ1dHRvbiBjbGljayBpbiBwbGFjZWhvbGRlciBlZGl0IG1lbnVcbiAgICBleHBvcnQgY29uc3QgaGFuZGxlUmVwbGFjZUFsbCA9ICgpID0+IHtcbiAgICAgICAgaGlkZU1lbnUocGxhY2Vob2xkZXJFZGl0TWVudSk7XG4gICAgICAgIFxuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSB0aGUgY3VycmVudCBwbGFjZWhvbGRlciBlbGVtZW50IGFuZCB2YXJpYWJsZVxuICAgICAgICBpZiAoIXN0YXRlLmN1cnJlbnRQbGFjZWhvbGRlckVsZW1lbnQgfHwgIXN0YXRlLmN1cnJlbnRFZGl0aW5nVmFyaWFibGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNaXNzaW5nIHBsYWNlaG9sZGVyIGVsZW1lbnQgb3IgdmFyaWFibGUgZm9yIHJlcGxhY2UgYWxsXCIpO1xuICAgICAgICAgICAgcmVzZXRDdXJyZW50RWRpdGluZygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBHZXQgdGhlIHRleHQgZnJvbSB0aGUgcGxhY2Vob2xkZXJcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXJUZXh0ID0gc3RhdGUuY3VycmVudFBsYWNlaG9sZGVyRWxlbWVudC50ZXh0Q29udGVudC50cmltKCk7XG4gICAgICAgIGlmICghcGxhY2Vob2xkZXJUZXh0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiUGxhY2Vob2xkZXIgaGFzIG5vIHRleHQgdG8gc2VhcmNoIGZvclwiKTtcbiAgICAgICAgICAgIHJlc2V0Q3VycmVudEVkaXRpbmcoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXJJZCA9IHN0YXRlLmN1cnJlbnRFZGl0aW5nVmFyaWFibGUuaWQ7XG4gICAgICAgIGlmICghcGxhY2Vob2xkZXJJZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlBsYWNlaG9sZGVyIGhhcyBubyBJRFwiKTtcbiAgICAgICAgICAgIHJlc2V0Q3VycmVudEVkaXRpbmcoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ291bnQgb2NjdXJyZW5jZXMgb2YgdGhlIHRleHQgaW4gdGhlIGVkaXRvclxuICAgICAgICBjb25zdCBlZGl0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0b3J5VGV4dFwiKTtcbiAgICAgICAgY29uc3QgZWRpdG9yQ29udGVudCA9IGVkaXRvci50ZXh0Q29udGVudDtcbiAgICAgICAgY29uc3Qgb2NjdXJyZW5jZXMgPSAoZWRpdG9yQ29udGVudC5tYXRjaChuZXcgUmVnRXhwKGBcXFxcYiR7U3RyaW5nVXRpbHMuZXNjYXBlUmVnRXhwKHBsYWNlaG9sZGVyVGV4dCl9XFxcXGJgLCAnZycpKSB8fCBbXSkubGVuZ3RoO1xuICAgICAgICBcbiAgICAgICAgLy8gSWYgdGhlcmUncyBvbmx5IG9uZSBvY2N1cnJlbmNlICh0aGUgcGxhY2Vob2xkZXIgaXRzZWxmKSwgbm90aWZ5IHRoZSB1c2VyXG4gICAgICAgIGlmIChvY2N1cnJlbmNlcyA8PSAxKSB7XG4gICAgICAgICAgICBTd2FsLmZpcmUoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm8gb3RoZXIgb2NjdXJyZW5jZXMgZm91bmQnLFxuICAgICAgICAgICAgICAgIHRleHQ6IGBObyBvdGhlciBpbnN0YW5jZXMgb2YgXCIke3BsYWNlaG9sZGVyVGV4dH1cIiB3ZXJlIGZvdW5kIGluIHlvdXIgc3RvcnkuYCxcbiAgICAgICAgICAgICAgICBpY29uOiAnaW5mbydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzZXRDdXJyZW50RWRpdGluZygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBBc2sgdXNlciB0byBjb25maXJtIHJlcGxhY2luZyBhbGwgb2NjdXJyZW5jZXNcbiAgICAgICAgU3dhbC5maXJlKHtcbiAgICAgICAgICAgIHRpdGxlOiAnTXVsdGlwbGUgb2NjdXJyZW5jZXMgZm91bmQnLFxuICAgICAgICAgICAgaHRtbDogYEZvdW5kIDxzdHJvbmc+JHtvY2N1cnJlbmNlcy0xfTwvc3Ryb25nPiBvdGhlciBpbnN0YW5jZShzKSBvZiBcIjxzdHJvbmc+JHtwbGFjZWhvbGRlclRleHR9PC9zdHJvbmc+XCIgaW4geW91ciBzdG9yeS48YnI+V291bGQgeW91IGxpa2UgdG8gcmVwbGFjZSBhbGwgdGhlc2UgaW5zdGFuY2VzIHdpdGggdGhpcyBwbGFjZWhvbGRlcj9gLFxuICAgICAgICAgICAgaWNvbjogJ3F1ZXN0aW9uJyxcbiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1llcywgcmVwbGFjZSBhbGwnLFxuICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ05vLCBjYW5jZWwnXG4gICAgICAgIH0pLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgUmVwbGFjaW5nIGFsbCBvY2N1cnJlbmNlcyBvZiBcIiR7cGxhY2Vob2xkZXJUZXh0fVwiIHdpdGggcGxhY2Vob2xkZXIgJHtwbGFjZWhvbGRlcklkfWApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgZXhpc3RpbmcgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgcmVwbGFjZW1lbnRcbiAgICAgICAgICAgICAgICBhcHBseVBsYWNlaG9sZGVyVG9BbGxPY2N1cnJlbmNlcyhwbGFjZWhvbGRlclRleHQsIHBsYWNlaG9sZGVySWQsIHBsYWNlaG9sZGVyVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmVzZXRDdXJyZW50RWRpdGluZygpO1xuICAgIH07XG4gICAgXG4gICAgLy8gQXR0YWNoIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgbWVudSBlbGVtZW50c1xuICAgIGNvbnN0IGF0dGFjaE1lbnVFdmVudExpc3RlbmVycyA9ICgpID0+IHtcbiAgICAgICAgLy8gQ2xpY2sgb3V0c2lkZSBtZW51cyB0byBjbG9zZSB0aGVtXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghc2VsZWN0aW9uTWVudS5jb250YWlucyhlLnRhcmdldCkgJiYgIXBsYWNlaG9sZGVyRWRpdE1lbnUuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgaGlkZUFsbE1lbnVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICAvLyBUZXh0IHNlbGVjdGlvbiBldmVudHNcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3J5VGV4dCcpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVUZXh0U2VsZWN0aW9uKTtcbiAgICBcbiAgICAgICAgLy8gUGxhY2Vob2xkZXIgY2xpY2sgZXZlbnRzXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdG9yeVRleHQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZVBsYWNlaG9sZGVyQ2xpY2spO1xuICAgIFxuICAgICAgICAvLyBNZW51IGJ1dHRvbiBldmVudCBoYW5kbGVyc1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3UGxhY2Vob2xkZXJCdG4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZU5ld1BsYWNlaG9sZGVyKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JldXNlUGxhY2Vob2xkZXJCdG4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZVJldXNlUGxhY2Vob2xkZXIpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdFBsYWNlaG9sZGVyQnRuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVFZGl0UGxhY2Vob2xkZXIpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdE92ZXJyaWRlQnRuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVFZGl0T3ZlcnJpZGUpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVsZXRlUGxhY2Vob2xkZXJCdG4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZURlbGV0ZVBsYWNlaG9sZGVyKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlcGxhY2VBbGxCdG4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZVJlcGxhY2VBbGwpO1xuICAgIH07XG4gICAgXG4gICAgLy8gRXhwb3J0IG1lbnUgZWxlbWVudHMgZm9yIGV4dGVybmFsIGFjY2VzcyBpZiBuZWVkZWRcbiAgICBleHBvcnQgY29uc3QgZ2V0U2VsZWN0aW9uTWVudSA9ICgpID0+IHNlbGVjdGlvbk1lbnU7XG4gICAgZXhwb3J0IGNvbnN0IGdldFBsYWNlaG9sZGVyRWRpdE1lbnUgPSAoKSA9PiBwbGFjZWhvbGRlckVkaXRNZW51O1xuICAgIFxuICAgIC8vIEV4cG9ydCB0aGUgaW5pdGlhbGl6YXRpb24gb2YgbWVudXMgdG8gYmUgY2FsbGVkIGZyb20gbWFpbi5qc1xuICAgIGV4cG9ydCBjb25zdCBpbml0TWVudVN5c3RlbSA9ICgpID0+IHtcbiAgICAgICAgLy8gQ3JlYXRlIG1lbnVzIGlmIHRoZXkgZG9uJ3QgZXhpc3QgeWV0XG4gICAgICAgIGlmICghc2VsZWN0aW9uTWVudSB8fCAhcGxhY2Vob2xkZXJFZGl0TWVudSkge1xuICAgICAgICAgIGluaXRNZW51cygpO1xuICAgICAgICB9XG4gICAgfTsiXSwibmFtZXMiOlsiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiYXJnIiwiY2FsbCIsImgiLCJsIiwiZiIsInMiLCJ5IiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsInAiLCJkIiwiZ2V0UHJvdG90eXBlT2YiLCJ2IiwidmFsdWVzIiwiZyIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIkVycm9yIiwiZG9uZSIsIm1ldGhvZCIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfbmV4dCIsIl90aHJvdyIsInN0YXRlIiwiU3RyaW5nVXRpbHMiLCJkdXBsaWNhdGVQbGFjZWhvbGRlciIsImluc2VydFBsYWNlaG9sZGVyIiwidXBkYXRlVmFyaWFibGVzTGlzdCIsInVwZGF0ZVZhcmlhYmxlc0Zyb21FZGl0b3IiLCJhcHBseVBsYWNlaG9sZGVyVG9BbGxPY2N1cnJlbmNlcyIsInNlbGVjdGlvbk1lbnUiLCJwbGFjZWhvbGRlckVkaXRNZW51IiwicG9zaXRpb25NZW51IiwibWVudSIsInJlY3QiLCJzdHlsZSIsImRpc3BsYXkiLCJtZW51V2lkdGgiLCJvZmZzZXRXaWR0aCIsIm1lbnVIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXQiLCJkZXNpcmVkTGVmdCIsIndpbmRvdyIsInNjcm9sbFgiLCJsZWZ0Iiwid2lkdGgiLCJNYXRoIiwibWF4IiwibWluIiwiaW5uZXJXaWR0aCIsImRlc2lyZWRUb3AiLCJzcGFjZUJlbG93IiwiaW5uZXJIZWlnaHQiLCJib3R0b20iLCJzY3JvbGxZIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwidG9wIiwiaGlkZU1lbnUiLCJoaWRlQWxsTWVudXMiLCJyZXNldEN1cnJlbnRFZGl0aW5nIiwiY3VycmVudEVkaXRpbmdWYXJpYWJsZSIsImN1cnJlbnRQbGFjZWhvbGRlckVsZW1lbnQiLCJpbml0TWVudXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImNsYXNzTmFtZSIsImlubmVySFRNTCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImF0dGFjaE1lbnVFdmVudExpc3RlbmVycyIsImhhbmRsZVRleHRTZWxlY3Rpb24iLCJzZXRUaW1lb3V0Iiwic2VsIiwiZ2V0U2VsZWN0aW9uIiwidG9TdHJpbmciLCJ0cmltIiwiYW5jaG9yTm9kZSIsInBhcmVudE5vZGUiLCJjb250YWlucyIsImxhc3RSYW5nZSIsImdldFJhbmdlQXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJoYW5kbGVQbGFjZWhvbGRlckNsaWNrIiwidGFyZ2V0Iiwic3RvcFByb3BhZ2F0aW9uIiwidmFyaWFibGVzIiwiZmluZCIsImdldEF0dHJpYnV0ZSIsImhhbmRsZURlbGV0ZVBsYWNlaG9sZGVyIiwiaGFuZGxlRWRpdFBsYWNlaG9sZGVyIiwiaXNFZGl0aW5nUGxhY2Vob2xkZXIiLCIkIiwibW9kYWwiLCJoYW5kbGVFZGl0T3ZlcnJpZGUiLCJfcmVmIiwiX2NhbGxlZSIsIl95aWVsZCRTd2FsJGZpcmUiLCJuZXdPdmVycmlkZSIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJTd2FsIiwiZmlyZSIsInRpdGxlIiwiaW5wdXQiLCJpbnB1dExhYmVsIiwiaW5wdXRWYWx1ZSIsInRleHRDb250ZW50IiwidW5kZWZpbmVkIiwiZGlzcGxheU92ZXJyaWRlIiwiaGFuZGxlTmV3UGxhY2Vob2xkZXIiLCJsYXN0U2VsZWN0ZWRUZXh0IiwiY29uc29sZSIsImxvZyIsImhhbmRsZVJldXNlUGxhY2Vob2xkZXIiLCJzb3J0ZWRWYXJpYWJsZXMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJzb3J0IiwiYiIsInVzYWdlVHJhY2tlciIsIm9yZGVyIiwiaHRtbCIsImRpc3BsYXlUZXh0Iiwib2ZmaWNpYWxEaXNwbGF5IiwiY29uY2F0Iiwic2hvd0NhbmNlbEJ1dHRvbiIsInNob3dDb25maXJtQnV0dG9uIiwiZGlkT3BlbiIsImNvbnRhaW5lciIsImdldEh0bWxDb250YWluZXIiLCJidG5zIiwicXVlcnlTZWxlY3RvckFsbCIsImJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2YXJpYWJsZSIsImNsb3NlIiwiaGFuZGxlUmVwbGFjZUFsbCIsImVycm9yIiwicGxhY2Vob2xkZXJUZXh0IiwicGxhY2Vob2xkZXJJZCIsImVkaXRvciIsImdldEVsZW1lbnRCeUlkIiwiZWRpdG9yQ29udGVudCIsIm9jY3VycmVuY2VzIiwibWF0Y2giLCJSZWdFeHAiLCJlc2NhcGVSZWdFeHAiLCJ0ZXh0IiwiaWNvbiIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uVGV4dCIsInJlc3VsdCIsImlzQ29uZmlybWVkIiwiZ2V0U2VsZWN0aW9uTWVudSIsImdldFBsYWNlaG9sZGVyRWRpdE1lbnUiLCJpbml0TWVudVN5c3RlbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/ui/menu.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/ui/notifications.js":
/*!**********************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/ui/notifications.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   showError: () => (/* binding */ showError),\n/* harmony export */   showToast: () => (/* binding */ showToast)\n/* harmony export */ });\n/**\r\n * Utility functions for showing notifications to the user\r\n */\n\n/**\r\n * Shows a toast notification to the user\r\n * @param {string} message - The message to display\r\n * @param {string} type - The type of notification (success, error, warning, info)\r\n * @param {number} duration - How long to show the notification in ms\r\n */\nvar showToast = function showToast(message) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';\n  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3000;\n  if (typeof Swal !== 'undefined') {\n    // If SweetAlert2 is available\n    Swal.fire({\n      toast: true,\n      position: 'top-end',\n      showConfirmButton: false,\n      timer: duration,\n      timerProgressBar: true,\n      icon: type,\n      title: message\n    });\n  } else {\n    // Fallback to alert if SweetAlert is not available\n    console.log(\"\".concat(type.toUpperCase(), \": \").concat(message));\n    if (type === 'error') {\n      alert(message);\n    }\n  }\n};\n\n/**\r\n * Shows an error notification with a title and message\r\n * @param {string} title - The error title\r\n * @param {string} message - The error message\r\n */\nvar showError = function showError(title, message) {\n  if (typeof Swal !== 'undefined') {\n    Swal.fire({\n      icon: 'error',\n      title: title,\n      text: message\n    });\n  } else {\n    console.error(\"\".concat(title, \": \").concat(message));\n    alert(\"\".concat(title, \": \").concat(message));\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svcHVibGljL2pzL3VpL25vdGlmaWNhdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUEsU0FBUyxHQUFHLFNBQVpBLFNBQVNBLENBQUlDLE9BQU8sRUFBd0M7RUFBQSxJQUF0Q0MsSUFBSSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxTQUFTO0VBQUEsSUFBRUcsUUFBUSxHQUFBSCxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxJQUFJO0VBQ2hFLElBQUksT0FBT0ksSUFBSSxLQUFLLFdBQVcsRUFBRTtJQUM3QjtJQUNBQSxJQUFJLENBQUNDLElBQUksQ0FBQztNQUNOQyxLQUFLLEVBQUUsSUFBSTtNQUNYQyxRQUFRLEVBQUUsU0FBUztNQUNuQkMsaUJBQWlCLEVBQUUsS0FBSztNQUN4QkMsS0FBSyxFQUFFTixRQUFRO01BQ2ZPLGdCQUFnQixFQUFFLElBQUk7TUFDdEJDLElBQUksRUFBRVosSUFBSTtNQUNWYSxLQUFLLEVBQUVkO0lBQ1gsQ0FBQyxDQUFDO0VBQ04sQ0FBQyxNQUFNO0lBQ0g7SUFDQWUsT0FBTyxDQUFDQyxHQUFHLElBQUFDLE1BQUEsQ0FBSWhCLElBQUksQ0FBQ2lCLFdBQVcsQ0FBQyxDQUFDLFFBQUFELE1BQUEsQ0FBS2pCLE9BQU8sQ0FBRSxDQUFDO0lBQ2hELElBQUlDLElBQUksS0FBSyxPQUFPLEVBQUU7TUFDbEJrQixLQUFLLENBQUNuQixPQUFPLENBQUM7SUFDbEI7RUFDSjtBQUNKLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1vQixTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBSU4sS0FBSyxFQUFFZCxPQUFPLEVBQUs7RUFDekMsSUFBSSxPQUFPTSxJQUFJLEtBQUssV0FBVyxFQUFFO0lBQzdCQSxJQUFJLENBQUNDLElBQUksQ0FBQztNQUNOTSxJQUFJLEVBQUUsT0FBTztNQUNiQyxLQUFLLEVBQUVBLEtBQUs7TUFDWk8sSUFBSSxFQUFFckI7SUFDVixDQUFDLENBQUM7RUFDTixDQUFDLE1BQU07SUFDSGUsT0FBTyxDQUFDTyxLQUFLLElBQUFMLE1BQUEsQ0FBSUgsS0FBSyxRQUFBRyxNQUFBLENBQUtqQixPQUFPLENBQUUsQ0FBQztJQUNyQ21CLEtBQUssSUFBQUYsTUFBQSxDQUFJSCxLQUFLLFFBQUFHLE1BQUEsQ0FBS2pCLE9BQU8sQ0FBRSxDQUFDO0VBQ2pDO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rYm9vay8uLi8uLi8uLi9PbmVEcml2ZS9EZXZlbG9wbWVudC9IVE1ML0JsYW5rQm9vay9wdWJsaWMvanMvdWkvbm90aWZpY2F0aW9ucy5qcz8wNjQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyBmb3Igc2hvd2luZyBub3RpZmljYXRpb25zIHRvIHRoZSB1c2VyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFNob3dzIGEgdG9hc3Qgbm90aWZpY2F0aW9uIHRvIHRoZSB1c2VyXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gZGlzcGxheVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlIG9mIG5vdGlmaWNhdGlvbiAoc3VjY2VzcywgZXJyb3IsIHdhcm5pbmcsIGluZm8pXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiAtIEhvdyBsb25nIHRvIHNob3cgdGhlIG5vdGlmaWNhdGlvbiBpbiBtc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNob3dUb2FzdCA9IChtZXNzYWdlLCB0eXBlID0gJ3N1Y2Nlc3MnLCBkdXJhdGlvbiA9IDMwMDApID0+IHtcclxuICAgIGlmICh0eXBlb2YgU3dhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBJZiBTd2VldEFsZXJ0MiBpcyBhdmFpbGFibGVcclxuICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICB0b2FzdDogdHJ1ZSxcclxuICAgICAgICAgICAgcG9zaXRpb246ICd0b3AtZW5kJyxcclxuICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLFxyXG4gICAgICAgICAgICB0aW1lcjogZHVyYXRpb24sXHJcbiAgICAgICAgICAgIHRpbWVyUHJvZ3Jlc3NCYXI6IHRydWUsXHJcbiAgICAgICAgICAgIGljb246IHR5cGUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBtZXNzYWdlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZhbGxiYWNrIHRvIGFsZXJ0IGlmIFN3ZWV0QWxlcnQgaXMgbm90IGF2YWlsYWJsZVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGAke3R5cGUudG9VcHBlckNhc2UoKX06ICR7bWVzc2FnZX1gKTtcclxuICAgICAgICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xyXG4gICAgICAgICAgICBhbGVydChtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogU2hvd3MgYW4gZXJyb3Igbm90aWZpY2F0aW9uIHdpdGggYSB0aXRsZSBhbmQgbWVzc2FnZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgLSBUaGUgZXJyb3IgdGl0bGVcclxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBUaGUgZXJyb3IgbWVzc2FnZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNob3dFcnJvciA9ICh0aXRsZSwgbWVzc2FnZSkgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiBTd2FsICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgIGljb246ICdlcnJvcicsXHJcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgdGV4dDogbWVzc2FnZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGAke3RpdGxlfTogJHttZXNzYWdlfWApO1xyXG4gICAgICAgIGFsZXJ0KGAke3RpdGxlfTogJHttZXNzYWdlfWApO1xyXG4gICAgfVxyXG59OyAiXSwibmFtZXMiOlsic2hvd1RvYXN0IiwibWVzc2FnZSIsInR5cGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJkdXJhdGlvbiIsIlN3YWwiLCJmaXJlIiwidG9hc3QiLCJwb3NpdGlvbiIsInNob3dDb25maXJtQnV0dG9uIiwidGltZXIiLCJ0aW1lclByb2dyZXNzQmFyIiwiaWNvbiIsInRpdGxlIiwiY29uc29sZSIsImxvZyIsImNvbmNhdCIsInRvVXBwZXJDYXNlIiwiYWxlcnQiLCJzaG93RXJyb3IiLCJ0ZXh0IiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/ui/notifications.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/utils/StringUtils.js":
/*!***********************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/utils/StringUtils.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringUtils: () => (/* binding */ StringUtils),\n/* harmony export */   decodeHTMLEntities: () => (/* binding */ decodeHTMLEntities)\n/* harmony export */ });\n/**\n * A dedicated module for string manipulation utilities\n */\nvar StringUtils = {\n  /**\n   * Converts a string to title case (first letter of each word capitalized)\n   */\n  toTitleCase: function toTitleCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  },\n  /**\n   * Capitalizes the first letter of a string\n   */\n  capitalize: function capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n  },\n  /**\n   * Converts a string to PascalCase\n   */\n  pascalCase: function pascalCase(str) {\n    return str.toLowerCase().split(/\\s+/).map(function (word) {\n      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    }).join('');\n  },\n  /**\n   * Converts camelCase or PascalCase to a natural display format with spaces\n   */\n  naturalDisplay: function naturalDisplay(str) {\n    return str.replace(/([a-z])([A-Z])/g, '$1 $2');\n  },\n  /**\n   * Removes all characters except alphanumerics and underscores\n   */\n  sanitizeString: function sanitizeString(str) {\n    return str.replace(/[^a-zA-Z0-9_]/g, '');\n  },\n  /**\n   * Extracts a subtype from a string by removing prefix and trailing numbers\n   */\n  extractSubtype: function extractSubtype(type, prefixLength) {\n    var sub = type.substring(prefixLength);\n    if (sub.startsWith(\"_\")) sub = sub.substring(1);\n    return sub.replace(/\\d+$/, '');\n  },\n  /**\n   * Escapes special characters in a string for use in a regular expression\n   * @param {string} string - The string to escape\n   * @returns {string} The escaped string safe for regex use\n   */\n  escapeRegExp: function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n  }\n};\n\n/**\n * Decodes HTML entities in a string\n */\nvar decodeHTMLEntities = function decodeHTMLEntities(text) {\n  var textarea = document.createElement(\"textarea\");\n  textarea.innerHTML = text;\n  return textarea.value;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svcHVibGljL2pzL3V0aWxzL1N0cmluZ1V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ08sSUFBTUEsV0FBVyxHQUFHO0VBQ3pCO0FBQ0Y7QUFDQTtFQUNFQyxXQUFXLEVBQUUsU0FBYkEsV0FBV0EsQ0FBR0MsR0FBRztJQUFBLE9BQ2ZBLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFDQyxHQUFHO01BQUEsT0FBS0EsR0FBRyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDLEdBQUdGLEdBQUcsQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztJQUFBLEVBQUM7RUFBQTtFQUUzRjtBQUNGO0FBQ0E7RUFDRUMsVUFBVSxFQUFFLFNBQVpBLFVBQVVBLENBQUdQLEdBQUc7SUFBQSxPQUFLQSxHQUFHLENBQUNHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUMsR0FBR0osR0FBRyxDQUFDUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUNGLFdBQVcsQ0FBQyxDQUFDO0VBQUE7RUFFN0U7QUFDRjtBQUNBO0VBQ0VHLFVBQVUsRUFBRSxTQUFaQSxVQUFVQSxDQUFHVCxHQUFHO0lBQUEsT0FBS0EsR0FBRyxDQUFDTSxXQUFXLENBQUMsQ0FBQyxDQUFDSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUNDLEdBQUcsQ0FBQyxVQUFBQyxJQUFJO01BQUEsT0FBSUEsSUFBSSxDQUFDVCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDLEdBQUdRLElBQUksQ0FBQ0osS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDRixXQUFXLENBQUMsQ0FBQztJQUFBLEVBQUMsQ0FBQ08sSUFBSSxDQUFDLEVBQUUsQ0FBQztFQUFBO0VBRXBJO0FBQ0Y7QUFDQTtFQUNFQyxjQUFjLEVBQUUsU0FBaEJBLGNBQWNBLENBQUdkLEdBQUc7SUFBQSxPQUFLQSxHQUFHLENBQUNDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUM7RUFBQTtFQUVoRTtBQUNGO0FBQ0E7RUFDRWMsY0FBYyxFQUFFLFNBQWhCQSxjQUFjQSxDQUFHZixHQUFHO0lBQUEsT0FBS0EsR0FBRyxDQUFDQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO0VBQUE7RUFFMUQ7QUFDRjtBQUNBO0VBQ0VlLGNBQWMsRUFBRSxTQUFoQkEsY0FBY0EsQ0FBR0MsSUFBSSxFQUFFQyxZQUFZLEVBQUs7SUFDdEMsSUFBSUMsR0FBRyxHQUFHRixJQUFJLENBQUNHLFNBQVMsQ0FBQ0YsWUFBWSxDQUFDO0lBQ3RDLElBQUlDLEdBQUcsQ0FBQ0UsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFRixHQUFHLEdBQUdBLEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMvQyxPQUFPRCxHQUFHLENBQUNsQixPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztFQUNoQyxDQUFDO0VBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFcUIsWUFBWSxFQUFFLFNBQWRBLFlBQVlBLENBQUdDLE1BQU0sRUFBSztJQUN4QixPQUFPQSxNQUFNLENBQUN0QixPQUFPLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUN4RDtBQUNGLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ08sSUFBTXVCLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBa0JBLENBQUlDLElBQUksRUFBSztFQUMxQyxJQUFNQyxRQUFRLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLFVBQVUsQ0FBQztFQUNuREYsUUFBUSxDQUFDRyxTQUFTLEdBQUdKLElBQUk7RUFDekIsT0FBT0MsUUFBUSxDQUFDSSxLQUFLO0FBQ3ZCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibGFua2Jvb2svLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svcHVibGljL2pzL3V0aWxzL1N0cmluZ1V0aWxzLmpzPzY3NWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIGRlZGljYXRlZCBtb2R1bGUgZm9yIHN0cmluZyBtYW5pcHVsYXRpb24gdXRpbGl0aWVzXG4gKi9cbmV4cG9ydCBjb25zdCBTdHJpbmdVdGlscyA9IHtcbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgc3RyaW5nIHRvIHRpdGxlIGNhc2UgKGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgY2FwaXRhbGl6ZWQpXG4gICAqL1xuICB0b1RpdGxlQ2FzZTogKHN0cikgPT5cbiAgICBzdHIucmVwbGFjZSgvXFx3XFxTKi9nLCAodHh0KSA9PiB0eHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eHQuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCkpLFxuICBcbiAgLyoqXG4gICAqIENhcGl0YWxpemVzIHRoZSBmaXJzdCBsZXR0ZXIgb2YgYSBzdHJpbmdcbiAgICovXG4gIGNhcGl0YWxpemU6IChzdHIpID0+IHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKS50b0xvd2VyQ2FzZSgpLFxuICBcbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgc3RyaW5nIHRvIFBhc2NhbENhc2VcbiAgICovXG4gIHBhc2NhbENhc2U6IChzdHIpID0+IHN0ci50b0xvd2VyQ2FzZSgpLnNwbGl0KC9cXHMrLykubWFwKHdvcmQgPT4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSkuam9pbignJyksXG4gIFxuICAvKipcbiAgICogQ29udmVydHMgY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UgdG8gYSBuYXR1cmFsIGRpc3BsYXkgZm9ybWF0IHdpdGggc3BhY2VzXG4gICAqL1xuICBuYXR1cmFsRGlzcGxheTogKHN0cikgPT4gc3RyLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMSAkMicpLFxuICBcbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGNoYXJhY3RlcnMgZXhjZXB0IGFscGhhbnVtZXJpY3MgYW5kIHVuZGVyc2NvcmVzXG4gICAqL1xuICBzYW5pdGl6ZVN0cmluZzogKHN0cikgPT4gc3RyLnJlcGxhY2UoL1teYS16QS1aMC05X10vZywgJycpLFxuICBcbiAgLyoqXG4gICAqIEV4dHJhY3RzIGEgc3VidHlwZSBmcm9tIGEgc3RyaW5nIGJ5IHJlbW92aW5nIHByZWZpeCBhbmQgdHJhaWxpbmcgbnVtYmVyc1xuICAgKi9cbiAgZXh0cmFjdFN1YnR5cGU6ICh0eXBlLCBwcmVmaXhMZW5ndGgpID0+IHtcbiAgICBsZXQgc3ViID0gdHlwZS5zdWJzdHJpbmcocHJlZml4TGVuZ3RoKTtcbiAgICBpZiAoc3ViLnN0YXJ0c1dpdGgoXCJfXCIpKSBzdWIgPSBzdWIuc3Vic3RyaW5nKDEpO1xuICAgIHJldHVybiBzdWIucmVwbGFjZSgvXFxkKyQvLCAnJyk7XG4gIH0sXG4gIFxuICAvKipcbiAgICogRXNjYXBlcyBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gYSBzdHJpbmcgZm9yIHVzZSBpbiBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIC0gVGhlIHN0cmluZyB0byBlc2NhcGVcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGVzY2FwZWQgc3RyaW5nIHNhZmUgZm9yIHJlZ2V4IHVzZVxuICAgKi9cbiAgZXNjYXBlUmVnRXhwOiAoc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpOyAvLyAkJiBtZWFucyB0aGUgd2hvbGUgbWF0Y2hlZCBzdHJpbmdcbiAgfVxufTtcblxuLyoqXG4gKiBEZWNvZGVzIEhUTUwgZW50aXRpZXMgaW4gYSBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZUhUTUxFbnRpdGllcyA9ICh0ZXh0KSA9PiB7XG4gIGNvbnN0IHRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuICB0ZXh0YXJlYS5pbm5lckhUTUwgPSB0ZXh0O1xuICByZXR1cm4gdGV4dGFyZWEudmFsdWU7XG59OyAiXSwibmFtZXMiOlsiU3RyaW5nVXRpbHMiLCJ0b1RpdGxlQ2FzZSIsInN0ciIsInJlcGxhY2UiLCJ0eHQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsInRvTG93ZXJDYXNlIiwiY2FwaXRhbGl6ZSIsInNsaWNlIiwicGFzY2FsQ2FzZSIsInNwbGl0IiwibWFwIiwid29yZCIsImpvaW4iLCJuYXR1cmFsRGlzcGxheSIsInNhbml0aXplU3RyaW5nIiwiZXh0cmFjdFN1YnR5cGUiLCJ0eXBlIiwicHJlZml4TGVuZ3RoIiwic3ViIiwic3Vic3RyaW5nIiwic3RhcnRzV2l0aCIsImVzY2FwZVJlZ0V4cCIsInN0cmluZyIsImRlY29kZUhUTUxFbnRpdGllcyIsInRleHQiLCJ0ZXh0YXJlYSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/utils/StringUtils.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/utils/domUtils.js":
/*!********************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/utils/domUtils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearForm: () => (/* binding */ clearForm),\n/* harmony export */   confirmDialog: () => (/* binding */ confirmDialog),\n/* harmony export */   copyToClipboard: () => (/* binding */ copyToClipboard),\n/* harmony export */   createElement: () => (/* binding */ createElement),\n/* harmony export */   downloadTextFile: () => (/* binding */ downloadTextFile),\n/* harmony export */   getElementValue: () => (/* binding */ getElementValue),\n/* harmony export */   getFormData: () => (/* binding */ getFormData),\n/* harmony export */   setElementValue: () => (/* binding */ setElementValue),\n/* harmony export */   showError: () => (/* reexport safe */ _ui_notifications_js__WEBPACK_IMPORTED_MODULE_0__.showError),\n/* harmony export */   showToast: () => (/* reexport safe */ _ui_notifications_js__WEBPACK_IMPORTED_MODULE_0__.showToast),\n/* harmony export */   showView: () => (/* binding */ showView),\n/* harmony export */   toggleClass: () => (/* binding */ toggleClass),\n/* harmony export */   toggleVisibility: () => (/* binding */ toggleVisibility)\n/* harmony export */ });\n/* harmony import */ var _ui_notifications_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ui/notifications.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/ui/notifications.js\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// public/js/utils/domUtils.js\n\n/**\r\n * DOM utility functions for working with the story editor and UI\r\n */\n\n// Import the notification functions instead of duplicating them\n\n\n// Re-export them to maintain compatibility\n\n\n// Show a confirmation dialog using SweetAlert\nvar confirmDialog = function confirmDialog(options) {\n  var defaultOptions = {\n    title: 'Are you sure?',\n    text: 'This action cannot be undone.',\n    icon: 'warning',\n    showCancelButton: true,\n    confirmButtonText: 'Yes',\n    cancelButtonText: 'No'\n  };\n  var finalOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n  return Swal.fire(finalOptions);\n};\n\n// Toggle element visibility\nvar toggleVisibility = function toggleVisibility(selector, isVisible) {\n  var element = typeof selector === 'string' ? document.querySelector(selector) : selector;\n  if (element) {\n    element.style.display = isVisible ? '' : 'none';\n  }\n};\n\n// Toggle class on element\nvar toggleClass = function toggleClass(selector, className, shouldAdd) {\n  var element = typeof selector === 'string' ? document.querySelector(selector) : selector;\n  if (element) {\n    if (shouldAdd) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n};\n\n// Show/hide multiple elements by class\nvar showView = function showView(viewName) {\n  // Hide all view containers\n  document.querySelectorAll('.view-container').forEach(function (el) {\n    el.classList.add('d-none');\n  });\n\n  // Show the requested view\n  document.getElementById(viewName).classList.remove('d-none');\n};\n\n// Create element with attributes and content\nvar createElement = function createElement(tag) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var element = document.createElement(tag);\n\n  // Set attributes\n  for (var _i = 0, _Object$entries = Object.entries(attributes); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n    if (key === 'className') {\n      element.className = value;\n    } else if (key === 'style' && _typeof(value) === 'object') {\n      Object.assign(element.style, value);\n    } else if (key.startsWith('on') && typeof value === 'function') {\n      var eventName = key.substring(2).toLowerCase();\n      element.addEventListener(eventName, value);\n    } else if (key === 'html') {\n      element.innerHTML = value;\n    } else if (key === 'text') {\n      element.textContent = value;\n    } else {\n      element.setAttribute(key, value);\n    }\n  }\n\n  // Append children\n  children.forEach(function (child) {\n    if (typeof child === 'string') {\n      element.appendChild(document.createTextNode(child));\n    } else if (child instanceof Node) {\n      element.appendChild(child);\n    }\n  });\n  return element;\n};\n\n// Get DOM element value safely (with default)\nvar getElementValue = function getElementValue(selector) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var element = document.querySelector(selector);\n  if (!element) return defaultValue;\n  if (element.type === 'checkbox') {\n    return element.checked;\n  } else if (element.type === 'radio') {\n    var checkedEl = document.querySelector(\"\".concat(selector, \":checked\"));\n    return checkedEl ? checkedEl.value : defaultValue;\n  } else {\n    return element.value || defaultValue;\n  }\n};\n\n// Set DOM element value safely\nvar setElementValue = function setElementValue(selector, value) {\n  var element = document.querySelector(selector);\n  if (!element) return;\n  if (element.type === 'checkbox') {\n    element.checked = !!value;\n  } else if (element.type === 'radio') {\n    var radio = document.querySelector(\"\".concat(selector, \"[value=\\\"\").concat(value, \"\\\"]\"));\n    if (radio) radio.checked = true;\n  } else {\n    element.value = value;\n  }\n};\n\n// Get form data as object\nvar getFormData = function getFormData(formSelector) {\n  var form = document.querySelector(formSelector);\n  if (!form) return {};\n  var formData = new FormData(form);\n  var data = {};\n  var _iterator = _createForOfIteratorHelper(formData.entries()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n        key = _step$value[0],\n        value = _step$value[1];\n      data[key] = value;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return data;\n};\n\n// Clear form fields\nvar clearForm = function clearForm(formSelector) {\n  var form = document.querySelector(formSelector);\n  if (!form) return;\n  form.reset();\n\n  // Also clear any custom fields that might not be cleared by reset\n  form.querySelectorAll('input:not([type=\"submit\"]):not([type=\"button\"]):not([type=\"reset\"]), textarea, select').forEach(function (el) {\n    if (el.type === 'checkbox' || el.type === 'radio') {\n      el.checked = false;\n    } else {\n      el.value = '';\n    }\n  });\n};\n\n// Fallback method for copying text to clipboard\nvar fallbackCopyTextToClipboard = function fallbackCopyTextToClipboard(text) {\n  var textarea = document.createElement('textarea');\n  textarea.value = text;\n  textarea.style.position = 'fixed';\n  textarea.style.top = '-9999px';\n  document.body.appendChild(textarea);\n  textarea.focus();\n  textarea.select();\n  try {\n    var successful = document.execCommand('copy');\n    document.body.removeChild(textarea);\n    return successful;\n  } catch (err) {\n    document.body.removeChild(textarea);\n    return false;\n  }\n};\n\n// Copy text to clipboard with notification\nvar copyToClipboard = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(text) {\n    var showNotification,\n      success,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          showNotification = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n          success = false;\n          if (!(navigator.clipboard && navigator.clipboard.writeText)) {\n            _context.next = 15;\n            break;\n          }\n          _context.prev = 3;\n          _context.next = 6;\n          return navigator.clipboard.writeText(text);\n        case 6:\n          success = true;\n          _context.next = 13;\n          break;\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](3);\n          console.error('Error copying text: ', _context.t0);\n          success = fallbackCopyTextToClipboard(text);\n        case 13:\n          _context.next = 16;\n          break;\n        case 15:\n          success = fallbackCopyTextToClipboard(text);\n        case 16:\n          if (success && showNotification) {\n            (0,_ui_notifications_js__WEBPACK_IMPORTED_MODULE_0__.showToast)('Copied to clipboard!');\n          }\n          return _context.abrupt(\"return\", success);\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 9]]);\n  }));\n  return function copyToClipboard(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// Download text as file\nvar downloadTextFile = function downloadTextFile(content, filename) {\n  var blob = new Blob([content], {\n    type: 'text/plain;charset=utf-8'\n  });\n  var url = URL.createObjectURL(blob);\n  var a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n  return true;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/utils/domUtils.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/utils/typeHelpers.js":
/*!***********************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/utils/typeHelpers.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeHelpers: () => (/* binding */ TypeHelpers)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/state.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/placeholders.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/core/placeholders.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/utils.js\");\n/* harmony import */ var _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StringUtils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/StringUtils.js\");\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// public/js/utils/typeHelpers.js\n\n\n\n\n\nvar TypeHelpers = {\n  // Helper functions for naturalizeType\n  _extractSubtype: function _extractSubtype(type, prefixLength) {\n    return _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.extractSubtype(type, prefixLength);\n  },\n  _formatNounType: function _formatNounType(sub, nounType, isPlural, isProper) {\n    if (sub.toLowerCase() === \"person\") {\n      return \"Person (\".concat(isProper ? 'proper' : 'common', \", \").concat(isPlural ? 'plural' : 'singular', \")\");\n    }\n    var displayText = _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.toTitleCase(_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(sub || (isProper ? \"Proper Noun\" : \"Common Noun\")));\n    return \"\".concat(displayText, \" (\").concat(isPlural ? 'Plural' : 'Singular', \")\");\n  },\n  naturalizeType: function naturalizeType(type) {\n    // Handle noun patterns (NNP/NNPS/NN/NNS)\n    if (type.startsWith(\"NNP\") || type.startsWith(\"NN\")) {\n      var isProper = type.startsWith(\"NNP\");\n      var isPlural = type.startsWith(\"NNS\") || type.startsWith(\"NNPS\");\n      var prefixLength = isProper ? isPlural ? 4 : 3 : isPlural ? 3 : 2;\n      var sub = TypeHelpers._extractSubtype(type, prefixLength);\n      return TypeHelpers._formatNounType(sub, type, isPlural, isProper);\n    }\n    if (type === \"Onomatopoeia\") return \"Onomatopoeia\";\n\n    // Handle modal verbs\n    if (type.startsWith(\"MD_\")) {\n      var tense = type.substring(3);\n      var tenseNatural = \"\";\n      switch (tense) {\n        case \"VB\":\n          tenseNatural = \"Base (run)\";\n          break;\n        case \"VBP\":\n          tenseNatural = \"Present (I walk)\";\n          break;\n        case \"VBZ\":\n          tenseNatural = \"3rd Person (he leaves)\";\n          break;\n        case \"VBD\":\n          tenseNatural = \"Past (slept)\";\n          break;\n        case \"VBG\":\n          tenseNatural = \"Gerund (crying)\";\n          break;\n        case \"VBN\":\n          tenseNatural = \"Past Participle (eaten)\";\n          break;\n        default:\n          tenseNatural = tense;\n      }\n      return \"Modal Verb (\" + tenseNatural + \")\";\n    }\n\n    // Handle verb tenses\n    var verbTenseMap = {\n      \"VBZ\": \"3rd Person (he leaves)\",\n      \"VBD\": \"Past Tense (slept)\",\n      \"VBG\": \"Gerund (crying)\",\n      \"VBN\": \"Past Participle (eaten)\",\n      \"VBP\": \"Present (I walk)\"\n    };\n    for (var _tense in verbTenseMap) {\n      if (type.startsWith(_tense)) {\n        var remainder = type.substring(_tense.length);\n        var category = remainder.startsWith(\"_\") ? remainder.substring(1) : \"\";\n        return category ? _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.toTitleCase(category) + \" Verb (\" + verbTenseMap[_tense] + \")\" : \"Verb (\" + verbTenseMap[_tense] + \")\";\n      }\n    }\n\n    // Handle base verb form\n    if (type.startsWith(\"VB\")) {\n      var rest = type.substring(2).replace(/^_+/, \"\");\n      return rest ? _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.toTitleCase(rest) + \" Verb (Base Form)\" : \"Verb (Base Form)\";\n    }\n\n    // Handle adjectives and other types\n    if (type.startsWith(\"JJ_\")) {\n      return _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.toTitleCase(_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(type.substring(3)));\n    }\n    if (type.startsWith(\"JJS_\")) {\n      var _sub = type.substring(4);\n      if (_sub.toLowerCase() === \"ordinal\") {\n        return \"Ordinal Number\";\n      }\n      return _StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.toTitleCase(_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(_sub)) + \" Superlative Adjective\";\n    }\n\n    // Handle standard part-of-speech abbreviations\n    var posMap = {\n      \"JJ\": \"Adjective\",\n      \"JJR\": \"Comparative Adjective\",\n      \"JJS\": \"Superlative Adjective\",\n      \"RB\": \"Adverb\",\n      \"RBR\": \"Comparative Adverb\",\n      \"RBS\": \"Superlative Adverb\",\n      \"WRB\": \"WH-adverb\",\n      \"CC\": \"Coordinating Conjunction\",\n      \"PDT\": \"Pre-determiner\",\n      \"WDT\": \"WH-determiner\",\n      \"FW\": \"Foreign Word\",\n      \"Number\": \"Number\",\n      \"Exclamation\": \"Exclamation\"\n    };\n    return posMap[type] || type;\n  },\n  getTooltipForType: function getTooltipForType(type) {\n    var normalizedType = type.trim().toLowerCase();\n    for (var category in _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders) {\n      var _iterator = _createForOfIteratorHelper(_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders[category]),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          if (p.internalType.trim().toLowerCase() === normalizedType) {\n            return p.tooltip;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    var verbTensePrefixes = [\"VBZ\", \"VBD\", \"VBG\", \"VBN\", \"VBP\"];\n    for (var _i = 0, _verbTensePrefixes = verbTensePrefixes; _i < _verbTensePrefixes.length; _i++) {\n      var prefix = _verbTensePrefixes[_i];\n      if (normalizedType.startsWith(prefix.toLowerCase() + \"_\")) {\n        var baseType = \"vb_\" + normalizedType.substring(prefix.length + 1);\n        for (var _category in _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders) {\n          var _iterator2 = _createForOfIteratorHelper(_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders[_category]),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _p = _step2.value;\n              if (_p.internalType.trim().toLowerCase() === baseType) {\n                return _p.tooltip;\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    }\n    return \"No additional info available.\";\n  },\n  getOriginalDisplayForType: function getOriginalDisplayForType(type) {\n    for (var category in _core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders) {\n      var _iterator3 = _createForOfIteratorHelper(_core_placeholders_js__WEBPACK_IMPORTED_MODULE_1__.allPlaceholders[category]),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var p = _step3.value;\n          if (p.internalType === type) {\n            return p.display;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    return type.startsWith(\"NN\") ? TypeHelpers.naturalizeType(type) : type;\n  },\n  guessTypeFromId: function guessTypeFromId(id) {\n    var base = id.replace(/\\d+$/, '');\n    var custom = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.find(function (p) {\n      return p.type === base;\n    });\n    if (custom) return custom.type;\n    var pronounFixedRe = /^PRP(\\d+)(SUB|OBJ|PSA|PSP|REF)$/;\n    if (pronounFixedRe.test(id)) {\n      var match = id.match(pronounFixedRe);\n      var groupNum = match[1];\n      var abbrev = match[2];\n      var formMapReverse = {\n        SUB: \"subject\",\n        OBJ: \"object\",\n        PSA: \"possAdj\",\n        PSP: \"possPron\",\n        REF: \"reflexive\"\n      };\n      return \"PRONOUN|PronounGroup\".concat(groupNum, \"|\").concat(formMapReverse[abbrev]);\n    }\n    var pronounRe = /^([A-Za-z0-9]+)_(subject|object|possAdj|possPron|reflexive)$/;\n    if (pronounRe.test(base)) {\n      var m = base.match(pronounRe);\n      return \"PRONOUN|\".concat(m[1], \"|\").concat(m[2]);\n    }\n    return TypeHelpers.naturalizeType(base);\n  },\n  getNounFinalType: function getNounFinalType(baseInternal, number) {\n    var baseTag = \"\",\n      extra = \"\";\n    if (baseInternal.indexOf(\"_\") !== -1) {\n      var parts = baseInternal.split(\"_\");\n      baseTag = parts[0];\n      extra = parts.slice(1).join(\"_\");\n    } else {\n      baseTag = baseInternal;\n    }\n    var finalTag = baseTag === \"NN\" ? number === \"Singular\" ? \"NN\" : \"NNS\" : baseTag === \"NNP\" ? number === \"Singular\" ? \"NNP\" : \"NNPS\" : number === \"Singular\" ? baseTag : baseTag + \"S\";\n    return extra ? finalTag + \"_\" + extra : finalTag;\n  },\n  computeFinalVerbType: function computeFinalVerbType(baseInternal, tenseTag) {\n    if (baseInternal === \"MD\") return \"MD_\" + tenseTag;\n    var parts = baseInternal.split(\"_\");\n    var baseCategory = parts.slice(1).join(\"_\");\n    return baseCategory ? tenseTag + \"_\" + baseCategory : tenseTag;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/utils/typeHelpers.js\n");

/***/ }),

/***/ "../../../OneDrive/Development/HTML/BlankBook/public/js/utils/utils.js":
/*!*****************************************************************************!*\
  !*** ../../../OneDrive/Development/HTML/BlankBook/public/js/utils/utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringUtils: () => (/* reexport safe */ _StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils),\n/* harmony export */   Utils: () => (/* binding */ Utils),\n/* harmony export */   decodeHTMLEntities: () => (/* reexport safe */ _StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLEntities)\n/* harmony export */ });\n/* harmony import */ var _StringUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StringUtils.js */ \"../../../OneDrive/Development/HTML/BlankBook/public/js/utils/StringUtils.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// public/js/utils/utils.js\n\n\nvar Utils = _objectSpread({\n  debounce: function debounce(func, delay) {\n    var timeout;\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var context = this;\n      clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        return func.apply(context, args);\n      }, delay);\n    };\n  }\n}, _StringUtils_js__WEBPACK_IMPORTED_MODULE_0__.StringUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vT25lRHJpdmUvRGV2ZWxvcG1lbnQvSFRNTC9CbGFua0Jvb2svcHVibGljL2pzL3V0aWxzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNtRTtBQUV4QjtBQUVwQyxJQUFNRSxLQUFLLEdBQUFDLGFBQUE7RUFDaEJDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFHQyxJQUFJLEVBQUVDLEtBQUssRUFBSztJQUN6QixJQUFJQyxPQUFPO0lBQ1gsT0FBTyxZQUFrQjtNQUFBLFNBQUFDLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQU5DLElBQUksT0FBQUMsS0FBQSxDQUFBSixJQUFBLEdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7UUFBSkYsSUFBSSxDQUFBRSxJQUFBLElBQUFKLFNBQUEsQ0FBQUksSUFBQTtNQUFBO01BQ3JCLElBQU1DLE9BQU8sR0FBRyxJQUFJO01BQ3BCQyxZQUFZLENBQUNSLE9BQU8sQ0FBQztNQUNyQkEsT0FBTyxHQUFHUyxVQUFVLENBQUM7UUFBQSxPQUFNWCxJQUFJLENBQUNZLEtBQUssQ0FBQ0gsT0FBTyxFQUFFSCxJQUFJLENBQUM7TUFBQSxHQUFFTCxLQUFLLENBQUM7SUFDOUQsQ0FBQztFQUNIO0FBQUMsR0FFRU4sd0RBQVcsQ0FDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2JsYW5rYm9vay8uLi8uLi8uLi9PbmVEcml2ZS9EZXZlbG9wbWVudC9IVE1ML0JsYW5rQm9vay9wdWJsaWMvanMvdXRpbHMvdXRpbHMuanM/NTIxZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwdWJsaWMvanMvdXRpbHMvdXRpbHMuanNcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMsIGRlY29kZUhUTUxFbnRpdGllcyB9IGZyb20gJy4vU3RyaW5nVXRpbHMuanMnO1xyXG5cclxuZXhwb3J0IHsgU3RyaW5nVXRpbHMsIGRlY29kZUhUTUxFbnRpdGllcyB9O1xyXG5cclxuZXhwb3J0IGNvbnN0IFV0aWxzID0ge1xyXG4gIGRlYm91bmNlOiAoZnVuYywgZGVsYXkpID0+IHtcclxuICAgIGxldCB0aW1lb3V0O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcclxuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXM7XHJcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKSwgZGVsYXkpO1xyXG4gICAgfTtcclxuICB9LFxyXG4gIC8vIFJlLWV4cG9ydCBzdHJpbmcgdXRpbGl0aWVzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XHJcbiAgLi4uU3RyaW5nVXRpbHNcclxufTsiXSwibmFtZXMiOlsiU3RyaW5nVXRpbHMiLCJkZWNvZGVIVE1MRW50aXRpZXMiLCJVdGlscyIsIl9vYmplY3RTcHJlYWQiLCJkZWJvdW5jZSIsImZ1bmMiLCJkZWxheSIsInRpbWVvdXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNvbnRleHQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../OneDrive/Development/HTML/BlankBook/public/js/utils/utils.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 		__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 		module = execOptions.module;
/******/ 		execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	(() => {
/******/ 		__webpack_require__.hmrF = () => ("main." + __webpack_require__.h() + ".hot-update.json");
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("613c27fc385c8b0127ef")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "blankbook:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	(() => {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises = 0;
/******/ 		var blockingPromisesWaiting = [];
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId, fetchPriority) {
/******/ 				return trackBlockingPromise(require.e(chunkId, fetchPriority));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var _main = currentChildModule !== moduleId;
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_acceptedErrorHandlers: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: _main,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = _main ? undefined : moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback, errorHandler) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null) {
/******/ 						for (var i = 0; i < dep.length; i++) {
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
/******/ 						}
/******/ 					} else {
/******/ 						hot._acceptedDependencies[dep] = callback || function () {};
/******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
/******/ 					}
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				// inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			var results = [];
/******/ 		
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
/******/ 		
/******/ 			return Promise.all(results).then(function () {});
/******/ 		}
/******/ 		
/******/ 		function unblock() {
/******/ 			if (--blockingPromises === 0) {
/******/ 				setStatus("ready").then(function () {
/******/ 					if (blockingPromises === 0) {
/******/ 						var list = blockingPromisesWaiting;
/******/ 						blockingPromisesWaiting = [];
/******/ 						for (var i = 0; i < list.length; i++) {
/******/ 							list[i]();
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 				/* fallthrough */
/******/ 				case "prepare":
/******/ 					blockingPromises++;
/******/ 					promise.then(unblock, unblock);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises === 0) return fn();
/******/ 			return new Promise(function (resolve) {
/******/ 				blockingPromisesWaiting.push(function () {
/******/ 					resolve(fn());
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			return setStatus("check")
/******/ 				.then(__webpack_require__.hmrM)
/******/ 				.then(function (update) {
/******/ 					if (!update) {
/******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
/******/ 							function () {
/******/ 								return null;
/******/ 							}
/******/ 						);
/******/ 					}
/******/ 		
/******/ 					return setStatus("prepare").then(function () {
/******/ 						var updatedModules = [];
/******/ 						currentUpdateApplyHandlers = [];
/******/ 		
/******/ 						return Promise.all(
/******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 								promises,
/******/ 								key
/******/ 							) {
/******/ 								__webpack_require__.hmrC[key](
/******/ 									update.c,
/******/ 									update.r,
/******/ 									update.m,
/******/ 									promises,
/******/ 									currentUpdateApplyHandlers,
/******/ 									updatedModules
/******/ 								);
/******/ 								return promises;
/******/ 							}, [])
/******/ 						).then(function () {
/******/ 							return waitForBlockingPromises(function () {
/******/ 								if (applyOnUpdate) {
/******/ 									return internalApply(applyOnUpdate);
/******/ 								}
/******/ 								return setStatus("ready").then(function () {
/******/ 									return updatedModules;
/******/ 								});
/******/ 							});
/******/ 						});
/******/ 					});
/******/ 				});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error(
/******/ 						"apply() is only allowed in ready status (state: " +
/******/ 							currentStatus +
/******/ 							")"
/******/ 					);
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				return setStatus("abort").then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			var disposePromise = setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			var applyPromise = setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
/******/ 				// handle errors in accept handlers and self accepted module load
/******/ 				if (error) {
/******/ 					return setStatus("fail").then(function () {
/******/ 						throw error;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				if (queuedInvalidatedModules) {
/******/ 					return internalApply(options).then(function (list) {
/******/ 						outdatedModules.forEach(function (moduleId) {
/******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 						});
/******/ 						return list;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				return setStatus("idle").then(function () {
/******/ 					return outdatedModules;
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/^blob:/, "").replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = __webpack_require__.hmrS_jsonp = __webpack_require__.hmrS_jsonp || {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		var currentUpdatedModulesList;
/******/ 		var waitingUpdateResolves = {};
/******/ 		function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 			currentUpdatedModulesList = updatedModulesList;
/******/ 			return new Promise((resolve, reject) => {
/******/ 				waitingUpdateResolves[chunkId] = resolve;
/******/ 				// start update chunk loading
/******/ 				var url = __webpack_require__.p + __webpack_require__.hu(chunkId);
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				var loadingEnded = (event) => {
/******/ 					if(waitingUpdateResolves[chunkId]) {
/******/ 						waitingUpdateResolves[chunkId] = undefined
/******/ 						var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 						var realSrc = event && event.target && event.target.src;
/******/ 						error.message = 'Loading hot update chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 						error.name = 'ChunkLoadError';
/******/ 						error.type = errorType;
/******/ 						error.request = realSrc;
/******/ 						reject(error);
/******/ 					}
/******/ 				};
/******/ 				__webpack_require__.l(url, loadingEnded);
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		self["webpackHotUpdateblankbook"] = (chunkId, moreModules, runtime) => {
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					currentUpdate[moduleId] = moreModules[moduleId];
/******/ 					if(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);
/******/ 				}
/******/ 			}
/******/ 			if(runtime) currentUpdateRuntime.push(runtime);
/******/ 			if(waitingUpdateResolves[chunkId]) {
/******/ 				waitingUpdateResolves[chunkId]();
/******/ 				waitingUpdateResolves[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.jsonpHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					/** @type {TODO} */
/******/ 					var result = newModuleFactory
/******/ 						? getAffectedModuleEffects(moduleId)
/******/ 						: {
/******/ 								type: "disposed",
/******/ 								moduleId: moduleId
/******/ 							};
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				var module = __webpack_require__.c[outdatedModuleId];
/******/ 				if (
/******/ 					module &&
/******/ 					(module.hot._selfAccepted || module.hot._main) &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!module.hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: module.hot._requireSelf,
/******/ 						errorHandler: module.hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var errorHandlers = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									var errorHandler =
/******/ 										module.hot._acceptedErrorHandlers[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										errorHandlers.push(errorHandler);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (typeof errorHandlers[k] === "function") {
/******/ 											try {
/******/ 												errorHandlers[k](err, {
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k]
/******/ 												});
/******/ 											} catch (err2) {
/******/ 												if (options.onErrored) {
/******/ 													options.onErrored({
/******/ 														type: "accept-error-handler-errored",
/******/ 														moduleId: outdatedModuleId,
/******/ 														dependencyId: dependenciesForCallbacks[k],
/******/ 														error: err2,
/******/ 														originalError: err
/******/ 													});
/******/ 												}
/******/ 												if (!options.ignoreErrored) {
/******/ 													reportError(err2);
/******/ 													reportError(err);
/******/ 												}
/******/ 											}
/******/ 										} else {
/******/ 											if (options.onErrored) {
/******/ 												options.onErrored({
/******/ 													type: "accept-errored",
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k],
/******/ 													error: err
/******/ 												});
/******/ 											}
/******/ 											if (!options.ignoreErrored) {
/******/ 												reportError(err);
/******/ 											}
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err, {
/******/ 										moduleId: moduleId,
/******/ 										module: __webpack_require__.c[moduleId]
/******/ 									});
/******/ 								} catch (err1) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err1,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err1);
/******/ 										reportError(err);
/******/ 									}
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.jsonp = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.jsonp = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				} else {
/******/ 					currentUpdateChunks[chunkId] = false;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.jsonpHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						!currentUpdateChunks[chunkId]
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = () => {
/******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {
/******/ 				if(response.status === 404) return; // no update available
/******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 				return response.json();
/******/ 			});
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__("../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true");
/******/ 	__webpack_require__("../../../OneDrive/Development/HTML/BlankBook/node_modules/webpack/hot/dev-server.js");
/******/ 	var __webpack_exports__ = __webpack_require__("../../../OneDrive/Development/HTML/BlankBook/public/js/main.js");
/******/ 	
/******/ })()
;