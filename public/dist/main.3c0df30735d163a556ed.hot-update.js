"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateblankbook"]("main",{

/***/ "./public/js/core/placeholderCreation.js":
/*!***********************************************!*\
  !*** ./public/js/core/placeholderCreation.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomPlaceholder: () => (/* binding */ addCustomPlaceholder),\n/* harmony export */   applyPlaceholderToAllOccurrences: () => (/* binding */ applyPlaceholderToAllOccurrences),\n/* harmony export */   duplicatePlaceholder: () => (/* binding */ duplicatePlaceholder),\n/* harmony export */   insertPlaceholder: () => (/* binding */ insertPlaceholder),\n/* harmony export */   insertPlaceholderFromCustom: () => (/* binding */ insertPlaceholderFromCustom)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/StringUtils.js */ \"./public/js/utils/StringUtils.js\");\n/* harmony import */ var _placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./placeholderDOM.js */ \"./public/js/core/placeholderDOM.js\");\n/* harmony import */ var _placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./placeholderManagement.js */ \"./public/js/core/placeholderManagement.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n\n\n/**\n * Duplicates an existing placeholder at the current caret position\n * @param {Object} variable - The placeholder variable to duplicate\n */\nvar duplicatePlaceholder = function duplicatePlaceholder(variable) {\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[variable.id] = (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].usageTracker[variable.id] || 0) + 1;\n  var newId = variable.id;\n  var editor = document.getElementById(\"storyText\");\n  var rangeToUse = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange && editor.contains(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.commonAncestorContainer) ? _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange : function () {\n    (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.ensureEditorFocus)();\n    var sel = window.getSelection();\n    return sel.rangeCount ? sel.getRangeAt(0) : null;\n  }();\n\n  // Get the selected text - either from lastSelectedText or from range\n  var selectedText = \"\";\n  if (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText) {\n    // Use the preserved selected text from modal chains\n    selectedText = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText;\n    console.log(\"Using saved selected text for reuse:\", selectedText);\n  } else if (rangeToUse && !rangeToUse.collapsed) {\n    selectedText = rangeToUse.toString().trim();\n    console.log(\"Using range selected text for reuse:\", selectedText);\n  }\n  var displayText = variable.displayOverride || variable.officialDisplay;\n  (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.insertPlaceholderSpan)(newId, displayText, rangeToUse);\n  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = null;\n\n  // Check if there's selected text that might exist elsewhere in the document\n  if (selectedText) {\n    // Count occurrences of the selected text in the editor\n    var editorContent = editor.textContent;\n    var occurrences = (editorContent.match(new RegExp(\"\\\\b\".concat(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.escapeRegExp(selectedText), \"\\\\b\"), 'g')) || []).length;\n    console.log(\"Found \".concat(occurrences, \" occurrences of \\\"\").concat(selectedText, \"\\\" in the document for reuse\"));\n\n    // Only offer to replace all if there's more than one occurrence\n    if (occurrences > 1) {\n      console.log(\"Showing replace all confirmation dialog for reuse\");\n\n      // Delay showing the replace all dialog to ensure any other modal is fully hidden\n      setTimeout(function () {\n        Swal.fire({\n          title: 'Multiple occurrences found',\n          html: \"Found <strong>\".concat(occurrences, \"</strong> instances of \\\"<strong>\").concat(selectedText, \"</strong>\\\" in your story.<br>Would you like to replace all instances with this placeholder?\"),\n          icon: 'question',\n          showCancelButton: true,\n          confirmButtonText: 'Yes, replace all',\n          cancelButtonText: 'No, just this one',\n          footer: '<small>This is useful for replacing character names or recurring objects with placeholders</small>'\n        }).then(function (result) {\n          if (result.isConfirmed) {\n            console.log(\"User confirmed replace all for reuse\");\n            applyPlaceholderToAllOccurrences(selectedText, newId, displayText);\n          } else {\n            console.log(\"User chose not to replace all for reuse\");\n          }\n\n          // Clear the saved selected text after the dialog is handled\n          console.log(\"Clearing lastSelectedText after replace all dialog for reuse\");\n          _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n        });\n      }, 300); // 300ms delay to ensure modal transition completes\n    } else {\n      // Clear the saved selected text if no replace dialog shown\n      setTimeout(function () {\n        console.log(\"Clearing lastSelectedText after placeholder reuse\");\n        _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n      }, 200);\n    }\n  } else {\n    // Clear the saved selected text if no selected text\n    setTimeout(function () {\n      console.log(\"Clearing lastSelectedText after placeholder reuse\");\n      _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n    }, 200);\n  }\n};\n\n/**\n * Inserts a new placeholder into the editor\n * @param {string} internalType - The internal type of the placeholder\n * @param {string} displayName - The display name of the placeholder\n * @param {boolean} isCustom - Whether this is a custom placeholder\n * @returns {Promise<void>}\n */\nvar insertPlaceholder = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(internalType, displayName, isCustom) {\n    var sanitized, editor, spans, max, newCount, id, rangeToUse, selectedText, displayText, result, editorContent, occurrences;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          sanitized = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.sanitizeString(internalType);\n          editor = document.getElementById(\"storyText\");\n          spans = editor.querySelectorAll(\".placeholder\");\n          max = 0;\n          spans.forEach(function (span) {\n            var id = span.getAttribute(\"data-id\");\n            if (id.startsWith(sanitized)) {\n              var match = id.match(/(\\d+)$/);\n              if (match) {\n                var num = parseInt(match[1], 10);\n                if (num > max) max = num;\n              }\n            }\n          });\n          newCount = max + 1;\n          _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts[sanitized] = newCount;\n          id = sanitized + newCount;\n          rangeToUse = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange && editor.contains(_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange.commonAncestorContainer) ? _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange : function () {\n            (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.ensureEditorFocus)();\n            var sel = window.getSelection();\n            return sel.rangeCount ? sel.getRangeAt(0) : null;\n          }(); // Get selected text - either from lastSelectedText (set by modal chain) or from range\n          selectedText = \"\";\n          if (_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText) {\n            // Use the preserved selected text from modal chains\n            selectedText = _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText;\n            console.log(\"Using saved selected text:\", selectedText);\n          } else if (rangeToUse && !rangeToUse.collapsed) {\n            selectedText = rangeToUse.toString().trim();\n            console.log(\"Using range selected text:\", selectedText);\n          }\n          displayText = selectedText || displayName;\n          if (selectedText) {\n            _context.next = 19;\n            break;\n          }\n          _context.next = 15;\n          return Swal.fire({\n            title: 'Enter temporary word',\n            input: 'text',\n            inputLabel: 'Temporary fill word for this placeholder',\n            inputValue: displayName,\n            showCancelButton: true\n          });\n        case 15:\n          result = _context.sent;\n          if (!result.dismiss) {\n            _context.next = 18;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 18:\n          if (result.value) displayText = result.value;\n        case 19:\n          (0,_placeholderDOM_js__WEBPACK_IMPORTED_MODULE_2__.insertPlaceholderSpan)(id, displayText, rangeToUse);\n          if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.some(function (v) {\n            return v.id === id;\n          })) {\n            _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.push({\n              id: id,\n              internalType: internalType,\n              officialDisplay: displayName,\n              display: displayName,\n              isCustom: !!isCustom,\n              order: _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter++,\n              displayOverride: displayText\n            });\n          }\n          (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateVariablesList)();\n          _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = null;\n\n          // Close the placeholder modal if it's open\n          $('#placeholderModal').modal('hide');\n\n          // Check if there's selected text that might exist elsewhere in the document\n          if (selectedText) {\n            // Count occurrences of the selected text in the editor\n            editorContent = editor.textContent;\n            occurrences = (editorContent.match(new RegExp(\"\\\\b\".concat(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.escapeRegExp(selectedText), \"\\\\b\"), 'g')) || []).length;\n            console.log(\"Found \".concat(occurrences, \" occurrences of \\\"\").concat(selectedText, \"\\\" in the document\"));\n\n            // Only offer to replace all if there's more than one occurrence\n            if (occurrences > 1) {\n              console.log(\"Showing replace all confirmation dialog\");\n\n              // Delay showing the replace all dialog to ensure the modal is fully hidden\n              setTimeout(function () {\n                Swal.fire({\n                  title: 'Multiple occurrences found',\n                  html: \"Found <strong>\".concat(occurrences, \"</strong> instances of \\\"<strong>\").concat(selectedText, \"</strong>\\\" in your story.<br>Would you like to replace all instances with this placeholder?\"),\n                  icon: 'question',\n                  showCancelButton: true,\n                  confirmButtonText: 'Yes, replace all',\n                  cancelButtonText: 'No, just this one',\n                  footer: '<small>This is useful for replacing character names or recurring objects with placeholders</small>'\n                }).then(function (result) {\n                  if (result.isConfirmed) {\n                    console.log(\"User confirmed replace all\");\n                    applyPlaceholderToAllOccurrences(selectedText, id, displayText);\n                  } else {\n                    console.log(\"User chose not to replace all\");\n                  }\n\n                  // Clear the saved selected text after the dialog is handled\n                  console.log(\"Clearing lastSelectedText after replace all dialog\");\n                  _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n                });\n              }, 300); // 300ms delay to ensure modal transition completes\n            } else {\n              // Clear the saved selected text if no replace dialog shown\n              setTimeout(function () {\n                console.log(\"Clearing lastSelectedText after placeholder insertion\");\n                _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n              }, 200);\n            }\n          } else {\n            // Clear the saved selected text if no selected text\n            setTimeout(function () {\n              console.log(\"Clearing lastSelectedText after placeholder insertion\");\n              _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastSelectedText = '';\n            }, 200);\n          }\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function insertPlaceholder(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Applies a placeholder to all occurrences of a text string in the story\n * @param {string} text - The text to replace\n * @param {string} id - The ID of the placeholder\n * @param {string} displayText - The display text of the placeholder\n */\nvar applyPlaceholderToAllOccurrences = function applyPlaceholderToAllOccurrences(text, id, displayText) {\n  var editor = document.getElementById(\"storyText\");\n  var textNodes = [];\n  var _getTextNodes = function getTextNodes(node) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      if (node.textContent.includes(text)) {\n        textNodes.push(node);\n      }\n    } else if (node.childNodes && node.childNodes.length > 0) {\n      node.childNodes.forEach(function (child) {\n        if (!child.classList || !child.classList.contains('placeholder')) {\n          _getTextNodes(child);\n        }\n      });\n    }\n  };\n  _getTextNodes(editor);\n\n  // Track how many replacements were made\n  var replacementsCount = 0;\n  for (var i = textNodes.length - 1; i >= 0; i--) {\n    var node = textNodes[i];\n    var content = node.textContent;\n\n    // Use word boundary regex to match exact words (not substrings of other words)\n    var regex = new RegExp(\"\\\\b\".concat(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.escapeRegExp(text), \"\\\\b\"), 'g');\n    var parts = content.split(regex);\n    if (parts.length > 1) {\n      var parent = node.parentNode;\n      var fragment = document.createDocumentFragment();\n      var lastIndex = 0;\n      var match = void 0;\n      var testRegex = new RegExp(\"\\\\b\".concat(_utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.escapeRegExp(text), \"\\\\b\"), 'g');\n      while ((match = testRegex.exec(content)) !== null) {\n        // Add text before match\n        var beforeText = content.substring(lastIndex, match.index);\n        if (beforeText) {\n          fragment.appendChild(document.createTextNode(beforeText));\n        }\n\n        // Add placeholder\n        var span = document.createElement(\"span\");\n        span.className = \"placeholder\";\n        span.setAttribute(\"data-id\", id);\n        span.setAttribute(\"title\", id);\n        span.setAttribute(\"contenteditable\", \"false\");\n        span.textContent = displayText;\n        fragment.appendChild(span);\n        fragment.appendChild(document.createTextNode(\" \"));\n\n        // Update last index position\n        lastIndex = match.index + text.length;\n        replacementsCount++;\n      }\n\n      // Add any remaining text\n      var afterText = content.substring(lastIndex);\n      if (afterText) {\n        fragment.appendChild(document.createTextNode(afterText));\n      }\n      parent.replaceChild(fragment, node);\n    }\n  }\n  (0,_placeholderManagement_js__WEBPACK_IMPORTED_MODULE_3__.updateVariablesFromEditor)();\n\n  // Notify the user about the number of replacements\n  if (replacementsCount > 0) {\n    Swal.fire({\n      title: 'Replacements Complete',\n      text: \"Replaced \".concat(replacementsCount, \" instances of \\\"\").concat(text, \"\\\" with the placeholder\"),\n      icon: 'success',\n      timer: 2500,\n      timerProgressBar: true,\n      showConfirmButton: false\n    });\n  }\n};\n\n/**\n * Adds a new custom placeholder type to the system with optional type information\n * @param {string} rawText - The raw text to use as the base\n * @param {string} [usage='generic'] - The usage type ('noun', 'verb', or 'generic')\n * @returns {string} The generated internal type\n */\nvar addCustomPlaceholder = function addCustomPlaceholder(rawText) {\n  var usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'generic';\n  var internal;\n  if (usage === \"noun\") {\n    internal = \"NN_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.pascalCase(rawText);\n  } else if (usage === \"verb\") {\n    internal = \"VB_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.pascalCase(rawText);\n  } else {\n    internal = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.pascalCase(rawText);\n  }\n  if (!_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.some(function (p) {\n    return p.type === internal;\n  })) {\n    _state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders.push({\n      type: internal\n    });\n  }\n  return internal;\n};\n\n/**\n * Creates and inserts a custom placeholder into the editor\n * @param {string} rawText - The raw text to use as the base\n */\nvar insertPlaceholderFromCustom = function insertPlaceholderFromCustom(rawText) {\n  var internal = addCustomPlaceholder(rawText);\n  var display = _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_1__.StringUtils.naturalDisplay(internal);\n  insertPlaceholder(internal, display, true);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/core/placeholderCreation.js\n");

/***/ }),

/***/ "./public/js/handlers/events.js":
/*!**************************************!*\
  !*** ./public/js/handlers/events.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initEvents: () => (/* binding */ initEvents)\n/* harmony export */ });\n/* harmony import */ var _core_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/state.js */ \"./public/js/core/state.js\");\n/* harmony import */ var _data_storage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/storage.js */ \"./public/js/data/storage.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"./public/js/utils/utils.js\");\n/* harmony import */ var _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/StringUtils.js */ \"./public/js/utils/StringUtils.js\");\n/* harmony import */ var _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/typeHelpers.js */ \"./public/js/utils/typeHelpers.js\");\n/* harmony import */ var _core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/placeholders.js */ \"./public/js/core/placeholders.js\");\n/* harmony import */ var _ui_forms_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ui/forms.js */ \"./public/js/ui/forms.js\");\n/* harmony import */ var _core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/storyProcessor.js */ \"./public/js/core/storyProcessor.js\");\n/* harmony import */ var _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/domUtils.js */ \"./public/js/utils/domUtils.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _ui_notifications_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/notifications.js */ \"./public/js/ui/notifications.js\");\n// public/js/handlers/events.js\n\n\n\n\n\n\n\n\n\n // Ensure Swal is imported if used\n\n\n// Handle placeholder button click\nvar handlePlaceholderClick = function handlePlaceholderClick(internalType, displayName) {\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder && _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable) {\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateExistingPlaceholder)(_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable, internalType, displayName);\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEditingPlaceholder = false;\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentEditingVariable = null;\n    $('#placeholderModal').modal('hide');\n  } else {\n    // For specialized types that have their own modal chains\n    if (internalType === \"PRONOUN\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.pickPronounFormAndGroup)();\n      $('#placeholderSearch').val('');\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n      // Hide the accordion container after selecting\n      $('.placeholder-accordion-container').hide();\n      return;\n    }\n    if (internalType.startsWith(\"NN\")) {\n      if (internalType === \"NN_Person\") {\n        (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showPersonTypeSelection)(internalType, displayName);\n        $('#placeholderSearch').val('');\n        (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n        // Hide the accordion container after selecting\n        $('.placeholder-accordion-container').hide();\n        return;\n      }\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection)(internalType, displayName);\n      $('#placeholderSearch').val('');\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n      // Hide the accordion container after selecting\n      $('.placeholder-accordion-container').hide();\n      return;\n    }\n    if (internalType.startsWith(\"VB\") || internalType === \"MD\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection)(internalType, displayName);\n      $('#placeholderSearch').val('');\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n      // Hide the accordion container after selecting\n      $('.placeholder-accordion-container').hide();\n      return;\n    }\n\n    // For direct placeholder insertion (non-pronoun, non-noun, non-verb)\n    // We don't need to modify state.lastSelectedText here as it should already be set\n    // by handleNewPlaceholder when the selection menu was clicked\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.insertPlaceholder)(internalType, displayName, false);\n    $('#placeholderSearch').val('');\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n    // Hide the accordion container after inserting the placeholder\n    $('.placeholder-accordion-container').hide();\n  }\n};\n\n// Handle create new story button click\nvar handleCreateNewStory = function handleCreateNewStory(e) {\n  e.preventDefault();\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges) {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Unsaved changes',\n      text: 'Your story has unsaved changes. Would you like to save it to the site before starting a new one?',\n      showDenyButton: true,\n      confirmButtonText: 'Save and start new',\n      denyButtonText: 'Discard changes'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.addCurrentStoryToSavedStories();\n        setTimeout(_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState, 1000);\n      } else if (result.isDenied) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n          title: 'Are you sure?',\n          text: 'This will discard your current unsaved story.',\n          confirmButtonText: 'Yes, start new'\n        }).then(function (res) {\n          if (res.isConfirmed) (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState)();\n        });\n      }\n    });\n  } else {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Are you sure?',\n      text: 'This will discard your current story.',\n      confirmButtonText: 'Yes, start new'\n    }).then(function (res) {\n      if (res.isConfirmed) (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState)();\n    });\n  }\n};\n\n// Handle clear form button click\nvar handleClearForm = function handleClearForm(e) {\n  e.preventDefault();\n  if (_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges) {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Clear Form',\n      text: 'You have unsaved changes. Would you like to save your story to the site before clearing the form?',\n      showDenyButton: true,\n      confirmButtonText: 'Save first',\n      denyButtonText: 'Clear without saving'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.addCurrentStoryToSavedStories();\n        setTimeout(_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState, 1000);\n      } else if (result.isDenied) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n          title: 'Are you sure?',\n          text: 'This will clear your current form and discard all unsaved changes.',\n          confirmButtonText: 'Yes, clear form'\n        }).then(function (res) {\n          if (res.isConfirmed) (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState)();\n        });\n      }\n    });\n  } else {\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Clear Form',\n      text: 'This will clear all content from the current form. Are you sure?',\n      confirmButtonText: 'Yes, clear form'\n    }).then(function (res) {\n      if (res.isConfirmed) (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.resetStoryState)();\n    });\n  }\n};\n\n// Handle generate story button click\nvar handleGenerateStory = function handleGenerateStory() {\n  // Use the form validation function from forms.js\n  if (!(0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.validateInputForm)()) {\n    return; // Validation failed\n  }\n\n  // Collect values from the input form\n  var inputForm = document.getElementById('inputForm');\n  var inputs = inputForm.querySelectorAll('input[type=\"text\"]');\n\n  // Reset fillValues\n  _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = {};\n\n  // Populate fillValues with the values from the input fields\n  inputs.forEach(function (input) {\n    var id = input.getAttribute('data-id');\n    if (id && input.value.trim() !== '') {\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues[id] = input.value.trim();\n      console.log(\"Collected input value for \".concat(id, \": \\\"\").concat(input.value.trim(), \"\\\"\"));\n    }\n  });\n\n  // Generate the final story with replacements\n  var _final = (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.generateLegacyText)();\n  _final = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.fillPlaceholders)(_final, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues, _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups);\n\n  // Update the result display\n  $('#finalStory').text(_final);\n  $('#displayTitle').text($('#storyTitle').val());\n  $('#displayAuthor').text($('#storyAuthor').val());\n  $('#displayTags').text($('#storyTags').val());\n  $('#result').removeClass('d-none');\n  $('#inputs').addClass('d-none');\n};\n\n// Handle save story to site button\nvar handleSaveStoryToSite = function handleSaveStoryToSite() {\n  sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n    title: 'Save Story',\n    html: \"\\n          <input type=\\\"text\\\" id=\\\"swalTitle\\\" class=\\\"swal2-input\\\" placeholder=\\\"Story Title\\\" value=\\\"\".concat($('#storyTitle').val(), \"\\\">\\n          <input type=\\\"text\\\" id=\\\"swalAuthor\\\" class=\\\"swal2-input\\\" placeholder=\\\"Author\\\" value=\\\"\").concat($('#storyAuthor').val(), \"\\\">\\n          <input type=\\\"text\\\" id=\\\"swalTags\\\" class=\\\"swal2-input\\\" placeholder=\\\"Tags (comma separated)\\\" value=\\\"\").concat($('#storyTags').val(), \"\\\">\\n          <input type=\\\"password\\\" id=\\\"swalPassword\\\" class=\\\"swal2-input\\\" placeholder=\\\"Password (optional)\\\">\\n          <div id=\\\"preexistingTagsContainer\\\" style=\\\"text-align:left; margin-top:10px;\\\"></div>\\n        \"),\n    didOpen: function didOpen() {\n      loadPreexistingTags();\n    },\n    showCancelButton: true,\n    confirmButtonText: 'Save',\n    preConfirm: function preConfirm() {\n      return {\n        title: document.getElementById('swalTitle').value,\n        author: document.getElementById('swalAuthor').value,\n        tags: document.getElementById('swalTags').value,\n        password: document.getElementById('swalPassword').value\n      };\n    }\n  }).then(function (result) {\n    if (result.isConfirmed) {\n      var data = result.value;\n      // Update fields in the editor\n      $('#storyTitle').val(data.title);\n      $('#storyAuthor').val(data.author);\n      $('#storyTags').val(data.tags);\n      var story = {\n        storyTitle: data.title,\n        storyAuthor: data.author,\n        storyText: $('#storyText').html(),\n        variables: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables,\n        pronounGroups: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups,\n        variableCounts: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts,\n        pronounGroupCount: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount,\n        customPlaceholders: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders,\n        tags: data.tags ? data.tags.split(',').map(function (s) {\n          return s.trim();\n        }) : [],\n        savedAt: new Date().toISOString(),\n        password: data.password && data.password.trim() !== '' ? data.password : null\n      };\n      $.ajax({\n        url: '/api/savestory',\n        method: 'POST',\n        contentType: 'application/json',\n        data: JSON.stringify(story),\n        success: function success() {\n          sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n            toast: true,\n            position: 'top-end',\n            icon: 'success',\n            title: 'Story saved to site!',\n            showConfirmButton: false,\n            timer: 1500\n          });\n        },\n        error: function error(xhr, statusText, errorThrown) {\n          if (xhr.status === 409) {\n            sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n              title: 'Story exists',\n              text: 'A story with this title already exists. Overwrite?',\n              icon: 'warning',\n              showCancelButton: true,\n              confirmButtonText: 'Yes, overwrite',\n              cancelButtonText: 'No'\n            }).then(function (result) {\n              if (result.isConfirmed) {\n                story.overwrite = true;\n                $.ajax({\n                  url: '/api/savestory',\n                  method: 'POST',\n                  contentType: 'application/json',\n                  data: JSON.stringify(story),\n                  success: function success() {\n                    sweetalert2__WEBPACK_IMPORTED_MODULE_9___default().fire({\n                      toast: true,\n                      position: 'top-end',\n                      icon: 'success',\n                      title: 'Story overwritten!',\n                      showConfirmButton: false,\n                      timer: 1500\n                    });\n                  },\n                  error: function error(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite) {\n                    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.handleAjaxError(xhrOverwrite, statusTextOverwrite, errorThrownOverwrite, 'Failed to overwrite story');\n                  }\n                });\n              }\n            });\n          } else {\n            _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to save story');\n          }\n        }\n      });\n    }\n  });\n};\n\n// Load preexisting tags for tag selector\nvar loadPreexistingTags = function loadPreexistingTags() {\n  $.ajax({\n    url: '/api/gettags',\n    method: 'GET',\n    success: function success(tags) {\n      var container = $('#preexistingTagsContainer');\n      container.empty();\n      if (tags.length > 0) {\n        container.append('<p>Select a tag:</p>');\n        tags.forEach(function (tag) {\n          var btn = $('<button type=\"button\" class=\"btn btn-sm btn-outline-secondary m-1 preexisting-tag-btn\"></button>');\n          btn.text(tag);\n          btn.on('click', function () {\n            var current = $('#swalTags').val();\n            var tagsArr = current ? current.split(',').map(function (t) {\n              return t.trim();\n            }).filter(Boolean) : [];\n            if (!tagsArr.includes(tag)) {\n              tagsArr.push(tag);\n              $('#swalTags').val(tagsArr.join(', '));\n            }\n          });\n          container.append(btn);\n        });\n      }\n    },\n    error: function error(err) {\n      console.error('Failed to load preexisting tags', err);\n    }\n  });\n};\n\n// Attach all event handlers\nvar initEvents = function initEvents() {\n  // Placeholder button click handler\n  $(document).on('click', '.placeholder-btn', function () {\n    var internalType = $(this).data('internal');\n    var displayName = $(this).data('display');\n    handlePlaceholderClick(internalType, displayName);\n  });\n\n  // Fill info icon click handler\n  $(document).on('click', '.fill-info-icon', function (e) {\n    e.stopPropagation();\n    var type = $(e.currentTarget).data('type');\n    var tooltip = _utils_typeHelpers_js__WEBPACK_IMPORTED_MODULE_4__.TypeHelpers.getTooltipForType(type);\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast(tooltip, 'info');\n  });\n\n  // Add accordion info icon click handler\n  $(document).on('click', '.accordion-info-icon', function (e) {\n    e.stopPropagation();\n    var tooltip = $(e.currentTarget).data('tooltip');\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast(tooltip, 'info');\n  });\n\n  // Show more toggle event handler\n  $(document).on('click', '.show-more-toggle', function () {\n    var parentList = $(this).closest('.list-group');\n    var hiddenItems = parentList.find('.secondary-placeholder-wrapper .secondary-placeholder');\n    var link = $(this);\n    link.text(link.text() === 'Show More' ? 'Show Less' : 'Show More');\n    hiddenItems.toggle();\n  });\n\n  // Add copy to clipboard handler\n  $('#copyStory').on('click', function () {\n    var finalText = $('#finalStory').text();\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.copyToClipboard(finalText);\n  });\n\n  // Selection changes\n  document.addEventListener('selectionchange', function () {\n    var editor = document.getElementById(\"storyText\");\n    var sel = window.getSelection();\n    if (sel.rangeCount > 0 && editor.contains(sel.anchorNode)) {\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lastRange = sel.getRangeAt(0);\n    }\n  });\n\n  // Attach search handlers with a reduced debounce delay (50ms)\n  $('#placeholderSearch').on('input', _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.Utils.debounce(function () {\n    var searchVal = $(this).val();\n    var scrollTop = $('#sidePlaceholderPanel').scrollTop(); // Store current scroll position\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', searchVal);\n    $('#addCustomPlaceholderBtn').text('Add \"' + searchVal + '\"');\n\n    // Restore scroll position after update if needed\n    if (searchVal && scrollTop === 0) {\n      $('#sidePlaceholderPanel').scrollTop(0); // Ensure stays at top\n    }\n  }, 50));\n  $('#modalPlaceholderSearch').on('input', _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.Utils.debounce(function () {\n    var searchVal = $(this).val();\n    var scrollTop = $('.modal-body').scrollTop(); // Store current scroll position\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', searchVal);\n    $('#modalAddCustomPlaceholderBtn').text('Add \"' + searchVal + '\"');\n\n    // Restore scroll position after update if needed\n    if (searchVal && scrollTop === 0) {\n      $('.modal-body').scrollTop(0); // Ensure stays at top\n    }\n  }, 50));\n\n  // Init accordions\n  (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n  (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n\n  // Filter tag input handler\n  $('#filterTag').on('input', _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.Utils.debounce(function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n  }, 300));\n\n  // Sort option change handler\n  $('#sortOption').on('change', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n  });\n\n  // Alphabetical order button\n  $('#alphabeticalOrderBtn').on('click', function () {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillOrder = 'alphabetical';\n    $(this).removeClass('btn-outline-secondary').addClass('btn-outline-primary');\n    $('#randomOrderBtn').removeClass('btn-outline-primary').addClass('btn-outline-secondary');\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n  });\n\n  // Random order button\n  $('#randomOrderBtn').on('click', function () {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillOrder = 'random';\n    $(this).removeClass('btn-outline-secondary').addClass('btn-outline-primary');\n    $('#alphabeticalOrderBtn').removeClass('btn-outline-primary').addClass('btn-outline-secondary');\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n  });\n\n  // Tag autocomplete\n  $(\"#filterTag\").autocomplete({\n    source: function source(request, response) {\n      $.ajax({\n        url: '/api/gettags',\n        method: 'GET',\n        dataType: 'json',\n        success: function success(tags) {\n          var filteredTags = $.ui.autocomplete.filter(tags, request.term);\n          response(filteredTags);\n        },\n        error: function error(err) {\n          console.error('Failed to load tags for autocomplete', err);\n          response([]);\n        }\n      });\n    },\n    minLength: 1,\n    select: function select(event, ui) {\n      $(\"#filterTag\").val(ui.item.value);\n      $(\"#applyFilters\").click();\n      return false;\n    }\n  });\n\n  // Apply filters button\n  $('#applyFilters').on('click', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n  });\n\n  // Share story button\n  $('#shareStory').on('click', function () {\n    var finalText = $('#finalStory').text();\n    var title = $('#displayTitle').text();\n    var author = $('#displayAuthor').text();\n    var content = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.formatStoryForExport)(title, author, finalText);\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.copyToClipboard(content).then(function (success) {\n      if (success) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast('Story copied to clipboard!');\n      } else {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showError('Copy Failed', 'Failed to copy story. Please copy manually.');\n      }\n    });\n  });\n\n  // Story editor input event\n  $('#storyText').on('input', function () {\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyHasUnsavedChanges = true;\n  });\n\n  // Upload story button\n  $('#uploadStoryBtn').on('click', function () {\n    $('#uploadStory').click();\n  });\n  $('#uploadStory').on('change', function () {\n    var file = this.files[0];\n    if (!file) return;\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      var content = e.target.result;\n      var storyData = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.parseStoryFile)(content);\n      $('#storyTitle').val(storyData.title);\n      $('#storyAuthor').val(storyData.author);\n      $('#storyText').html(storyData.content);\n\n      // Reset state\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables = [];\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variableCounts = {};\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].insertionCounter = 0;\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroupCount = 0;\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pronounGroups = {};\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fillValues = {};\n      _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].customPlaceholders = [];\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n    };\n    reader.readAsText(file);\n  });\n\n  // Start game button\n  $('#startGame').on('click', function () {\n    var content = $('#storyText').html();\n    if (!content.trim()) {\n      _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showError('Empty Story', 'Please write a story before continuing.');\n      return;\n    }\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updateVariablesFromEditor)();\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].storyText = (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.generateLegacyText)();\n    if (!_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.length) {\n      _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showError('No Placeholders', 'No placeholders found in the story.');\n      return;\n    }\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n    $('#inputs').removeClass('d-none');\n    $('#editor').addClass('d-none');\n  });\n\n  // Generate story button\n  $('#generateStory').on('click', handleGenerateStory);\n\n  // Create new story buttons\n  $('#createNewStory2, #createNewStory').on('click', handleCreateNewStory);\n\n  // Clear form button\n  $('#clearFormBtn').on('click', handleClearForm);\n\n  // Story editing flow buttons\n  $('#editStoryEntries').on('click', function () {\n    (0,_ui_forms_js__WEBPACK_IMPORTED_MODULE_6__.buildFillForm)();\n    $('#result').addClass('d-none');\n    $('#inputs').removeClass('d-none');\n  });\n  $('#backToEditor, #backToEditor2').on('click', function () {\n    $('#result, #inputs').addClass('d-none');\n    $('#editor').removeClass('d-none');\n  });\n\n  // Save story to site button\n  $('#saveStoryToSite').on('click', handleSaveStoryToSite);\n\n  // Download story button\n  $('#downloadStory').on('click', function () {\n    var finalText = $('#finalStory').text();\n    var title = $('#displayTitle').text();\n    var author = $('#displayAuthor').text();\n    var content = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.formatStoryForExport)(title, author, finalText);\n    var fileName = (0,_core_storyProcessor_js__WEBPACK_IMPORTED_MODULE_7__.createFilenameFromTitle)(title);\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.downloadTextFile(content, fileName);\n  });\n\n  // Save completed story button\n  $('#saveCompletedStory').on('click', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.addCompletedStoryToSavedStories();\n  });\n\n  // Saved stories buttons\n  $('#mySavedStoriesBtn').on('click', function () {\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStoriesList();\n    $('#savedStoriesModal').modal('show');\n  });\n  $(document).on('click', '.loadSavedStoryBtn', function () {\n    var index = $(this).data('index');\n    $('#savedStoriesModal').modal('hide');\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStory(index, \"play\");\n  });\n  $(document).on('click', '.editSavedStoryBtn', function () {\n    var index = $(this).data('index');\n    $('#savedStoriesModal').modal('hide');\n    _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.loadSavedStory(index, \"edit\");\n  });\n  $(document).on('click', '.deleteSavedStoryBtn', function () {\n    var title = $(this).data('title');\n    _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.confirmDialog({\n      title: 'Delete Story?',\n      text: 'Are you sure you want to delete this saved story?',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(function (result) {\n      if (result.isConfirmed) _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.deleteSavedStory(title);\n    });\n  });\n\n  // Rating submission\n  $('#submitRating').on('click', function () {\n    var rating = parseInt($('#storyRating').val(), 10);\n    if (!_core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId) {\n      _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showError('Error', 'Story ID not found.');\n      return;\n    }\n    $.ajax({\n      url: '/api/rateStory',\n      method: 'POST',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        storyId: _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentStoryId,\n        rating: rating\n      }),\n      success: function success(data) {\n        _utils_domUtils_js__WEBPACK_IMPORTED_MODULE_8__.showToast(\"Thank you for rating! New average: \".concat(data.rating.toFixed(1), \" (\").concat(data.ratingCount, \" votes)\"));\n      },\n      error: function error(xhr, statusText, errorThrown) {\n        _data_storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage.handleAjaxError(xhr, statusText, errorThrown, 'Failed to rate story');\n      }\n    });\n  });\n\n  // Editor key handling for placeholders\n  $('#storyText').on('keydown', function (e) {\n    var sel = window.getSelection();\n    if (sel.rangeCount) {\n      var range = sel.getRangeAt(0);\n      if (e.key === \"ArrowRight\") {\n        var node = sel.anchorNode;\n        if (node.nodeType === Node.TEXT_NODE && node.parentNode.classList.contains('placeholder')) {\n          if (sel.anchorOffset >= node.nodeValue.length) {\n            e.preventDefault();\n            var placeholder = node.parentNode;\n            var newRange = document.createRange();\n            newRange.setStartAfter(placeholder);\n            newRange.collapse(true);\n            sel.removeAllRanges();\n            sel.addRange(newRange);\n          }\n        }\n      }\n      if (e.key === \"Backspace\") {\n        var _node = sel.anchorNode;\n        if (_node.nodeType === Node.TEXT_NODE && _node.parentNode.classList.contains('placeholder') && sel.anchorOffset === 0) {\n          e.preventDefault();\n          var _placeholder = _node.parentNode;\n          var _newRange = document.createRange();\n          _newRange.setStartBefore(_placeholder);\n          _newRange.collapse(true);\n          sel.removeAllRanges();\n          sel.addRange(_newRange);\n        }\n      }\n    }\n  });\n\n  // Add placeholder button\n  $('#addPlaceholderBtn').on('click', function () {\n    $('#placeholderModal').modal('show');\n  });\n\n  // Click handler for existing placeholders\n  document.getElementById('existingPlaceholdersContainer').addEventListener('click', function (e) {\n    var btn = e.target.closest('.placeholder-item');\n    if (!btn) return;\n    var id = btn.getAttribute('data-id');\n    var variable = _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].variables.find(function (v) {\n      return v.id === id;\n    });\n    if (variable) (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.duplicatePlaceholder)(variable);\n  });\n\n  // Add custom placeholder button\n  $('#addCustomPlaceholderBtn').on('click', function () {\n    var raw = $('#placeholderSearch').val();\n    var usage = $('input[name=\"customPlaceholderType\"]:checked').val() || \"generic\";\n    if (usage === \"noun\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"noun\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection)(\"NN_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else if (usage === \"verb\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"verb\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection)(\"VB_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw);\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.insertPlaceholderFromCustom)(raw);\n    }\n    $('#placeholderSearch').val('');\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#placeholderAccordion', '#noResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentPlaceholderSearch);\n  });\n\n  // Modal add custom placeholder button\n  $('#modalAddCustomPlaceholderBtn').on('click', function () {\n    var raw = $('#modalPlaceholderSearch').val();\n    var usage = $('input[name=\"modalCustomPlaceholderType\"]:checked').val() || \"generic\";\n    if (usage === \"noun\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"noun\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showNounNumberSelection)(\"NN_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else if (usage === \"verb\") {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw, \"verb\");\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.showVerbTenseSelection)(\"VB_\" + _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.pascalCase(raw), _utils_StringUtils_js__WEBPACK_IMPORTED_MODULE_3__.StringUtils.naturalDisplay(raw));\n    } else {\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.addCustomPlaceholder)(raw);\n      (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.insertPlaceholderFromCustom)(raw);\n    }\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n    $('#placeholderModal').modal('hide');\n    $('#modalPlaceholderSearch').val('');\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n  });\n\n  // Search modal placeholder input\n  $('#modalPlaceholderSearchInput').on('input', function () {\n    _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch = $(this).val().trim().toLowerCase();\n    (0,_core_placeholders_js__WEBPACK_IMPORTED_MODULE_5__.updatePlaceholderAccordion)('#modalPlaceholderAccordion', '#modalNoResults', _core_state_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentModalPlaceholderSearch);\n  });\n\n  // The remaining initialization code follows\n  // ... existing code ...\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/handlers/events.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("6c85c62ed369052b329b")
/******/ })();
/******/ 
/******/ }
);